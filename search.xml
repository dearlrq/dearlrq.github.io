<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>单片机原理及应用</title>
    <url>/2024/02/26/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h1><p>教师</p>
<ul>
<li>姓名：祁瑞丽</li>
<li>电话：15369155136</li>
<li>研习室：1#322</li>
</ul>
<p>主要内容大纲</p>
<ul>
<li><p>GPIO</p>
</li>
<li><p>中断系统</p>
</li>
<li><p>定时器&#x2F;计数器</p>
</li>
<li><p>串口通信</p>
</li>
<li><p>ADC应用</p>
</li>
</ul>
<p>实验内容</p>
<ul>
<li>外部中断应用—键控三色灯的设计</li>
<li>串行通信应用—多指令控制器设计与开发</li>
<li>ADC应用—芯片温度监控系统设计</li>
</ul>
<h1 id="认识单片机"><a href="#认识单片机" class="headerlink" title="认识单片机"></a>认识单片机</h1>]]></content>
      <categories>
        <category>硬件</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>课程笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>JavaWeb（含SSM框架）系统速学</title>
    <url>/2024/02/27/JavaWeb%EF%BC%88%E5%90%ABSSM%E6%A1%86%E6%9E%B6%EF%BC%89%E7%B3%BB%E7%BB%9F%E9%80%9F%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>全球广域网，也称为万维网 ( www world Wide Web )，能够通过浏览器访问的网站。如：京东、淘宝。</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240228115425165.png"
                      alt="image-20240228115425165"
                ></li>
</ul>
<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="参考手册"><a href="#参考手册" class="headerlink" title="参考手册"></a>参考手册</h2><ul>
<li><a class="link"   href="http://w3school.com.cn/" >w3school.com.cn&#x2F; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>HTML ( Hyper Text Markup Language )：超文本标记语言。</p>
<ul>
<li><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p>
</li>
<li><p>标记语言：由标签构成的语言</p>
<p>HTML标签都是预定义好的。例如：使用&lt; a &gt;展示超链接，使用&lt; img &gt;展示图片，&lt; video &gt;展示视频。</p>
<p>HTML代码直接在浏览器中运行，HTML标签由浏览器解析。</p>
</li>
</ul>
<h3 id="标题标签-h1-h6"><a href="#标题标签-h1-h6" class="headerlink" title="标题标签&lt; h1 &gt;-&lt; h6 &gt;"></a>标题标签&lt; h1 &gt;-&lt; h6 &gt;</h3><p>h1最大，h6最小</p>
<h3 id="图片标签-img-src-””"><a href="#图片标签-img-src-””" class="headerlink" title="图片标签 &lt; img src&#x3D;”” &gt;"></a>图片标签 &lt; img src&#x3D;”” &gt;</h3><p>src：指定图像的url(绝对路径 &#x2F;相对路径)。</p>
<ul>
<li><p>绝对路径：绝对磁盘路径、绝对网络路径。</p>
</li>
<li><p>相对路径：.&#x2F;：当前目录，可省略；..&#x2F;：上一级目录。</p>
</li>
</ul>
<p>width：图像的宽度(像素 &#x2F;相对于父元素的百分比)。</p>
<p>height：图像的高度(像素 &#x2F;相对于父元素的百分比)。</p>
<h3 id="超链接标签-a-href-””-target-””"><a href="#超链接标签-a-href-””-target-””" class="headerlink" title="超链接标签 &lt; a href&#x3D;”” target&#x3D;”” &gt;"></a>超链接标签 &lt; a href&#x3D;”” target&#x3D;”” &gt;</h3><p>href：指定资源访问的url。</p>
<p>target：指定在何处打开资源链接。</p>
<ul>
<li>_self：默认值，在当前页面打开。</li>
<li>_blank：在空白页面打开。</li>
</ul>
<h3 id="视频标签-video-src-””-controls"><a href="#视频标签-video-src-””-controls" class="headerlink" title="视频标签 &lt; video src&#x3D;”” controls &gt;"></a>视频标签 &lt; video src&#x3D;”” controls &gt;</h3><p>src：规定视频的url。</p>
<p>controls：显示播放控件。</p>
<p>width：播放器的宽度。</p>
<p>height：播放器的高度。</p>
<h3 id="音频标签-audio-src-””-controls"><a href="#音频标签-audio-src-””-controls" class="headerlink" title="音频标签 &lt; audio src&#x3D;”” controls &gt;"></a>音频标签 &lt; audio src&#x3D;”” controls &gt;</h3><p>src：规定音频的url。</p>
<p>controls：显示播放控件。</p>
<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p>&lt; th &gt; ：表示表头单元格，具有加粗居中效果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240228170546475.png"
                      alt="image-20240228170546475"
                ></p>
<h3 id="表单标签-form-action-””-method-””"><a href="#表单标签-form-action-””-method-””" class="headerlink" title="表单标签 &lt; form action&#x3D;”” method&#x3D;”” &gt;"></a>表单标签 &lt; form action&#x3D;”” method&#x3D;”” &gt;</h3><p>action：表单提交的url，往何处提交数据 。 如果不指定，默认提交到当前页面。</p>
<p>method: 表单的提交方式。</p>
<ul>
<li>get：在url后面拼接表单数据，url长度有限制，是默认值。</li>
<li>post：在消息体(请求体) 中传递的，参数大小无限制的。</li>
</ul>
<h4 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h4><p>&lt; input &gt;：表单项，通过type属性控制输入形式</p>
<p>&lt; select &gt;：定义下拉列表</p>
<p>&lt; option &gt; ：定义列表项</p>
<p>&lt; textarea &gt;：定义文本域</p>
<p>表单项必须有name属性才可以提交。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240228170609448.png"
                      alt="image-20240228170609448"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240228170617774.png"
                      alt="image-20240228170617774"
                ></p>
<h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><p>&lt; hr &gt;：水平分割线</p>
<p>&lt; br &gt;：换行</p>
<p>&lt; p &gt;：段落</p>
<p>&lt; b &gt; &#x2F;&lt; strong &gt;：文本加粗</p>
<p>&lt; span &gt;：一个在开发网页时大量会用到的没有语义的布局标签；一行可以显示多个(组合行内元素)，宽度和高度默认由内容撑开；不可以设置宽高 (width、height)</p>
<p>&lt; div &gt;：一行只显示一个(独占一行)；宽度默认是父元素的宽度，高度默认由内容撑开；可以设置宽高 (width、height)</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>CSS ( Cascading Style Sheet )：层叠样式表，用于控制页面的样式 ( 表现 )。</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a408199c-4141-4844-8f67-e68fa3dfcac6-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>优先级：id &gt; 类 &gt; 元素</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/633d1731-b21d-499c-ab9b-fc974b8180ff-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>页面中所有的元素(标签)，都可以看做是一个盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局。</p>
<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e0e9d03d-25f9-45d7-9d6c-80e0b51de009-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>width：设置宽度</p>
<p>height：设置高度</p>
<p>padding、margin：上、右、下、左</p>
<p>border：宽度、线条类型、颜色</p>
<p>background：背景</p>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><p>颜色：color</p>
<table>
<thead>
<tr>
<th>表示方式</th>
<th>表示含义</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>关键字</td>
<td>预定义的颜色名</td>
<td>red、green、blue</td>
</tr>
<tr>
<td>rgb表示法</td>
<td>红绿蓝三原色，每项取值范围：0-255</td>
<td>rgb(0,0,0)、rgb(255,255,255)、rgb(255,0,0)</td>
</tr>
<tr>
<td>十六进制表示法</td>
<td>#开头，将数字转换成十六进制表示</td>
<td>#ff0000、#cccccc，简写：#ccc</td>
</tr>
</tbody></table>
<p>字体大小：font-size</p>
<p>规定添加到文本的修饰：text-decoration，其中none表示定义标准的文本</p>
<p>设置行高：line-height</p>
<p>定义第一个行内容的缩进：text-indent</p>
<p>规定元素中的文本的水平对齐方式：text-align</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>JavaScript ( 简称：JS )是一门跨平台、面向对象的脚本语言。是用来控制网页行为的，它能使网页可交互。</p>
<p>JavaScript 和 Java 是完全不同的语言，不论是概念还是设计。但是基础语法类似。</p>
<h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/675a0f0f-716a-4e94-9132-f8ac779098ac-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2582d6db-e4af-427d-9c09-17022702f111-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>区分大小写：与Java 一样，变量名、函数名以及其他一切东西都是区分大小写的。</p>
<p>注释：单行注释：&#x2F;&#x2F; 注释内容；多行注释：&#x2F;* 注释内容 *&#x2F;</p>
<p>每行结尾的分号可有可无。</p>
<p>大括号表示代码块。</p>
<h4 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2891e753-e511-4814-aef4-52e24395ee90-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>命名规则：</p>
<ul>
<li><p>组成字符可以是任何字母、数字、下划线 (_) 或美元符号 ($) 。</p>
</li>
<li><p>数字不能开头。</p>
</li>
<li><p>建议使用驼峰命名。</p>
</li>
</ul>
<p>定义：</p>
<ul>
<li><p>用var关键字 ( variable 的缩写 ) 来声明。</p>
</li>
<li><p>同一变量可以存放不同类型的值。</p>
</li>
</ul>
<p>特点：</p>
<ul>
<li><p>作用域比较大，全局变量。</p>
</li>
<li><p>可以重复定义的，但后面的覆盖前面的</p>
</li>
</ul>
<p>注意：</p>
<ul>
<li><p>ECMAScript6 新增了 let 关键字来定义变量。它的用法类似于 var，但是所声明的变量，只在 let 关键字所在的代码块内有效，且不允许重复声明。</p>
</li>
<li><p>ECMAScript6 新增了 const 关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变。</p>
</li>
</ul>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>引用类型</p>
<p>原始类型：</p>
<ul>
<li>number：数字 ( 整数、小数、NaN ( Not a Number ) )</li>
<li>string：字符串，单双引皆可</li>
<li>boolean：布尔</li>
<li>null：对象为空</li>
<li>undefined：当声明的变量未初始化时，该变量的默认值是undefined</li>
</ul>
<p>使用 typeof 运算符可以获取数据类型。</p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>字符串类型转为数字：</p>
<ul>
<li>将字符串字面值转为数字。 如果字面值不是数字，则转为NaN。</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;12&quot;</span>)); <span class="comment">//12</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;12A45&quot;</span>)); <span class="comment">//12</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;A45&quot;</span>)); <span class="comment">//NaN ( not a number )</span></span><br></pre></td></tr></table></figure></div>



<p>其他类型转为boolean：</p>
<ul>
<li>Number：0和NaN为false，其他均转为true。</li>
<li>String：空字符串为false，其他均转为true。</li>
<li>Null和 undefined：均转为false。</li>
</ul>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/47ac47da-f475-419f-93eb-1bba0a1af413-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>&#x3D;&#x3D;与&#x3D;&#x3D;&#x3D;的区别：</p>
<ul>
<li>&#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换。</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> _age = <span class="string">&quot;20&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> $age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(age == _age); <span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>(age === _age); <span class="comment">//flase</span></span><br><span class="line"><span class="title function_">alert</span>(age === $age); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>

<h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4><p>if…else if …else…</p>
<p>switch</p>
<p>for</p>
<p>while</p>
<p>do…while</p>
<h3 id="函数（即方法）"><a href="#函数（即方法）" class="headerlink" title="函数（即方法）"></a>函数（即方法）</h3><h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><p>函数(方法)是被设计为执行特定任务的代码块。</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>avaScript 函数通过 function 关键字进行定义。</p>
<p>语法：</p>
<ul>
<li>1、function 函数名 （形参1，形参2……）{ 函数体 }</li>
<li>2、var 函数名 &#x3D; function(形参1,形参2…..) { 函数体 }</li>
</ul>
<p>注意：</p>
<ul>
<li><p>形式参数不需要类型。因为JavaScript是弱类型语言。</p>
</li>
<li><p>返回值也不需要定义类型，可以在函数内部直接使用return返回即可。</p>
</li>
</ul>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>函数名 (实际参数列表)</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="Array（数组）"><a href="#Array（数组）" class="headerlink" title="Array（数组）"></a>Array（数组）</h4><p>定义：</p>
<ul>
<li><p>var 变量名 &#x3D; new Array ( 元素列表 )；</p>
</li>
<li><p>var 变量名 &#x3D; [ 元素列表 ]；</p>
</li>
<li><p>变量名 [ 索引 ] &#x3D; 值；</p>
</li>
</ul>
<p>属性：</p>
<ul>
<li>length：设置或返回数组中元素的数量。</li>
</ul>
<p>特点：</p>
<ul>
<li>长度可变、类型可变。</li>
</ul>
<p>方法：</p>
<ul>
<li>forEach ( )<ul>
<li>遍历数组中的每个有值的元素，并调用一次传入的函数。</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arr是数组</span></span><br><span class="line">arr.<span class="title function_">forEash</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 箭头函数:(...) =&gt; &#123;...&#125; -- 简化函数定义</span></span><br><span class="line">arr.<span class="title function_">forEash</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>push ( )</p>
<ul>
<li>将新元素添加到数组的末尾，并返回新的数组。</li>
</ul>
</li>
<li><p>splice ( )</p>
<ul>
<li>从数组中删除元素。第一个参数是从什么位置开始删，第二个参数是删几个。</li>
</ul>
</li>
</ul>
<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p>定义：</p>
<ul>
<li>var 变量名 &#x3D; new String ( “……” ) ;</li>
<li>var 变量名 &#x3D; “……”；</li>
</ul>
<p>属性：</p>
<ul>
<li>length：字符串的长度。</li>
</ul>
<p>方法：</p>
<ul>
<li><p>charAt ( )</p>
<ul>
<li>返回在指定位置的字符。</li>
</ul>
</li>
<li><p>indexOf ( )</p>
<ul>
<li>检索字符串位置。</li>
</ul>
</li>
<li><p>trim ( )</p>
<ul>
<li>去除字符串两边的空格。</li>
</ul>
</li>
<li><p>substring ( )</p>
<ul>
<li>提取字符串中两个指定的索引号之间的字符。左闭右开。</li>
</ul>
</li>
</ul>
<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>自定义对象:</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/6b283f80-7343-45d7-a66c-c088a526c04f-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>介绍:</p>
<ul>
<li>JavaScript Object Notation，JavaScript对象标记法。JSON是通过JavaScript对象标记法书写的文本。由于其语法简单，层次结构鲜明，现多用于作为数据载体，在网络中进行数据传输。</li>
</ul>
<p>定义：</p>
<ul>
<li>var 变量名 &#x3D; { “key1” : value1，”key2” : value2 …..}；</li>
<li>value的数据类型：<ul>
<li>数字 ( 整数或浮点数 )</li>
<li>字符串 ( 在双引号中 )</li>
<li>逻辑值 ( true 或 false )</li>
<li>数组 ( 在方括号中 )</li>
<li>对象 ( 在花括号中 )</li>
<li>null</li>
</ul>
</li>
</ul>
<p>转换：</p>
<ul>
<li>JSON字符串转为JS对象：</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>JS对象转为JSON字符串：</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsObject);</span><br></pre></td></tr></table></figure></div>

<h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>介绍：</p>
<ul>
<li>Browser Obiect Model 浏览器对象模型，允许JavaScript 与浏览器对话，Javacript 将浏览器的各个组成部分封装为对象。</li>
</ul>
<p>组成：</p>
<ul>
<li>Window：浏览器窗口对象</li>
<li>Navigator：浏览器对象</li>
<li>Screen：屏幕对象</li>
<li>History：历史记录对象</li>
<li>Location：地址栏对象</li>
</ul>
<p>Window：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8a5db09e-cb86-4001-bb0a-1b0f863edf58-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定时器-setInterval -- 周期性的执行某一个函数</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	i++;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器执行了&quot;</span>+ i +<span class="string">&quot;次&quot;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器-setTimeout -- 延迟指定时间执行一次</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;JS&quot;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></div>

<p>Location：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/17a8a14b-2c53-4ea7-a988-75efd626ee30-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">location.<span class="property">href</span>; <span class="comment">//返回本地地址。</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;https://www.itcast.cn&quot;</span>; <span class="comment">//自动跳转到该地址。</span></span><br></pre></td></tr></table></figure></div>

<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>介绍：</p>
<ul>
<li>Document object Model，文档对象模型。</li>
</ul>
<p>组成：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/77403e16-9cff-461a-9bdd-0e3c092a527c-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>JavaScript 通过DOM，能够对HTML进行操作：</p>
<ul>
<li>改变HTML元素的内容。</li>
<li>改变HTML元素的样式(CSS)。</li>
<li>对HTML DOM 事件作出反应。</li>
<li>添加和删除HTML元素。</li>
</ul>
<p>方法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9cde866d-df6b-4c9b-bff2-78ed287881da-25143160.jpg"
                      alt="img"
                ><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b2f93c99-f5ae-42ae-a0ee-a927e2a59407-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
</ul>
<h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><p>事件：</p>
<ul>
<li>HTML事件是发生在HTML元素上的“事情”。比如：按钮被点击、鼠标移动到元素上、按下键盘按键。</li>
</ul>
<p>事件监听：</p>
<ul>
<li>JavaScript可以在事件被侦测到时执行代码。</li>
</ul>
<p>事件绑定：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/584141c9-8ba6-4f8f-94fa-4a47eee9f9f4-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>常见事件：</p>
<ul>
<li><table>
<thead>
<tr>
<th>事件名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>鼠标单击事件</td>
</tr>
<tr>
<td>onblur</td>
<td>元素失去焦点</td>
</tr>
<tr>
<td>onfocus</td>
<td>元素获得焦点</td>
</tr>
<tr>
<td>onload</td>
<td>某个页面或图像被完成加载</td>
</tr>
<tr>
<td>onsubmit</td>
<td>当表单提交时触发该事件</td>
</tr>
<tr>
<td>onkeydown</td>
<td>某个键盘的键被按下</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标被移到某元素之上</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标从某元素移开</td>
</tr>
</tbody></table>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入框聚焦后，展示小写; 输入框离焦后，展示大写; -- onfocus，onblur</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lower</span>(<span class="params"></span>)&#123; <span class="comment">//小写</span></span><br><span class="line">	<span class="comment">//获取输入框元素对象</span></span><br><span class="line">	<span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">	<span class="comment">//将值转为小写</span></span><br><span class="line">	input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">upper</span>(<span class="params"></span>)&#123; <span class="comment">//大写</span></span><br><span class="line">	<span class="comment">//获取输入框元素对象</span></span><br><span class="line">	<span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">	<span class="comment">//将值转为小写</span></span><br><span class="line">	input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/23f9b571-0ed1-4fcc-a20e-390275a36021-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/49554752-9b28-47bf-9126-650c12ca840a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>介绍：</p>
<ul>
<li>HTML 标签上带有 V-前缀 的特殊属性，不同指令具有不同含义。例如：v-if，v-for…</li>
</ul>
<p>常用指令：</p>
<ul>
<li><table>
<thead>
<tr>
<th>指令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>v-bind</td>
<td>为HTML标签绑定属性值，如设置 href，css样式等</td>
</tr>
<tr>
<td>v-model</td>
<td>在表单元素上创建双向数据绑定</td>
</tr>
<tr>
<td>v-on</td>
<td>为HTML标签绑定事件</td>
</tr>
<tr>
<td>v-if</td>
<td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td>
</tr>
<tr>
<td>v-else-if</td>
<td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td>
</tr>
<tr>
<td>v-else</td>
<td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td>
</tr>
<tr>
<td>v-show</td>
<td>根据条件展示某元素，区别在于切换的是display属性的值</td>
</tr>
<tr>
<td>v-for</td>
<td>列表渲染，遍历容器的元素或者对象的属性</td>
</tr>
</tbody></table>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/7fce8c79-9f78-4632-b7ca-9903f30593af-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/346bd930-c4b0-480a-bd26-5087756b0639-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/34e3adee-0ed8-4de1-96ad-07dcd93a436e-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d48312ed-475d-4b9e-b4d6-e966f25768e0-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
</ul>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>介绍：</p>
<ul>
<li>指一个对象从创建到销毁的整个过程。</li>
</ul>
<p>生命周期的八个阶段：</p>
<ul>
<li><p>每触发一个生命周期事件，会自动执行一个生命周期方法 ( 钩子 )。</p>
</li>
<li><table>
<thead>
<tr>
<th>状态</th>
<th>阶段周期</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>创建前</td>
</tr>
<tr>
<td>created</td>
<td>创建后</td>
</tr>
<tr>
<td>beforeMount</td>
<td>挂载前</td>
</tr>
<tr>
<td>mounted</td>
<td>挂载完成</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>更新前</td>
</tr>
<tr>
<td>updated</td>
<td>更新后</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>销毁前</td>
</tr>
<tr>
<td>destroyed</td>
<td>销毁后</td>
</tr>
</tbody></table>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5904f391-b232-4840-a5a8-f16fba37ff46-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<p>mounted：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。(发送请求到服务端，加载数据)</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Vue挂载完毕,发送请求获取数据&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>	</span><br></pre></td></tr></table></figure></div>

<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>Asynchronous JavaScript And XML，异步的 JavaScript 和 XML 。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。</p>
<p>异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。如：搜索联想、用户名是否可用的校验等。</p>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b68f86d7-8b35-4640-be06-92da8350689e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="XMLHttpRequest-对象属性"><a href="#XMLHttpRequest-对象属性" class="headerlink" title="XMLHttpRequest 对象属性"></a>XMLHttpRequest 对象属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>onreadystatechange</td>
<td>定义当 readyState 属性发生变化时被调用的函数。</td>
</tr>
<tr>
<td>readyState</td>
<td>保存 XMLHttpRequest 的状态。0：请求未初始化；1：服务器连接已建立；2：请求已收到；                   3：正在处理请求；4：请求已完成且响应已就绪。</td>
</tr>
<tr>
<td>responseTest</td>
<td>以字符串返回响应数据。</td>
</tr>
<tr>
<td>responseXML</td>
<td>以 XML 数据返回响应数据。</td>
</tr>
<tr>
<td>status</td>
<td>返回请求的状态号。200：”OK” ；403：”Forbidden” ；404：”Not Found” 。</td>
</tr>
<tr>
<td>statusText</td>
<td>返回状态文本 ( 比如 “OK” 或 “Not Found” )</td>
</tr>
</tbody></table>
<h3 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3d20750f-26d6-4927-acee-2ee6317810fb-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>请求方式别名：</p>
<ul>
<li>axios . get (url [ , config])</li>
<li>axios . delete (url [ , config])</li>
<li>axios . post (url [ , data[config]])</li>
<li>axios . put (url [ , data[config]])</li>
</ul>
<p>实例：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;#app&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>入职日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>最后操作时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(emp,index) in emps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;emp.image&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;emp.gender == 1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;emp.gender == 2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.job&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.entrydate&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.updatetime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">emps</span>:[]</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="comment">//发送异步请求,加载数据</span></span></span><br><span class="line"><span class="language-javascript">        	axois.<span class="title function_">get</span>(<span class="string">&quot;http://......&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="variable language_">this</span>.<span class="property">emps</span> = result.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        	&#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//数据</span><br><span class="line">&#123;</span><br><span class="line">	&quot;code&quot;: 1,</span><br><span class="line">	&quot;message&quot;: &quot;success&quot;,</span><br><span class="line">	&quot;data&quot;: [</span><br><span class="line">		&#123;</span><br><span class="line">			&quot;id&quot;: 1,</span><br><span class="line">			&quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">			&quot;image&quot;: &quot;http://......&quot;,</span><br><span class="line">			&quot;gender&quot;: 1,</span><br><span class="line">			&quot;job&quot;: &quot;班主任&quot;,</span><br><span class="line">			&quot;entrydate&quot;: &quot;2023-01-01&quot;,</span><br><span class="line">			&quot;updatetime&quot;: &quot;2023-01-01 12:00:00&quot;	</span><br><span class="line">        &#125;,</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><p>产品经理通过页面原型和需求文档分析得到接口文档。</p>
<h3 id="Vue图形化界面"><a href="#Vue图形化界面" class="headerlink" title="Vue图形化界面"></a>Vue图形化界面</h3><p>命令：vue ui</p>
<h3 id="Vue项目"><a href="#Vue项目" class="headerlink" title="Vue项目"></a>Vue项目</h3><p>目录结构：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ed4f161e-c20a-47c4-91ee-b2ab50bcffc4-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>配置端口：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9fd1553a-9a5d-4d0e-8802-91bfe9483783-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>启动：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/67a0876d-b993-4aa3-9533-2face7ed39a0-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>开发流程：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/238d7865-1deb-48db-89b7-1242d49cf6ae-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/bb0cce68-d233-4e45-953f-48f62fc35f90-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a class="link"   href="https://element-plus.org/zh-CN/#/zh-CN" >一个 Vue 3 UI 框架 | Element Plus (element-plus.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>安装：</p>
<ul>
<li>npm install element-plus –save</li>
</ul>
<p>导包：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240301175049772.png"
                      alt="image-20240301175049772"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240301175137931.png"
                      alt="image-20240301175137931"
                ></li>
</ul>
<p>使用组件：</p>
<ul>
<li>官网搜索，然后复制并改动。</li>
</ul>
<h2 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h2><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p>URL 中的 hash(#号) 与组件之间的对应关系。</p>
<h3 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h3><p>介绍：</p>
<ul>
<li>Vue Router 是 Vue 的官方路由。</li>
</ul>
<p>组成：</p>
<ul>
<li>VueRouter：路由器类，根据路由请求在路由视图中动态渲染选中的组件。</li>
<li>&lt; router-link &gt;：请求链接组件，浏览器会解析成&lt; a &gt;。</li>
<li>&lt; router-view &gt;：动态视图组件，用来渲染展示与路由路径对应的组件。</li>
</ul>
<p>作用：</p>
<ul>
<li>路由链接组件 router-link —&gt; 路由请求 —&gt; 路由器 VueRouter (路由表) —&gt; 更新 —&gt; 路由展示组件 router-view 。</li>
</ul>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240302195904255.png"
                      alt="image-20240302195904255"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240302200239694.png"
                      alt="image-20240302200239694"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240302200654028.png"
                      alt="image-20240302200654028"
                ></p>
</li>
</ul>
<h2 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8e7d3169-ac00-4b10-bf52-34216d50111f-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="部署（Nginx）"><a href="#部署（Nginx）" class="headerlink" title="部署（Nginx）"></a>部署（Nginx）</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f4ff2e85-bc8c-43e6-91d6-73d6c45f5927-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>Nginx默认占用80端口号，如果80端口号被占用，可以在nginx.conf中修改端口号。</p>
<p>查看80端口谁占用：netstat -ano|findStr 80 。</p>
<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240302201812625.png"
                      alt="image-20240302201812625"
                ></li>
</ul>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h3><p>Maven 是 apache（ 世界上最大、最受欢迎、非盈利性、开源软件基金会） 旗下的一个开源项目，是一款用于管理和构建java项目的工具。它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/502264aa-0a13-4a25-91a2-93c4cf3ef874-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>方便快捷的管理项目依赖的资源 ( jar包 )，避免版本冲突问题。</p>
<ul>
<li>在 pom.xml 中。</li>
</ul>
<p>标准跨平台 (Linux、Windows、Macos)的自动化项目构建方式。</p>
<ul>
<li>右侧Maven命令，然后再target包下实现。</li>
</ul>
<p>提供标准、统一的项目结构。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/60de190d-c354-4567-ab0a-61e7ee3ee4c7-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h3><p>介绍：</p>
<ul>
<li>使用坐标来定义项目或引入项目中需要的依赖。</li>
<li>Maven 的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置。</li>
</ul>
<p>组成：</p>
<ul>
<li><p>groupld：定义当前Maven项目隶属组织名称 (通常是域名反写，例如：com.itheima)。</p>
</li>
<li><p>artifactld：定义当前Maven项目名称 (通常是模块名称，例如：order-service、goods-service)。</p>
</li>
<li><p>version：定义当前项目版本号。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="IDEA-导入-Maven-项目"><a href="#IDEA-导入-Maven-项目" class="headerlink" title="IDEA 导入 Maven 项目"></a>IDEA 导入 Maven 项目</h3><p>方法1：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/12712607-75d4-4c9b-ba6b-f615566a922d-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>方法2：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3d8978d7-f382-4659-af0b-ad3d543e893e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><p>依赖：</p>
<ul>
<li>指当前项目运行所需要的jar包，一个项目中可以引入多个依赖。</li>
</ul>
<p>配置：</p>
<ul>
<li><p>如果引入的依赖，在本地仓库不存在，将会连接远程仓库&#x2F;中央仓库，然后下载依赖。</p>
</li>
<li><p>如果不知道依赖的坐标信息，可以到 <a class="link"   href="https://mvnrepository.com/" >https://mvnrepository.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 搜索。</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b868d8ae-7c7a-431f-a685-e3886732ed38-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><p>直接依赖：</p>
<ul>
<li>在当前项目中通过依赖配置建立的依赖关系。</li>
</ul>
<p>间接依赖：</p>
<ul>
<li>被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源。</li>
</ul>
<p>排除依赖：</p>
<ul>
<li>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>将传递依赖图表化：</p>
<ul>
<li>在pom.xml右击</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5a8117bb-10c6-496a-bf8f-f902af30e3b7-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c28442eb-fc1f-430d-a9e9-d14cb41fe036-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><p>介绍：</p>
<ul>
<li>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一。</li>
</ul>
<p>3套相互独立的生命周期：</p>
<ul>
<li>clean：清理工作。</li>
<li>default：核心工作，如：编译、测试、打包、安装、部署等。</li>
<li>site：生成报告、发布站点等。</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/707d7b00-abfa-4766-b7dc-5c381d8af21c-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e34e8ced-316d-4faf-90dd-b15d1f117797-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>执行指定生命周期的两种方式：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5815c5d7-804f-4195-96fb-977ba127a80e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h2><h3 id="分模块设计与开发"><a href="#分模块设计与开发" class="headerlink" title="分模块设计与开发"></a>分模块设计与开发</h3><p>介绍：</p>
<ul>
<li>将项目按照功能拆分成若干个子模块。</li>
<li>方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享。</li>
<li>分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。</li>
</ul>
<p>实例：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b8be78b8-a461-4423-830c-000234825c07-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/aac32427-91b3-49ae-94d1-acdd3d48e958-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/059ee1ab-720b-48ff-9936-721317f4c56d-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="继承与聚合"><a href="#继承与聚合" class="headerlink" title="继承与聚合"></a>继承与聚合</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>介绍：</p>
<ul>
<li>继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</li>
<li>简化依赖配置、统一管理依赖。</li>
</ul>
<p>实现 (pom.xml)：</p>
<ul>
<li>&lt; parent &gt; …… &lt; &#x2F;parent &gt;</li>
</ul>
<p>&lt; dependencyManagement &gt;与&lt; dependencies &gt;的区别：</p>
<ul>
<li>&lt; dependencies &gt;是直接依赖，在父工程配置了依赖，子工程会直接继承下来。</li>
<li>&lt; dependencyManagement &gt;是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖 (无需指定版本)。</li>
</ul>
<h4 id="继承实现"><a href="#继承实现" class="headerlink" title="继承实现"></a>继承实现</h4><p>注意：</p>
<ul>
<li>在子工程中，配置了继承关系之后，坐标中的 &lt; groupId &gt; 是可以省略的，因为会自动继承父工程的。</li>
<li>&lt; relativePath &gt; 指定父工程的 pom.xml 文件的相对位置 (如果不指定，将从本地仓库 &#x2F; 远程仓库查找该工程)。</li>
<li>若父子工程都配置了同一个依赖的不同版本，以子工程的为准。</li>
</ul>
<p>实现：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9752e41b-e0d6-4b7e-a2d2-dd747b1e81c0-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/13b99c46-b96c-4719-bba5-e6262e2cce71-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/691d2268-1a15-46e8-9a82-5c1451838efc-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h4><p>介绍：</p>
<ul>
<li>在maven中，可以在父工程的 pom文件中通过&lt; dependencyManagement &gt;来统一管理依赖版本。</li>
<li>子工程引入依赖时，无需指定&lt; version &gt;版本号，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</li>
</ul>
<p>实现：</p>
<ul>
<li>方法1：<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c541f307-b3f4-4f89-991c-e44048298b25-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
<li>方法2：<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/dfea8567-9505-4125-98d2-14184c914f8a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
</ul>
<h4 id="聚合实现"><a href="#聚合实现" class="headerlink" title="聚合实现"></a>聚合实现</h4><p>介绍：</p>
<ul>
<li>聚合：将多个模块组织成一个整体，同时进行项目的构建。</li>
<li>聚合工程：一个不具有业务功能的“空”工程 (有且仅有一个 pom.xml 文件)。</li>
<li>一般来说，父工程也是聚合工程。</li>
<li>聚合工程中所包含的模块，在构建时，会自动根据模块间的依赖关系设置构建顺序，与聚合工程中模块的配置书写位置无关。</li>
</ul>
<p>实现：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f4d84dfd-7148-4233-b136-4e5d83ff6577-25143160.jpg"
                      alt="img"
                ></li>
<li>然后再聚合工程中执行打包操作。</li>
</ul>
<h4 id="继承与聚合的差异"><a href="#继承与聚合的差异" class="headerlink" title="继承与聚合的差异"></a>继承与聚合的差异</h4><p>作用：</p>
<ul>
<li>继承用于简化依赖配置、统一管理依赖。</li>
<li>聚合用于快速构建项目。</li>
</ul>
<p>相同点：</p>
<ul>
<li>聚合与继承的 pom.xml 文件打包方式均为pom，可以将两种关系制作到同一个pom文件中。</li>
<li>聚合与继承均属于设计型模块，并无实际的模块内容。</li>
</ul>
<p>不同点：</p>
<ul>
<li><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己。</p>
</li>
<li><p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些。</p>
</li>
</ul>
<h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><h4 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h4><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</p>
<p>私服在企业项目开发中，一个项目&#x2F;公司，只需要一台即可 (无需我们自己搭建，会使用即可)。</p>
<p>依赖查找顺序：</p>
<ul>
<li>本地仓库、私服、中央仓库 (从前到后)。</li>
</ul>
<p>项目版本：</p>
<ul>
<li>RELEASE(发行版本):功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li>
<li>SNAPSHOT(快照版本):功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li>
</ul>
<h4 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f39c4c4d-9871-43ad-a71b-05fe8904b3c7-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>第一步的&lt; id &gt;要和第二步的&lt; id &gt;对应。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/24fcca49-47a9-4390-88de-42618628f830-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/1670214e-81b4-403d-8c8b-e11a5074882f-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/aa31e951-c8a1-497a-a51e-ca4a1c4bec6f-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b773e8d3-c3c4-4dc0-a544-32e98b942879-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5275ed71-8dbf-452c-b922-09134cae8258-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>在 pom.xml 文件中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/baca0177-644d-44de-a1d8-37b1b059e021-25143160.jpg"
                      alt="img"
                ></p>
<h2 id="SpringBoot-Web入门"><a href="#SpringBoot-Web入门" class="headerlink" title="SpringBoot Web入门"></a>SpringBoot Web入门</h2><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/17afca6d-5110-47fc-8133-106a36acb7ad-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/33efaa01-1a4d-4bba-b64f-c0aa1a1ca52c-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a872536a-77b2-4790-b60e-bfcab3b3ca95-25143160.jpg"
                      alt="img"
                ></li>
<li></li>
</ul>
<h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><h4 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h4><p>概念：</p>
<ul>
<li>HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则。</li>
</ul>
<p>特点：</p>
<ul>
<li>基于TCP协议：面向连接，安全。</li>
<li>基于请求-响应模型的：一次请求对应一次响应。</li>
<li>HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。<ul>
<li>缺点：多次请求间不能共享数据。</li>
<li>优点：速度快。</li>
</ul>
</li>
</ul>
<h4 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/05482e19-dcf7-41c6-b950-1429662f8cc2-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>请求头：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/41616e37-7792-476b-8a3b-563f14e89862-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/1cab31d2-95b8-4986-9152-abdd3ecf8df4-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>状态码：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/defb7db1-398b-445c-abc5-508897fb5364-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d471a499-446e-4358-820d-62c7426922a8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>响应头：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2913802f-2faa-4fcb-b171-489dfd67349d-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h4><p>介绍：</p>
<ul>
<li>Web服务器是一个软件程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷，主要功能是“提供网上信息浏览服务”。</li>
</ul>
<p>Tomcat：</p>
<ul>
<li>一个轻量级的web服务器，支持servlet、jsp等少量javaEE规范，也被称为web容器、servlet容器。</li>
<li>基于Springboot开发的web应用程序，内置了tomcat服务器，当启动类运行时，会自动启动内嵌的tomcat服务器。默认端口8080。</li>
<li>起步依赖：spring-boot-starter-web；spring-boot-starter-test。</li>
</ul>
<h2 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h2><h3 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9c9b7907-8f98-4d02-bd27-428ac896cae8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h4><p>get样式 (SpringBoot方式)：</p>
<ul>
<li>基本：<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9431bbe1-79f4-4bf1-9e7a-fb340dbe4ebd-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
<li>@ RequestParam注解 &#x2F; 映射<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3de87bcd-ec96-4985-a635-7c4cbc1324a0-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
</ul>
<p>post样式：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8441816a-af26-46a9-878d-e708346510aa-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h4><p>简单：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/715af525-45a1-4b05-a937-309b81d20d09-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>复杂：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/75a9310f-f5b0-4593-8365-caafc84f38d4-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a387e584-0c12-431c-b78c-3113dd483c47-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5bf27d72-3b8d-444c-853d-58559f05975c-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c28937ee-e3a0-43fc-bb96-3f64d76ab2c8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="json参数"><a href="#json参数" class="headerlink" title="json参数"></a>json参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/6a8bafef-4342-4a1e-8d2c-690c186e032c-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e49f8bd9-8def-4b1b-9593-f212676b68c8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ ResponseBody"></a>@ ResponseBody</h4><p>类型：方法注解、类注解。</p>
<p>位置：Controller方法上&#x2F;类上。</p>
<p>作用：将方法返回值直接响应，如果返回值类型是 实体对象&#x2F;集合，将会转换为JSON格式响应。</p>
<p>说明：@ RestController &#x3D; @ Controller + @ ResponseBody</p>
<h4 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建pojo.Result</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">Data</span></span><br><span class="line">@<span class="title class_">NoArgsConstructor</span></span><br><span class="line">@<span class="title class_">AllArgsConstructor</span></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    </span><br><span class="line">    private <span class="title class_">Integer</span> code;<span class="comment">//响应码，200 代表成功; 0 代表失败</span></span><br><span class="line">    private <span class="title class_">String</span> msg; <span class="comment">//响应信息，描述字符串</span></span><br><span class="line">    private <span class="title class_">Object</span> data; <span class="comment">//返回的数据</span></span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Result</span> <span class="title function_">success</span>(<span class="params"></span>)&#123;<span class="comment">//增删改 成功响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Result</span> <span class="title function_">success</span>(<span class="params"><span class="built_in">Object</span> data</span>)&#123;<span class="comment">//查询 成功响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Result</span> <span class="title function_">error</span>(<span class="params"><span class="built_in">String</span> msg</span>)&#123;<span class="comment">//失败响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller应用</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">RequestMapping</span>(<span class="string">&quot;/listAddr&quot;</span>)</span><br><span class="line">public <span class="title class_">Result</span> <span class="title function_">listAddr</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">List</span>&lt;<span class="title class_">Address</span>&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Address</span> addr = <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr.<span class="title function_">setProvince</span>(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">    addr.<span class="title function_">setcity</span>(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Address</span> addr2 = <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr2.<span class="title function_">setProvince</span>(<span class="string">&quot;陝西”);</span></span><br><span class="line"><span class="string">    addr2.setcity(&quot;</span>西安”)</span><br><span class="line">                      </span><br><span class="line">    list.<span class="title function_">add</span>(addr);</span><br><span class="line">    list.<span class="title function_">add</span>(addr2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Result</span>.<span class="title function_">success</span>(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h3><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f759338d-a379-4e43-ada4-d4d09f3fa282-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/901156b2-f7f9-47e3-9f53-a730814a17aa-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h4><p>内聚：软件中各个功能模块内部的功能联系。</p>
<p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p>
<p>软件设计原则：高内聚、低耦合。</p>
<p>控制反转：lnversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部(容器)，这种思想称为控制反转。</p>
<p>依赖注入：Dependency lnjection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p>
<p>Bean对象：IOC容器中创建、管理的对象，称之为bean。</p>
<h4 id="IOC-DI-入门"><a href="#IOC-DI-入门" class="headerlink" title="IOC &amp; DI 入门"></a>IOC &amp; DI 入门</h4><p>@ Component：将当前类交给IOC容器管理，成为IOC容器中的bean。</p>
<p>@ Autowired：运行时，IOC容器会提俱该类型的bean对象，并赋值给该变量 - 依赖注入。</p>
<p>如果想用不同的bean，只需要保留你需要的类的@ Component。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/7701847f-c8cb-4dcd-a3ec-f7c7781f7653-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h4><p>Bean的声明：</p>
<ul>
<li><table>
<thead>
<tr>
<th>注解</th>
<th>声明</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>@ Component</td>
<td>声明bean的基础注解</td>
<td>不属于以下三类时，用此注解</td>
</tr>
<tr>
<td>@ Controller</td>
<td>@ Component的衍生注解</td>
<td>标注在控制器类上</td>
</tr>
<tr>
<td>@ Service</td>
<td>@ Component的衍生注解</td>
<td>标注在业务类上</td>
</tr>
<tr>
<td>@ Repository</td>
<td>@ Component的衍生注解</td>
<td>标注在数据访问类上 (由于与mybatis整合，用的少)</td>
</tr>
</tbody></table>
</li>
<li><p>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</p>
</li>
<li><p>使用以上四个注解都可以声明bean，但是在spring boot集成web开发中，声明控制器bean只能用@ Controller。</p>
</li>
</ul>
<p>Bean组件扫描：</p>
<ul>
<li>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ ComponentScan 扫描。</li>
<li>@ ComponentScan 注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解 @ SpringBootApplication 中，默认扫描的范围是启动类所在包及其子包。</li>
</ul>
<h4 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h4><p>Bean注入：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2ef3236c-8172-4622-b370-acef5b5c3565-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h4><p>添加配制</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/154b72b8-53f1-43a9-a8cb-dfc4ab32f8c3-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>左侧结构（SpringBoot、Maven）</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ef6669ff-be91-4924-9c00-4e96d7f4431a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>数据库</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/52baab48-68af-4a26-9c3c-43eed34436b1-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>配置SQL提示</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/37753771-2a63-4f0d-b083-e21b3f045a59-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line"></span><br><span class="line">spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url = jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = <span class="number">690609</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Userss 变量、构造器、getset方法、toString方法</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">Data</span></span><br><span class="line">@<span class="title class_">NoArgsConstructor</span></span><br><span class="line">@<span class="title class_">AllArgsConstructor</span></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Userss</span> &#123;</span><br><span class="line">    </span><br><span class="line">    private <span class="title class_">String</span> username;<span class="comment">//用户名</span></span><br><span class="line">    private <span class="title class_">String</span> password;<span class="comment">//用户密码    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UserssMapper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> <span class="comment">//在运行时，会自动生成该接口的实现类对象(代理对象)，并且将该对象交给IOC容器管理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserssMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select(&quot;select * from test.userss&quot;)</span> <span class="comment">//查询全部用户信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Userss&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SpringBootMyBatisApplicationTests</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">SpringBootTest</span> <span class="comment">//springboot整合单元测试的注解</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootMyBatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Autowired</span></span><br><span class="line">    private <span class="title class_">UserssMapper</span> userssMapper;</span><br><span class="line">    </span><br><span class="line">    @<span class="title class_">Test</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">testListUserss</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">List</span>&lt;<span class="title class_">Userss</span>&gt; usersslist = userssMapper.<span class="title function_">list</span>();</span><br><span class="line">        usersslist.<span class="title function_">stream</span>().<span class="title function_">forEach</span>(userss -&gt; &#123;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(userss);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="lombok工具包"><a href="#lombok工具包" class="headerlink" title="lombok工具包"></a>lombok工具包</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/db7e5834-d9c0-4b0f-a32d-811d5f1eba93-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定mybatis输出日志的位置，输出控制台</span></span><br><span class="line">mybatis.<span class="property">configuration</span>.<span class="property">log</span>-impl = org.<span class="property">apache</span>.<span class="property">ibatis</span>.<span class="property">logging</span>.<span class="property">stdout</span>.<span class="property">StdOutImpl</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller应用</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">CrossOrigin</span></span><br><span class="line">@<span class="title class_">Slf4</span>j<span class="comment">//日志记录框架注解</span></span><br><span class="line">@<span class="title class_">RestController</span></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">XinxiController</span> &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Autowired</span><span class="comment">//注入</span></span><br><span class="line">    private <span class="title class_">XinxiService</span> xinxiService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//private static Logger log = LoggerFactory.getLogger(XinxiController.class);//日志记录框架</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/studentx&quot;,method = RequestMethod.POST)//指定请求方式为 POST</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//添加信息</span></span><br><span class="line">    @<span class="title class_">PostMapping</span>(<span class="string">&quot;/studentx&quot;</span>)</span><br><span class="line">    public <span class="title class_">Result</span> <span class="title function_">insert</span>(<span class="params">@RequestBody Xinxi xinxi</span>) &#123;</span><br><span class="line">        log.<span class="title function_">info</span>(<span class="string">&quot;添加学生信息&quot;</span>,xinxi);<span class="comment">//日志</span></span><br><span class="line">        <span class="comment">//调用service添加信息</span></span><br><span class="line">        xinxiService.<span class="title function_">insert</span>(xinxi);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Result</span>.<span class="title function_">success</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p>sun公司提供的一套操作关系型数据库的API(规范)。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/7a178f3f-7fa0-4439-bef8-bff5c08faca8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><p>介绍：数据库连接池是个容器，负责分配、管理数据库连接 (Connection)。</p>
<p>优势：资源重用、提升系统响应速度、避免数据库连接遗漏。</p>
<p>标准接口：DataSource；</p>
<p>获取连接：Connection getConnection( ) throws SQLException；</p>
<p>产品：Druid (德鲁伊，阿里)、Hikari (SpringBoot默认)。</p>
<h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>性能更高（SQL语句只需要编译一次，再调用直接在缓存里）。</p>
<p>更安全（防止SQL注入）。</p>
<p>SQL注入：通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法。如：password &#x3D; ‘’or ‘1’&#x3D; ‘1’ ;</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/31de6117-f65b-4b85-925b-90c068fa9734-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符"></a>参数占位符</h4><table>
<thead>
<tr>
<th>#{……}</th>
<th>${……}</th>
</tr>
</thead>
<tbody><tr>
<td>执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值。</td>
<td>拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题。</td>
</tr>
<tr>
<td>使用时机：参数传递，都使用#{…}</td>
<td>使用时机：如果对表名、列表进行动态设置时使用。</td>
</tr>
</tbody></table>
<h4 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h4><p>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</p>
<p>解决方案：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启mybatis的驼峰命名自动映射开关</span></span><br><span class="line">mybatis.configuration.map-underscore-to-camel-<span class="keyword">case</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方案一：给字段起别名，让别名与实体类属性一致</span></span><br><span class="line">	@<span class="title class_">Select</span>(<span class="string">&quot;select id, username, password, name, gender, image, job, entrydate, &quot;</span> + </span><br><span class="line">		<span class="string">&quot;dept_id deptId, create_time createTime, update_time updateTime from emp where id = #&#123;id)&quot;</span>)</span><br><span class="line">	public <span class="title class_">Emp</span> <span class="title function_">getById</span>(<span class="title class_">Integer</span> id);</span><br><span class="line">		</span><br><span class="line"><span class="comment">//方案二:通过@Results，@Result注解手动映射封装</span></span><br><span class="line">    @<span class="title class_">Results</span>(&#123;</span><br><span class="line">        @<span class="title class_">Result</span>(column =<span class="string">&quot;dept_id&quot;</span>, property = <span class="string">&quot;deptId&quot;</span>),</span><br><span class="line">        @<span class="title class_">Result</span>(column=<span class="string">&quot;create_time&quot;</span>, property = <span class="string">&quot;createTime&quot;</span>)</span><br><span class="line">        @<span class="title class_">Result</span>(column =<span class="string">&quot;update_time&quot;</span>, property = <span class="string">&quot;updateTime&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    @<span class="title class_">Select</span>(<span class="string">&quot;select * from emp where id = #&#123;id&#125;&quot;</span>)</span><br><span class="line">    public <span class="title class_">Emp</span> <span class="title function_">getById</span>(<span class="title class_">Integer</span> id);</span><br></pre></td></tr></table></figure></div>

<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>如果mapper接口方法形参只有一个普通类型的参数，# {…}里面的属性名可以随便写，如: # {id}、# {value}。</p>
<p>添加</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"> 	@<span class="title class_">Insert</span>(<span class="string">&quot;insert into student.xinxi(stuname, id, gender, job, phone) values (#&#123;stuname&#125;,#&#123;id&#125;,#&#123;gender&#125;,#		&#123;job&#125;,#&#123;phone&#125;)&quot;</span>)</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span>(<span class="title class_">Xinxi</span> xinxi);</span><br><span class="line"></span><br><span class="line"><span class="comment">//主键返回</span></span><br><span class="line">	@<span class="title class_">Options</span>(keyProperty=<span class="string">&quot;id&quot;</span>,useGeneratedKeys = <span class="literal">true</span>) 会自动将生成的主键值，赋值给emp对象的id属性</span><br></pre></td></tr></table></figure></div>

<p>删除</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Delete</span>(<span class="string">&quot;delete from student.xinxi where id = #&#123;id&#125;&quot;</span>)</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">deleteByid</span>(<span class="title class_">String</span> id);</span><br></pre></td></tr></table></figure></div>

<p>修改</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Update</span>(<span class="string">&quot;update student.xinxi set stuname = #&#123;stuname&#125;,gender = #&#123;gender&#125;,job = #&#123;job&#125;,phone = #&#123;phone&#125; 		where id = #&#123;id&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span>(<span class="title class_">Xinxi</span> xinxi);</span><br></pre></td></tr></table></figure></div>

<p>查询</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询</span></span><br><span class="line">	@<span class="title class_">Select</span>(<span class="string">&quot;select * from student.xinxi where id = #&#123;id&#125;&quot;</span>)</span><br><span class="line">	<span class="title class_">Xinxi</span> <span class="title function_">select</span>(string id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件查询(姓名模糊查询)</span></span><br><span class="line">	@<span class="title class_">Select</span>(<span class="string">&quot;select * from student.xinxi where stuname like concat(&#x27;%&#x27;, #&#123;stuname&#125;, &#x27;%&#x27;) and gender = #				&#123;gender&#125; and id = #&#123;id&#125;&quot;</span>)</span><br><span class="line">	<span class="title class_">List</span>&lt;<span class="title class_">Xinxi</span>&gt; <span class="title function_">selectpro</span>(<span class="title class_">String</span> stuname, <span class="title class_">String</span> gender, <span class="title class_">String</span> id);</span><br></pre></td></tr></table></figure></div>

<h3 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h3><p>使用Mybatis的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/27c9ba2e-f793-4c0d-bb82-f39803c4bc51-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>介绍：随着用户的输入或外部条件的变化而变化的 SQL 语句，我们称为 动态SQL。</p>
<h4 id="sql-与-include"><a href="#sql-与-include" class="headerlink" title="&lt; sql &gt;与&lt; include &gt;"></a>&lt; sql &gt;与&lt; include &gt;</h4><p>&lt; sql &gt;：定义可重用的SQL片段。</p>
<p>&lt; include &gt;：通过属性refid，指定包含的SQL片段。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8fa1aaae-9a3e-4b47-8fba-a5542b952981-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="if-与-where-与-set"><a href="#if-与-where-与-set" class="headerlink" title="&lt; if 与&lt; where &gt;与&lt; set &gt;"></a>&lt; if 与&lt; where &gt;与&lt; set &gt;</h4><p>&lt; if &gt;：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。</p>
<p>&lt; where &gt;：where 元素只会在子元素有内容的情况下才插入where子句。而且会自动去除子句的开头的AND 或OR。</p>
<p>&lt; set &gt;：动态地在行首插入 SET 关键字，并会删掉额外的逗号。 (用在update语句中)。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lrq.mapper.XinxiMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;commonSelect&quot;</span>&gt;</span></span><br><span class="line">        select stuname, id, gender, job, phone</span><br><span class="line">        from student.xinxi</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update student.xinxi</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuname != null&quot;</span>&gt;</span></span><br><span class="line">                stuname = #&#123;stuname&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                gender  = #&#123;gender&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span></span><br><span class="line">                job = #&#123;job&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span></span><br><span class="line">                phone = #&#123;phone&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- resultType: 单条记录所封装的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listpro&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lrq.pojo.Xinxi&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonSelect&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuname != null and stuname != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                stuname like concat(&#x27;%&#x27;, #&#123;stuname&#125;, &#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND gender = #&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null and id != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="foreach"><a href="#foreach" class="headerlink" title="&lt; foreach &gt;"></a>&lt; foreach &gt;</h4><p>collection: 遍历的集合。</p>
<p>item: 遍历出来的元素。</p>
<p>separator: 分隔符。</p>
<p>open: 遍历开始前拼接的SQL片段。</p>
<p>close: 遍历结束后拼接的SQL片段。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testdeletepro</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;string&gt; ids = Arrays.asList(<span class="string">&quot;20221303033&quot;</span>,<span class="string">&quot;20221304044&quot;</span>);</span><br><span class="line">    xinxiMapper.deletepro(ids);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mapper</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deletepro</span><span class="params">(List&lt;String&gt; ids)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//Mapper.xml</span></span><br><span class="line">&lt;delete id=<span class="string">&quot;deletepro&quot;</span>&gt;</span><br><span class="line">    delete</span><br><span class="line">    from student.xinxi</span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach collection=<span class="string">&quot;ids&quot;</span> item=<span class="string">&quot;id&quot;</span> separator=<span class="string">&quot;,&quot;</span> open=<span class="string">&quot;(&quot;</span> close=<span class="string">&quot;)&quot;</span>&gt;</span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">	&lt;/foreach&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/00cc078c-248c-4202-81b7-6df0b22c773d-25143160.jpg"
                      alt="img"
                ></p>
<h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h3 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h3><p>REST (REpresentational State Transfer)，表述性状态转换，它是一种软件架构风格。</p>
<p>REST是风格，是约定方式，约定不是规定，可以打破。</p>
<p>描述模块的功能通常使用复数，也就是加s的格式来描述，表示此类资源，而非单个资源。如：uers、emps、books…</p>
<table>
<thead>
<tr>
<th>URL定位资源HTTP动词描述操作</th>
<th>REST风格</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td><a class="link"   href="http://localhost:8080/users/1" >http://localhost:8080/users/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>GET：查询id为1的用户</td>
<td>@GetMapping</td>
</tr>
<tr>
<td><a class="link"   href="http://localhost:8080/users" >http://localhost:8080/users <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>POST：新增用户</td>
<td>@PostMapping</td>
</tr>
<tr>
<td><a class="link"   href="http://localhost:8080/users" >http://localhost:8080/users <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>PUT：修改用户</td>
<td>@PutMapping</td>
</tr>
<tr>
<td><a class="link"   href="http://localhost:8080/users/1" >http://localhost:8080/users/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>DELETE：删除id为1的用户</td>
<td>@DeleteMapping(</td>
</tr>
</tbody></table>
<h3 id="统一响应结果-1"><a href="#统一响应结果-1" class="headerlink" title="统一响应结果"></a>统一响应结果</h3><p>请求响应 –&gt; 响应 –&gt; 统一响应结果</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建pojo.Result</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">Data</span></span><br><span class="line">@<span class="title class_">NoArgsConstructor</span></span><br><span class="line">@<span class="title class_">AllArgsConstructor</span></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    </span><br><span class="line">    private <span class="title class_">Integer</span> code;<span class="comment">//响应码，200 代表成功; 0 代表失败</span></span><br><span class="line">    private <span class="title class_">String</span> msg; <span class="comment">//响应信息，描述字符串</span></span><br><span class="line">    private <span class="title class_">Object</span> data; <span class="comment">//返回的数据</span></span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Result</span> <span class="title function_">success</span>(<span class="params"></span>)&#123;<span class="comment">//增删改 成功响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Result</span> <span class="title function_">success</span>(<span class="params"><span class="built_in">Object</span> data</span>)&#123;<span class="comment">//查询 成功响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Result</span> <span class="title function_">error</span>(<span class="params"><span class="built_in">String</span> msg</span>)&#123;<span class="comment">//失败响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="日志输出-1"><a href="#日志输出-1" class="headerlink" title="日志输出"></a>日志输出</h3><p>Mybatis –&gt; 入门 –&gt; 日志输出</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller应用</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">CrossOrigin</span></span><br><span class="line">@<span class="title class_">Slf4</span>j<span class="comment">//日志记录框架注解</span></span><br><span class="line">@<span class="title class_">RestController</span></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">XinxiController</span> &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Autowired</span><span class="comment">//注入</span></span><br><span class="line">    private <span class="title class_">XinxiService</span> xinxiService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//private static Logger log = LoggerFactory.getLogger(XinxiController.class);//日志记录框架</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/studentx&quot;,method = RequestMethod.POST)//指定请求方式为 POST</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//添加信息</span></span><br><span class="line">    @<span class="title class_">PostMapping</span>(<span class="string">&quot;/studentx&quot;</span>)</span><br><span class="line">    public <span class="title class_">Result</span> <span class="title function_">insert</span>(<span class="params">@RequestBody Xinxi xinxi</span>) &#123;</span><br><span class="line">        log.<span class="title function_">info</span>(<span class="string">&quot;添加学生信息&quot;</span>,xinxi);<span class="comment">//日志</span></span><br><span class="line">        <span class="comment">//调用service添加信息</span></span><br><span class="line">        xinxiService.<span class="title function_">insert</span>(xinxi);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Result</span>.<span class="title function_">success</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@ RequestMapping"></a>@ RequestMapping</h3><p>请求路径url有相同处，可以简写。</p>
<p>一个完整的请求路径，应该是类上的 @RequestMapping 的value属性+方法上的 @RequestMapping 的value属性。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a7bb151b-1fad-4f0d-a436-2a7c3e10795a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1:起始索引 = (页码-1)*每页展示记录数</span></span><br><span class="line"><span class="comment">// 参数2:查询返回记录数 = 每页展示记录数</span></span><br><span class="line">select * <span class="keyword">from</span> emp limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取总记录数</span></span><br><span class="line">select <span class="title function_">count</span>(*) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求参数默认值</span></span><br><span class="line">@<span class="title class_">RequestParam</span> (defaultValue = <span class="string">&quot;1&quot;</span>) </span><br></pre></td></tr></table></figure></div>

<h3 id="原始方式"><a href="#原始方式" class="headerlink" title="原始方式"></a>原始方式</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建pojo.PageBean</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">Data</span></span><br><span class="line">@<span class="title class_">NoArgsConstructor</span></span><br><span class="line">@<span class="title class_">AllArgsConstructor</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">PageBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="title class_">Long</span> total;<span class="comment">//总记录数</span></span><br><span class="line">    private <span class="title class_">List</span> rows;<span class="comment">//数据列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller应用、分页查询</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> XinxiService xinxiService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/studentfs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">                   <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;分页查询，参数: &#123;&#125;,&#123;&#125;&quot;</span>,page,pageSize);</span><br><span class="line">    <span class="comment">//调用service分页查询</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> xinxiService.page(page,pageSize);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageBean);s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Service impl应用、分页查询</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> XinxiMapper xinxiMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize)</span> &#123;</span><br><span class="line">	<span class="comment">//1. 获取总记录数</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> xinxiMapper.count();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 获取分页查询结果列表</span></span><br><span class="line">	<span class="type">Integer</span> <span class="variable">start</span> <span class="operator">=</span> (page - <span class="number">1</span>) * pageSize;</span><br><span class="line">    List&lt;Xinxi&gt; xinxiList = xinxiMapper.page(start,pageSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3，封装PageBean对象</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(count,xinxiList);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Mapper应用、分页查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询总记录</span></span><br><span class="line"><span class="meta">@Select(&quot;select count(*) from student.xinxi&quot;)</span></span><br><span class="line">Long <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分页 与 每页多少数据</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from student.xinxi limit #&#123;start&#125;,#&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Xinxi&gt; <span class="title function_">page</span><span class="params">(Integer start, Integer pageSize)</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="pagehelper插件"><a href="#pagehelper插件" class="headerlink" title="pagehelper插件"></a>pagehelper插件</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3f7729d5-f9ca-41aa-adb3-84f0057503fa-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="分页条件查询"><a href="#分页条件查询" class="headerlink" title="分页条件查询"></a>分页条件查询</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpController</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/emps&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">                   <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                   String name,Short gender,</span></span><br><span class="line"><span class="params">                   <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin</span></span><br><span class="line"><span class="params">				   <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span> &#123;</span><br><span class="line">	log.info(<span class="string">&quot;分页查询，参数: &#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,page, pageSize, name, gender, begin, end);</span><br><span class="line">    <span class="comment">//调用service分页查询</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> empService.page(page, pageSize, name, ender, begin, end);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpService impl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page,Integer pageSize,String name,Short gender,LocalDate begin,LocalDate end)</span> &#123;</span><br><span class="line">	<span class="comment">//1.设置分页参数</span></span><br><span class="line">	PageHelper.startPage(page,pageSize);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2、执行查询</span></span><br><span class="line">	List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">	Page&lt;Emp&gt; p = (Page&lt;Emp&gt;)empList;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.封装PageBean对象</span></span><br><span class="line">	<span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(p.getTotal(),p.getResult());</span><br><span class="line">	<span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpMapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">//EmpMapper.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">		select * </span><br><span class="line">		from emp</span><br><span class="line">		<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">text</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">				name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">text</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">				and gender = #&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">text</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">            	and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span>    </span><br></pre></td></tr></table></figure></div>

<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8d4c2382-49d4-4cbc-b6d7-1388cf917ace-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="修改前查询回显"><a href="#修改前查询回显" class="headerlink" title="修改前查询回显"></a>修改前查询回显</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d2d6d6c9-47d1-481e-aacd-15554b059f98-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h3><p>是指将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程。</p>
<h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>文件名必须是唯一的，不然后面的文件会覆盖前面的文件。</p>
<p>在SpringBoot中，文件上传，默认单个文件允许最大大小为 1M。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>String   <strong>getOriginalFilename</strong> ( ) ;</td>
<td>获取原始文件名</td>
</tr>
<tr>
<td>void   <strong>transferTo</strong> (File dest) ;</td>
<td>将接收的文件转存到磁盘文件中</td>
</tr>
<tr>
<td>long   <strong>getSize</strong> ( ) ;</td>
<td>获取文件的大小，单位：字节</td>
</tr>
<tr>
<td>byte[ ]   <strong>getBytes</strong> ( ) ;</td>
<td>获取文件内容的字节数组</td>
</tr>
<tr>
<td>InputStream   <strong>getInputStream</strong> ( ) ;</td>
<td>获取接收到的文件内容的输入流</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(String username, Integer age, MultipartFile image)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	log.info(<span class="string">&quot;文件上传:&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,username, age, image);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取原始文件名-1.jPg123.0.0.jPg</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造唯一的文件名(不能重复) - uuid(通用唯一识别码) de49685b-61c0-4b11-80fa-c71e95924018</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">extname</span> <span class="operator">=</span> originalFilename.substring(index);</span><br><span class="line">	<span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().tostring() + extname;</span><br><span class="line">	log.info(<span class="string">&quot;新的文件名:&#123;&#125;&quot;</span>,newFileName);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将文件存储在服务器的磁盘目录中 E:\images</span></span><br><span class="line">	image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\images\\&quot;</span> + newFileName));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> Result.success();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上传大文件，进行如下配置</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置单个文件最大上传大小</span></span><br><span class="line">spring.servlet.multipart.max-file-size = 10MB</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置单个请求最大上传大小(一次请求可以上传多个文件)</span></span><br><span class="line">spring.servlet.multipart.max-request-size = 100MB</span><br></pre></td></tr></table></figure></div>

<h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>注册阿里云(实名认证) –&gt; 开通对象存储服务(oss) –&gt; 创建bucket –&gt; 获取AccessKey (秘钥) 。</p>
<ul>
<li>Bucket：存储空间是用户用于存储对象 (Object，就是文件)的容器，所有的对象都必须隶属于某个存储空间。</li>
<li>创建bucket：必须动 名称、地域、读写权限</li>
</ul>
<h4 id="参照官方SDK编写入门程序"><a href="#参照官方SDK编写入门程序" class="headerlink" title="参照官方SDK编写入门程序"></a>参照官方SDK编写入门程序</h4><p>只需要用的时候复制并修改官方案例。</p>
<ul>
<li>SDK：Sofware Development Kit 的缩写，软件开发工具包，包括辅助软件开发的依赖 (iar包)、代码示例等，都可以叫做SDK。</li>
</ul>
<h4 id="案例集成OSS"><a href="#案例集成OSS" class="headerlink" title="案例集成OSS"></a>案例集成OSS</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建阿里云OSS工具类（utils.AliossUtils）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliossUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>; <span class="comment">//地址</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;LTAI4GCHlvX6DKqJWxd6nEuw&quot;</span>; <span class="comment">//秘钥</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;yBshYweHOpqDuhCArrVHwIiBKpyqSL&quot;</span>; <span class="comment">//秘钥</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;web-tlias&quot;</span>; <span class="comment">//Bucke名称</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="comment">// 获取上传的文件的输入流</span></span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 避免文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() +</span><br><span class="line">        	originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        	</span><br><span class="line">        <span class="comment">//上传文件到 OSS</span></span><br><span class="line">		<span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">		ossClient.putObject(bucketName, fileName, inputStream);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//文件访问路径</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭ossClient</span></span><br><span class="line">		ossClient.shutdown();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//把上传到oss的路径返回</span></span><br><span class="line">		<span class="keyword">return</span> url;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建控制层（UploadController）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOSSUtils aliOSSUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload”)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(MultipartFile image)</span> <span class="keyword">throws</span> lOException &#123;</span><br><span class="line">    	String url= aliOSSUtils.upload(image);<span class="comment">//调用阿里云OSS工具类，将上传上来的文件存入阿里云</span></span><br><span class="line">    	<span class="keyword">return</span> Result.success(url);<span class="comment">//将图片上传完成后的url返回，用于浏览器回显展示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="OSS配置"><a href="#OSS配置" class="headerlink" title="OSS配置"></a>OSS配置</h3><p>@ Value ：通常用于外部配置的属性注入，具体用法为：@Value(“${配置文件中的key}”)</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-07%20220644.jpeg"
                      alt="img"
                ></li>
</ul>
<h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><p>语法：</p>
<ul>
<li>大小写敏感</li>
<li>数值前边必须有空格，作为分隔符</li>
<li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格(idea中会自动将Tab转换为空格)</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
<li>#表示注释，从这个字符一直到行尾，都会被解析器忽略</li>
</ul>
<p>对比：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//XML</span></span><br><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;port&gt;<span class="number">8080</span>&lt;/port&gt;</span><br><span class="line">    &lt;address&gt;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&lt;/address&gt;</span><br><span class="line">&lt;/server&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//properties</span></span><br><span class="line">server.port=<span class="number">8080</span></span><br><span class="line">server.address=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//yml/yaml</span></span><br><span class="line">server:</span><br><span class="line">	port:<span class="number">8080</span></span><br><span class="line">	address:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></div>

<p>数据格式：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象/Map集合:</span></span><br><span class="line">user:</span><br><span class="line">	name:zhangsan</span><br><span class="line">	age:<span class="number">18</span></span><br><span class="line">	password:<span class="number">123456</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">// 数组/List/Set集合:</span></span><br><span class="line">hobby:</span><br><span class="line">	-java</span><br><span class="line">	-game</span><br><span class="line">	-sport</span><br></pre></td></tr></table></figure></div>

<h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ ConfigurationProperties"></a>@ ConfigurationProperties</h3><p>引入 与 案例：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">//pom.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">	<span class="attr">oss:</span></span><br><span class="line">		<span class="attr">endpoint:</span> <span class="string">https://oss-cn-hangzhou.aliyuncs.com</span></span><br><span class="line">		<span class="attr">accessKeyId:</span> <span class="string">LTAI4GCHlvX6DKqJWxd6nEuw</span></span><br><span class="line">		<span class="attr">accessKeySecret:</span> <span class="string">yBshYweHOpqDuhCArrVHwIiBKpyqSL</span></span><br><span class="line">		<span class="attr">bucketName:</span> <span class="string">web-tlias</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建阿里云OSS工具类（utils.AliOSSProperties）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String endpoint; <span class="comment">//地址</span></span><br><span class="line">	<span class="keyword">private</span> String accessKeyId; <span class="comment">//秘钥</span></span><br><span class="line">	<span class="keyword">private</span> String accessKeySecret; <span class="comment">//秘钥</span></span><br><span class="line">	<span class="keyword">private</span> String bucketName; <span class="comment">//Bucke名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建阿里云OSS工具类（utils.AliossUtils）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliossUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> AliOSSProperties aliOSSProperties;	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//获取阿里云OSS参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> aliOSSProperties.getEndpoint; <span class="comment">//地址</span></span><br><span class="line">       	<span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> aliOSSProperties.getAccessKeyId; <span class="comment">//秘钥</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> aliOSSProperties.getAccessKeySecret; <span class="comment">//秘钥</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> aliOSSProperties.getBucketName; <span class="comment">//Bucke名称</span></span><br><span class="line">		<span class="comment">// 获取上传的文件的输入流</span></span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 避免文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() +</span><br><span class="line">        	originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        	</span><br><span class="line">        <span class="comment">//上传文件到 OSS</span></span><br><span class="line">		<span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">		ossClient.putObject(bucketName, fileName, inputStream);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//文件访问路径</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭ossClient</span></span><br><span class="line">		ossClient.shutdown();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//把上传到oss的路径返回</span></span><br><span class="line">		<span class="keyword">return</span> url;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>与@ Value差别：</p>
<p>相同点：</p>
<ul>
<li>都是用来注入外部配置的属性的。</li>
</ul>
<p>不同点：</p>
<ul>
<li>@ Value注解只能一个一个的进行外部属性的注入。</li>
<li>@ ConfigurationProperties可以批量的将外部的属性配置注入到bean对象的属性中。</li>
</ul>
<h2 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h2><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><h4 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h4><p>会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应。</p>
<p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p>
<p>跨域：跨域区分三个维度，即协议、IP&#x2F;域名、端口，只要三个有一个不一样，就是跨域。</p>
<h4 id="会话跟踪方案"><a href="#会话跟踪方案" class="headerlink" title="会话跟踪方案"></a>会话跟踪方案</h4><p>客户端会话跟踪技术：Cookie</p>
<p>存在客户端</p>
<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/97c53656-7555-4f69-aef3-07e37980f1d0-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ff9957b4-e5f1-417e-adc2-adc06f524a36-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<p>服务端会话跟踪技术：Session</p>
<p>存在服务端</p>
<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/16b49e84-8227-4bfc-babd-4cc158ad49a4-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/4b2d2275-e563-429f-98c6-e919324937e1-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<p>JWT令牌技术</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e3f5aa25-d98d-4b5b-8dba-983afed1a1e5-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h3><h4 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h4><p>header、payload用的是 Base64编码，Signature不是。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2242d46a-7383-4cbf-8d97-debb4c3c9b16-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>JWT校验时使用的签名秘钥，必须和生成IWT令牌时使用的秘钥是配套的。</p>
<p>如果JWT令牌解析校验时报错，则说明JWT令牌被篡改 或 失效了，令牌非法。</p>
<h4 id="应用场景：登录认证"><a href="#应用场景：登录认证" class="headerlink" title="应用场景：登录认证"></a>应用场景：登录认证</h4><p>1、登录成功后，生成令牌</p>
<p>2、将令牌存储到客户端（不一定存在Cookie中）</p>
<p>3、后续每个请求，都要携带JWT令牌，系统在每次请求处理之前，先校验令牌，通过后，再处理</p>
<h4 id="快速入门-3"><a href="#快速入门-3" class="headerlink" title="快速入门"></a>快速入门</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pom.xml</span></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupld&gt;io.jsonwebtoken&lt;/groupld&gt;</span><br><span class="line">    &lt;artifactld&gt;jjwt&lt;/artifactld&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.9</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生成JWT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenJwt</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    claims.put(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    claims.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lrq&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            .signWith(SignatureAlgorithm.HS256,<span class="string">&quot;lrq&quot;</span>)<span class="comment">//签名算法</span></span><br><span class="line">            .setClaims(claims)<span class="comment">//自定义内容(载荷)</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">3600</span> * <span class="number">1000</span>))<span class="comment">//设置有效期为1小时</span></span><br><span class="line">            .compact();</span><br><span class="line"></span><br><span class="line">    System.out.println(jwt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析JWT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParseJwt</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">            .setSigningKey(<span class="string">&quot;lrq&quot;</span>)</span><br><span class="line">            .parseClaimsJws(jwt)</span><br><span class="line">            .getBody();</span><br><span class="line">            </span><br><span class="line">    System.out.println(claims);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建JWT工具类(utils.JWTUtils)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signKey</span> <span class="operator">=</span> <span class="string">&quot;lrq&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Long</span> <span class="variable">expire</span> <span class="operator">=</span><span class="number">43200000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成Jwt</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateJwt</span><span class="params">(Map&lt;String,Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .addClaims(claims)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,signKey)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expire))</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> jwt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析Jwt</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJwt</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(signKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建控制层(LoginController)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Login login)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户登录：&#123;&#125;&quot;</span>,login);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Login</span> <span class="variable">log</span> <span class="operator">=</span> loginService.login(login);</span><br><span class="line">        <span class="keyword">if</span>(log != <span class="literal">null</span>)&#123; <span class="comment">//用户名密码正确</span></span><br><span class="line">            Map&lt;String,Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            claims.put(<span class="string">&quot;username&quot;</span>,log.getUsername());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成JWT令牌</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtils.generateJwt(claims);</span><br><span class="line">            <span class="keyword">return</span> Result.success(jwt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;用户名或用户密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h3><h4 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h4><p>Filter 过滤器，是JavaWeb 三大组件(Servlet、Filter、Listener)之一。</p>
<p>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。</p>
<p>过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等。</p>
<h4 id="快速入门-4"><a href="#快速入门-4" class="headerlink" title="快速入门"></a>快速入门</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f11fd6f1-007b-43fe-bd01-589fbb01e05e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>请求 –&gt; 放行前逻辑 –&gt; 放行 –&gt; 获取web资源 –&gt; 放行后逻辑</p>
<p>放行后访问对应资源，资源访问完成后，还会回到Filter中。</p>
<p>如果回到Filter中，是执行放行后的逻辑。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/4c69af2c-8925-4f4a-9b3e-46a96d8f5e7a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/7ad02009-9324-49cf-b434-3072f7c3af49-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><p>一个web应用中，可以配置多个过滤器，这多个过滤器就形成了一个过滤器链。</p>
<p>注解配置的Filter，优先级是按照过滤器类名 (字符串) 的自然排序。</p>
<h4 id="登录校验Filter"><a href="#登录校验Filter" class="headerlink" title="登录校验Filter"></a>登录校验Filter</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/837b124c-7f82-4d8b-a89b-10ca82a87347-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">//pom.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建过滤器(filter.LoginCheckFilter)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ...&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">HttpServletRequest</span> <span class="variable">reg</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">		<span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServetResponse) response;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//流程步骤</span></span><br><span class="line">		<span class="comment">//1.获取请求url</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURL().toString();</span><br><span class="line">		log.info(<span class="string">&quot;请求的url:&#123;&#125;&quot;</span>,url);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.判断请求ur1中是否包含1ogin，如果包含，说明是登录操作，放行</span></span><br><span class="line">		<span class="keyword">if</span>(url.contains(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">			log.info(<span class="string">&quot;登录操作，放行...&quot;</span>);</span><br><span class="line">			chain.doFilter(request,response);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.获取请求头中的令牌(token)</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4.判断令牌是否存在、如果不存在、返回错误结果(未登录)</span></span><br><span class="line">		<span class="keyword">if</span>(!StringUtils.hasLength(jwt))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求头token为空,返回未登录的信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//手动转换 对象--json ----&gt; 阿里巴巴 fastJSON</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            resp.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//5.解析token，如果解析失败，返回错误结果(未登录)</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">         	JwtUtils.parseJWT(jwt);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">//jwt解折失败</span></span><br><span class="line">         	e.printStackTrace();</span><br><span class="line">         	log.info(<span class="string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);</span><br><span class="line">         	<span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">         	<span class="comment">//手动转换 对象--json ----&gt; 阿里巴巴 fastJSON</span></span><br><span class="line">         	<span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">         	resp.getwriter().write(notLogin);</span><br><span class="line">         	<span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//6.放行。</span></span><br><span class="line">		log.info(<span class="string">&quot;令牌合法，放行&quot;</span>);</span><br><span class="line">		chain.doFilter(request,response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h3><h4 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h4><p>是一种动态拦截方法调用的机制，类似于过滤器。Spring框架中提供的，用来动态拦截控制器方法的执行。</p>
<p>作用是拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码。</p>
<h4 id="快速入门-5"><a href="#快速入门-5" class="headerlink" title="快速入门"></a>快速入门</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c174b4f1-66ec-47ce-893d-ab0a0bb1d7df-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/6b6ca0d3-2479-46d2-ad3e-1bf4ddf604af-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="拦截路径-1"><a href="#拦截路径-1" class="headerlink" title="拦截路径"></a>拦截路径</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e20dd429-edd4-4b7c-bb1a-7b60fe33f968-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="登录校验Interceptor"><a href="#登录校验Interceptor" class="headerlink" title="登录校验Interceptor"></a>登录校验Interceptor</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/37844238-5a37-4169-a9dc-8bf20c4ada65-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建拦截器(config.WebConfig)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckinterceptor loginCheckinterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginCheckinterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建拦截器(interceptor.LoginCheckinterceptor)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckinterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//目标资源方法运行前运行，返回 true:放行，返回false:不放行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取请求 url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line">        log.info(<span class="string">&quot;请求的url&quot;</span>,url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断请求 url 中是否包含 login，如果包含，说明是登录操作，放行</span></span><br><span class="line">        <span class="keyword">if</span>(url.contains(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;登录操作，放行...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取请求头中的令牌(token)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断令牌是否存在，如果不存在，返回错误结果(未登录)</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasLength(jwt))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求头token为空,返回未登录的信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//手动转换对象--json-&gt;阿里巴巴fastJSON</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            response.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.解析token，如果解析失败，返回错误结果(未登录)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJwt(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;<span class="comment">//jwt解折失败</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.info(<span class="string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span>Result.error(<span class="string">&quot;NOT LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//手动转换对象--json -----&gt;阿里巴巴fastJSON</span></span><br><span class="line">            String notLogin=JSONObject.toJSONString(error);</span><br><span class="line">            response.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        log.info(<span class="string">&quot;令牌合法，放行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Filter-与-Interceptor-区别"><a href="#Filter-与-Interceptor-区别" class="headerlink" title="Filter 与 Interceptor 区别"></a>Filter 与 Interceptor 区别</h3><p>接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandlerInterceptor接口。</p>
<p>拦截范围不同：过滤器Filter会拦截所有的资源，而拦截器Interceptor只会拦截Spring环境中的资源。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建全局异常处理器(exception.GlobalExceptionHandler)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局异常处理</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//捕获所有异常</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ex</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;对不起,操作失败,请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><h3 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h3><p>事务 是一组操作的集合，它是一个不可分割的工作单位，这些操作 要么同时成功，要么同时失败。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>开启事务(一组操作开始前，开启事务) : start transaction &#x2F; begin ;</p>
<p>提交事务(这组操作全部成功后，提交事务) : commit ;</p>
<p>回滚事务(中间任何一个操作出现异常，回滚事务) : rollback ;</p>
<h3 id="开启事务管理日志"><a href="#开启事务管理日志" class="headerlink" title="开启事务管理日志"></a>开启事务管理日志</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">	<span class="attr">level:</span></span><br><span class="line">		<span class="string">org.springframework.jdbc.support,jdbcTransactionManager:debug</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@ Transactional"></a>@ Transactional</h3><p>位置：业务(service)层的方法上、类上、接口上。</p>
<p>作用：将当前方法交给spring进行事务管理，方法执行前，开启事务; 成功执行完毕，提交事务; 出现异常，回滚事务。</p>
<h3 id="rollbackFor属性"><a href="#rollbackFor属性" class="headerlink" title="rollbackFor属性"></a>rollbackFor属性</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/77f4b662-6bc2-48d5-b2df-0987bacac987-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="propagation属性"><a href="#propagation属性" class="headerlink" title="propagation属性"></a>propagation属性</h3><p>REQUIRED：大部分情况下都是用该传播行为即可。</p>
<p>REOUIRES_NEW：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与<br>否，都需要保证日志记录能够记录成功。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/41d20ee0-7fe4-45b6-8d78-ae3bcb108af1-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h3><p>Aspect Oriented Programming ( 面向切面编程、面向方面编程 ) 其实就是面向特定方法编程。</p>
<p>动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程。</p>
<h3 id="快速入门-6"><a href="#快速入门-6" class="headerlink" title="快速入门"></a>快速入门</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a8e479c5-7b93-41f6-bffe-65a72147e5df-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a08e9362-76cc-4a5e-8d09-6c592934cf4d-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="执行流程-2"><a href="#执行流程-2" class="headerlink" title="执行流程"></a>执行流程</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/0d436b6b-ccfa-4cd9-9213-a3a3d11227c7-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@ Pointcut"></a>@ Pointcut</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ad1b5667-35d8-4448-9fb1-87baee1ef9f9-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><p>@ Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行。</p>
<p>@ Before：前置通知，此注解标注的通知方法在目标方法前被执行。</p>
<p>@ After：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行。</p>
<p>@ AfterReturning：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行。</p>
<p>@ AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行。</p>
<ul>
<li><p>@ Around环绕通知需要自己调用 ProceedingJoinPoint.proceed ( ) 来让原始方法执行，其他通知不需要考虑目标方法执行。</p>
</li>
<li><p>@ Around环绕通知方法的返回值，必须指定为0bject，来接收原始方法的返回值。</p>
</li>
</ul>
<h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/0b4e648a-6e1b-4288-b39c-45fc6f71c202-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>介绍：描述切入点方法的一种表达式。</p>
<p>作用：主要用来决定项目中的哪些方法需要加入通知。</p>
<p>常见形式：</p>
<ul>
<li>execution (……)：根据方法的签名来匹配。</li>
<li>@ annotation (……)：根据注解匹配。</li>
</ul>
<h3 id="切入点表达式-execution"><a href="#切入点表达式-execution" class="headerlink" title="切入点表达式-execution"></a>切入点表达式-execution</h3><p>语法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/16e2c4d8-a11d-42db-8448-f7386e5b55ac-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>使用：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e7527c65-156b-4dd4-849c-49c0438925de-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="切入点表达式-annotation"><a href="#切入点表达式-annotation" class="headerlink" title="切入点表达式-@ annotation"></a>切入点表达式-@ annotation</h3><p>语法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建(aop.MyLog)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy .RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType .METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下的Serviceimpl使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XinxiServiceimpl</span> <span class="keyword">implements</span> <span class="title class_">XinxiService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line">    <span class="keyword">private</span> XinxiMapper xinxiMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@MyLog</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//添加信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Xinxi xinxi)</span> &#123;</span><br><span class="line">        xinxiMapper.insert(xinxi);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@MyLog</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//显示全部信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Xinxi&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xinxiMapper.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d186cba8-aad2-41ad-bda3-2c108355ca5e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f0f67219-cf6b-4bb9-90df-80170591e8c6-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/46dd89c7-d565-4ad6-bb9e-c30e2929b057-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/504ca202-32e5-4a91-afeb-d049d211e54f-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/4c42eab8-71a9-402d-bbfa-d8653da55b54-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/99260fd9-71bd-4acb-adfe-8e2d331bfa8a-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h2 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h2><h3 id="bean的获取"><a href="#bean的获取" class="headerlink" title="bean的获取"></a>bean的获取</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/71b7a89b-cbea-494b-a644-2bef5e091f13-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/31765a9f-eb09-47e5-b9e6-97ea7c19c444-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f177cc0e-7322-410e-b421-67b39498d848-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h3 id="第三方bean"><a href="#第三方bean" class="headerlink" title="第三方bean"></a>第三方bean</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/62f714d4-aea6-47d4-bf07-8947fa351f5a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="SpringBoot原理"><a href="#SpringBoot原理" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h2><h3 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9dd9ac26-c393-4b80-9f37-da04b0eac02e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><h4 id="介绍-20"><a href="#介绍-20" class="headerlink" title="介绍"></a>介绍</h4><p>SpringBoot的自动配置就是当spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>启动类：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ba053a17-eccd-4c67-9be2-534e92b4e7f9-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>启动类：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2d32d3f9-1ee2-41b2-889d-0b28d1f18302-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>源码跟踪：</p>
<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ff098535-37bc-4dd2-829f-f9b4690d386b-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/feb7c20d-0e97-49c7-9e02-f7e71ff63a97-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<p>@ conditional：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/81e5d8cd-5ea3-4dfb-a65c-6b2f1c0ee6ef-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h3><p>在实际开发中，经常会定义一些公共组件，提供给各个项目团队使用。而在SpringBoot的项目中，一般会将这些公共组件封装为SpringBoot 的 starter。</p>
<p>SpringBoot官方的starter以spring-boot开头，其它技术提供的starter以功能开头。</p>
]]></content>
      <categories>
        <category>Web</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
</search>
