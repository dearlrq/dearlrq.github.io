<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git使用</title>
    <url>/2024/07/05/Git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-版本控制系统概述"><a href="#1-版本控制系统概述" class="headerlink" title="1- 版本控制系统概述"></a>1- 版本控制系统概述</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1-1 基本概念"></a>1-1 基本概念</h2><p>​		版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记<br>录，备份以便恢复以前的版本的软件工程技术。</p>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<p>简单说就是用于管理多人协同开发项目的技术。</p>
<p>​		没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
<p>​		有了版本控制系统以后，就可以方便记录每次修改的版本了，类似于以下效果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705195350325.png"
                      alt="image-20240705195350325"
                ></p>
<p>​		主流的版本控制器有如下这些：</p>
<ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong>（Subversion）</li>
<li><strong>CVS</strong>（Concurrent Versions System）</li>
<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>
<li><strong>TFS</strong> （Team Foundation Server）</li>
<li><strong>Visual Studio Online</strong></li>
</ul>
<p>版本控制产品非常的多，现在影响力最大且使用最广泛的是 Git与SVN。</p>
<h2 id="1-2-版本控制分类"><a href="#1-2-版本控制分类" class="headerlink" title="1-2 版本控制分类"></a>1-2 版本控制分类</h2><h3 id="1-2-1-集中式"><a href="#1-2-1-集中式" class="headerlink" title="1-2-1 集中式"></a>1-2-1 集中式</h3><p>集中式版本控制系统，版本库是集中存放在中央服务器的，团队成员需要先从中央服务器取得最新的版本，再将变动推送给中央服务器。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705200131154.png"
                      alt="image-20240705200131154"
                ></p>
<p>集中式版本控制系统主要问题在于中央服务器的故障。如果服务器宕机，那么谁都无法提交更新，也就无法协同工作，代表产品：SVN、<br>CVS、VSS。</p>
<h3 id="1-2-2-分布式"><a href="#1-2-2-分布式" class="headerlink" title="1-2-2 分布式"></a>1-2-2 分布式</h3><p>分布式版本控制系统没有 ”中央服务器“，每个人的电脑上都是一个完整的版本库，这样任何一处协同工作用的文件发生故障，事后都可以<br>用其他客户端的本地仓库进行恢复，分布式的版本控制系统出现之后，解决了集中式版本控制系统的缺陷：</p>
<ul>
<li>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</li>
<li>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705200545377.png"
                      alt="image-20240705200545377"
                ></p>
<h3 id="1-2-3-Git与SVN最主要区别"><a href="#1-2-3-Git与SVN最主要区别" class="headerlink" title="1-2-3 Git与SVN最主要区别"></a>1-2-3 Git与SVN最主要区别</h3><p>SVN是集中式版本控制系统，版本库是集中在中央服务器中，Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的<br>版本库。</p>
<p>Git是目前世界上最先进的分布式版本控制系统，Git是免费、开源的。</p>
<h2 id="1-3-远程仓库"><a href="#1-3-远程仓库" class="headerlink" title="1-3 远程仓库"></a>1-3 远程仓库</h2><p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上，但开发参与者必须在同一个网络中，且必须有一个项目的原始版本，通常的办法是让一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个 “服务器” 仓库克隆一份到自己的电脑上，并且名自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。完全可以自己搭建一台运行Git服务器但现在更适合的做法是使用免费的托管平台。</p>
<p>同时相较于传统的代码都是管理到本机或者内网。一旦本机或者内网机器出问题，代码可能会丢失，使用远端代码仓库将永远存在一个备份。同时也免去了搭建本地代码版本控制服务的繁琐。云计算时代Git以其强大的分支和克隆功能，更加方便了开发者远程协作。</p>
<p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。</p>
<p>企业内部可以使用GitLab搭建远程仓库，也可以使用公网上开放的远程仓库，如：GitHub，Gitee（码云），阿里云效中的CodeUp。</p>
<h2 id="1-4-工作机制"><a href="#1-4-工作机制" class="headerlink" title="1-4 工作机制"></a>1-4 工作机制</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705201619865.png"
                      alt="image-20240705201619865"
                ></p>
<h2 id="1-5-团队协作建议"><a href="#1-5-团队协作建议" class="headerlink" title="1-5 团队协作建议"></a>1-5 团队协作建议</h2><p>1.组长在本地设计项目结构，并推送到远程仓库。</p>
<p>2.组员将远程仓库克隆到本地。</p>
<p>3.组员在本地创建分支进行协作开发，分支可以以组员名称命名。</p>
<p>4.组员将自己的分支推送到远程仓库。</p>
<p>5.当代码确认没有问题后，告诉组长，组长进行分支合并。</p>
<h1 id="2-基础使用"><a href="#2-基础使用" class="headerlink" title="2- 基础使用"></a>2- 基础使用</h1><h2 id="2-1-基本配置"><a href="#2-1-基本配置" class="headerlink" title="2-1 基本配置"></a>2-1 基本配置</h2><p>-&#x2F;.gitconfig文件保存了本用户的所有仓库的配置，可以通过命令：git config -global来设置。</p>
<p>Git仓库在进行commit时，必须进行签名。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#x27;username&#x27;</span><br><span class="line">git config --global user.email &#x27;emai1@163.com&#x27;</span><br></pre></td></tr></table></figure></div>

<p>签名用于区分不同操作者身份，在提交信息中可以查看用户的签名，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名<br>否则无法提交代码。</p>
<p>注意，此处设置的用户签名和远端代码托管中心的账号没有任何关系!</p>
<h2 id="2-2-常用操作"><a href="#2-2-常用操作" class="headerlink" title="2-2 常用操作"></a>2-2 常用操作</h2><h3 id="2-2-1-初始化本地仓库"><a href="#2-2-1-初始化本地仓库" class="headerlink" title="2-2-1 初始化本地仓库"></a>2-2-1 初始化本地仓库</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line">Initialized empty Git repository in C:/xx/.git/</span><br></pre></td></tr></table></figure></div>

<p>会在当前目录中自动创建 .git目录，此目录用于Git跟踪管理版本库。</p>
<h3 id="2-2-2-查看本地库状态"><a href="#2-2-2-查看本地库状态" class="headerlink" title="2-2-2 查看本地库状态"></a>2-2-2 查看本地库状态</h3><p>无文件时：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">No commits yet</span><br><span class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure></div>

<p>新增文件后：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> hello.txt <span class="comment"># 生成hello.txt文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">No commits yet</span><br><span class="line">Untracked files:</span><br><span class="line">	(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">		hello.txt</span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-3-添加文件至暂存区"><a href="#2-2-3-添加文件至暂存区" class="headerlink" title="2-2-3 添加文件至暂存区"></a>2-2-3 添加文件至暂存区</h3><p>命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure></div>

<p>添加 hello.txt 至暂存区</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br></pre></td></tr></table></figure></div>

<p>查看状态</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">No commits yet</span><br><span class="line">Changes to be committed:</span><br><span class="line">	(use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">		new file:      hello.txt</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-4-提交至本地库"><a href="#2-2-4-提交至本地库" class="headerlink" title="2-2-4 提交至本地库"></a>2-2-4 提交至本地库</h3><p>命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;日志信息&quot;</span><br></pre></td></tr></table></figure></div>

<p>提交 hello.txt 到本地库</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;测试&quot;</span></span></span><br><span class="line">[master (root-commit) 5e97c57] 测试</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 hello.txt</span><br></pre></td></tr></table></figure></div>

<p>查看状态</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-5-提交修改"><a href="#2-2-5-提交修改" class="headerlink" title="2-2-5 提交修改"></a>2-2-5 提交修改</h3><p>修改 hello.txt 后，再次查看状态</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">	(use &quot;git add &lt;file&gt;...&quot; to update what wi7l be committed)</span><br><span class="line">	(use &quot;git restore &lt;file&gt;...to discard changes in working directory)</span><br><span class="line">		modified:  hello.txt</span><br><span class="line">		</span><br><span class="line">no changes added to commit(use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></div>

<p>重新添加至暂存区</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">	(use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">		modified:   hello.txt</span><br></pre></td></tr></table></figure></div>

<p>再次提交</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;修改了hello.txt&quot;</span></span></span><br><span class="line">[master 575cf6c] 修改了he11o.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-6-撤销修改"><a href="#2-2-6-撤销修改" class="headerlink" title="2-2-6 撤销修改"></a>2-2-6 撤销修改</h3><p>命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -- fi1e</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以丢弃工作区的修改</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -- hello.txt</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>当文件自修改后还没有被放到暂存区（add）时，撤销修改就回到和版本库一模一样的状态（最后一次提交的状态）</li>
<li>当文件已经添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态</li>
</ul>
<h3 id="2-2-7-版本穿梭"><a href="#2-2-7-版本穿梭" class="headerlink" title="2-2-7 版本穿梭"></a>2-2-7 版本穿梭</h3><p>命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure></div>

<p>可以通过 git reflog 查看版本信息</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">575cf6c(HEAD -&gt; master) HEAD@&#123;0&#125;: commit: 修改了hello.txt</span><br><span class="line">5e97c57 HEAD@&#123;1&#125;: commit (initia1): 测试</span><br></pre></td></tr></table></figure></div>

<p>切换到 5e97c57 版本</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard 5e97c57</span></span><br><span class="line">HEAD is now at 5e97c57 测试</span><br></pre></td></tr></table></figure></div>

<h2 id="2-3-分支操作"><a href="#2-3-分支操作" class="headerlink" title="2-3 分支操作"></a>2-3 分支操作</h2><h3 id="2-3-1-基本概念"><a href="#2-3-1-基本概念" class="headerlink" title="2-3-1 基本概念"></a>2-3-1 基本概念</h3><p>假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p>
<p>这时可以创建一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p>
<p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。</p>
<p>每次提交时，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。同时会有一个HEAD指针指向当前分支，而master指向最新的提交。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705213054229.png"
                      alt="image-20240705213054229"
                ></p>
<p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master 分支的线也越来越长。</p>
<p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705213304208.png"
                      alt="image-20240705213304208"
                ></p>
<p>从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master 指针不变：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705213726071.png"
                      alt="image-20240705213726071"
                ></p>
<p>假如我们在 dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705213916587.png"
                      alt="image-20240705213916587"
                ></p>
<p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705214038216.png"
                      alt="image-20240705214038216"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705214318310.png"
                      alt="image-20240705214318310"
                ></p>
<h3 id="2-3-2-查看分支"><a href="#2-3-2-查看分支" class="headerlink" title="2-3-2 查看分支"></a>2-3-2 查看分支</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">* master 5e97c57 测试</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-3-创建分支"><a href="#2-3-3-创建分支" class="headerlink" title="2-3-3 创建分支"></a>2-3-3 创建分支</h3><p>*表示目前所在的分支</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">  dev    5e97c57 测试</span><br><span class="line">* master 5e97c57 测试</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-4-切换分支"><a href="#2-3-4-切换分支" class="headerlink" title="2-3-4 切换分支"></a>2-3-4 切换分支</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">* dev    5e97c57 测试</span><br><span class="line">  master 5e97c57 测试</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-5-合并分支"><a href="#2-3-5-合并分支" class="headerlink" title="2-3-5 合并分支"></a>2-3-5 合并分支</h3><p>在dev分支上修改hello.txt文件，添加内容</p>
<p>添加至暂存区，并提交至本地版本库</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;dev commit&quot;</span></span></span><br></pre></td></tr></table></figure></div>

<p>切换至master分支，在master分支上合并dev分支</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt <span class="comment"># 没有dev分支的内容</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行合井</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge dev</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt <span class="comment"># 此时可以看到dev分支修改的内容</span></span></span><br></pre></td></tr></table></figure></div>

<p>如果在dev分支上修改时，master分支也修改（两个分支修改的不是同一个文件）。当分支合并时，切换到master分支，合并dev分支。</p>
<h3 id="2-3-6-删除分支"><a href="#2-3-6-删除分支" class="headerlink" title="2-3-6 删除分支"></a>2-3-6 删除分支</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d dev</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除dev分支</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-7-合并冲突并解决"><a href="#2-3-7-合并冲突并解决" class="headerlink" title="2-3-7 合并冲突并解决"></a>2-3-7 合并冲突并解决</h3><ul>
<li>冲突</li>
</ul>
<p>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git 无法替我们决定使用哪一个。必须人为决定新代码内容。</p>
<p>在master分支上修改hello.txt文件并提交至版本库</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev add content</span><br><span class="line">master 添加内容</span><br></pre></td></tr></table></figure></div>

<p>在dev分支上修改hello.txt文件并提交至版本库</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev add content dev添加内容</span><br></pre></td></tr></table></figure></div>

<p>切换回master分支，将dev分支内容合并至master分支，发现合并失败，此时需要手动解决冲突</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge dev</span></span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT(content): Merge conflict in hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure></div>

<p>此时hello.txt文件代码格式</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">当前分支的代码</span><br><span class="line">=======</span><br><span class="line">合并过来的代码</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br></pre></td></tr></table></figure></div>

<ul>
<li>解决</li>
</ul>
<p>编辑有冲突的文件，删除特殊符号，决定要使用的内容，决定保留当前分支的内容。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev add content</span><br><span class="line">master 添加内容</span><br></pre></td></tr></table></figure></div>

<p>添加并提交修改后的文件，注意此步骤非常重要，需要将修改后的内容进行提交！</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;冲突解决&quot;</span></span></span><br></pre></td></tr></table></figure></div>

<h2 id="2-4-分支管理策略"><a href="#2-4-分支管理策略" class="headerlink" title="2-4 分支管理策略"></a>2-4 分支管理策略</h2><h3 id="2-4-1-禁用-Fast-forward"><a href="#2-4-1-禁用-Fast-forward" class="headerlink" title="2-4-1 禁用 Fast forward"></a>2-4-1 禁用 Fast forward</h3><p>通常，合并分支时，如果可能，Git会用Fast forward模式（既直接移动指针），但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>注意：如果分叉后，master和dev均产生了新的提交，则无法适用于Fast forward模式，此时分为两种情况：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240706212139437.png"
                      alt="image-20240706212139437"
                ></p>
<p>如果要强制禁用Fast forward模式，Git则会在merge时自动生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>下面我们实战一下：–no-ff 方式的 git merge：</p>
<p>首先，仍然创建并切换dev分支：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout dev</span></span><br></pre></td></tr></table></figure></div>

<p>修改文件，并提交一个新的commit：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add merge.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;add merge&quot;</span></span></span><br></pre></td></tr></table></figure></div>

<p>现在，我们切换回master：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br></pre></td></tr></table></figure></div>

<p>准备合并dev分支，请注意–no-ff参数，表示禁用Fast forward：</p>
<p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-4-2-分支策略"><a href="#2-4-2-分支策略" class="headerlink" title="2-4-2 分支策略"></a>2-4-2 分支策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理:</p>
<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往 dev分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240706214724254.png"
                      alt="image-20240706214724254"
                ></p>
<h1 id="3-idea的Git操作"><a href="#3-idea的Git操作" class="headerlink" title="3- idea的Git操作"></a>3- idea的Git操作</h1><h2 id="3-1-初始化仓库"><a href="#3-1-初始化仓库" class="headerlink" title="3-1 初始化仓库"></a>3-1 初始化仓库</h2><ul>
<li>相当于 git init</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240706215451156.png"
                      alt="image-20240706215451156"
                ></p>
<ul>
<li>此时左下角是Git（可以看到所有操作状态），右下角显示是master分支。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240706215700028.png"
                      alt="image-20240706215700028"
                ></p>
<h2 id="3-2-添加到暂存区"><a href="#3-2-添加到暂存区" class="headerlink" title="3-2 添加到暂存区"></a>3-2 添加到暂存区</h2><ul>
<li>相当于 git add 文件名，一次全部添加。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240706220203973.png"
                      alt="image-20240706220203973"
                ></p>
<h2 id="3-3-提交到本地库"><a href="#3-3-提交到本地库" class="headerlink" title="3-3 提交到本地库"></a>3-3 提交到本地库</h2><ul>
<li>相当于 git commit -m “日志信息”，一次全部提交。</li>
<li>三处是提交，一处是日志信息。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-07%20120835.png"
                      alt="屏幕截图 2024-07-07 120835"
                ></p>
<h2 id="3-4-提交修改"><a href="#3-4-提交修改" class="headerlink" title="3-4 提交修改"></a>3-4 提交修改</h2><ul>
<li>和上面两个步骤一样。</li>
</ul>
<h2 id="3-5-推送到远端仓库"><a href="#3-5-推送到远端仓库" class="headerlink" title="3-5 推送到远端仓库"></a>3-5 推送到远端仓库</h2><ul>
<li>远端创建仓库，得到远端的URL（http）。</li>
<li>将远端的URL添加到管理远程的URL里面。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240706221905074.png"
                      alt="image-20240706221905074"
                ></p>
<ul>
<li>有三处推送</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-07%20121342.png"
                      alt="屏幕截图 2024-07-07 121342"
                ></p>
<h2 id="3-6-当远端修改后的本地更新"><a href="#3-6-当远端修改后的本地更新" class="headerlink" title="3-6 当远端修改后的本地更新"></a>3-6 当远端修改后的本地更新</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240707122436361.png"
                      alt="image-20240707122436361"
                ></p>
<h2 id="3-7-新建分支"><a href="#3-7-新建分支" class="headerlink" title="3-7 新建分支"></a>3-7 新建分支</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240707122847774.png"
                      alt="image-20240707122847774"
                ></p>
<h2 id="3-8-切换分支"><a href="#3-8-切换分支" class="headerlink" title="3-8 切换分支"></a>3-8 切换分支</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240707123218612.png"
                      alt="image-20240707123218612"
                ></p>
<h2 id="3-9-将分支推送到远端"><a href="#3-9-将分支推送到远端" class="headerlink" title="3-9 将分支推送到远端"></a>3-9 将分支推送到远端</h2><ul>
<li>切换到想要的分支</li>
<li>然后和上面的推送到远端仓库操作一样</li>
<li>推送后的远端仓库</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240707123918738.png"
                      alt="image-20240707123918738"
                ></p>
<h2 id="3-10-合并不同的分支"><a href="#3-10-合并不同的分支" class="headerlink" title="3-10 合并不同的分支"></a>3-10 合并不同的分支</h2><ul>
<li>先点击Git，点击合并</li>
<li>这可以在不同的分支，合并不同的分支</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240707125343485.png"
                      alt="image-20240707125343485"
                ></p>
<h2 id="3-11-删除分支"><a href="#3-11-删除分支" class="headerlink" title="3-11 删除分支"></a>3-11 删除分支</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240707161737053.png"
                      alt="image-20240707161737053"
                ></p>
<h1 id="4-vscode的Git操作"><a href="#4-vscode的Git操作" class="headerlink" title="4- vscode的Git操作"></a>4- vscode的Git操作</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240707161459302.png"
                      alt="image-20240707161459302"
                ></p>
]]></content>
      <categories>
        <category>其他</category>
        <category>Git使用</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2024/04/07/Python/</url>
    <content><![CDATA[<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1- 基础"></a>1- 基础</h1><h2 id="1-1-注释"><a href="#1-1-注释" class="headerlink" title="1-1 注释"></a>1-1 注释</h2><p>单行注释：</p>
<ul>
<li># 注释内容</li>
</ul>
<p>多行注释：</p>
<ul>
<li>“” “注释内容” “”</li>
</ul>
<h2 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1-2 变量"></a>1-2 变量</h2><p>组成：</p>
<ul>
<li>标识（id）类型（type）值（print）</li>
</ul>
<p>注意：</p>
<ul>
<li>当多次赋值之后，变量名会指向新的空间。</li>
<li>变量没有类型，但变量存储的数据有类型。</li>
<li>函数内定义的局部变量声明为全局变量，前面加global。</li>
</ul>
<h2 id="1-3-输入输出函数"><a href="#1-3-输入输出函数" class="headerlink" title="1-3 输入输出函数"></a>1-3 输入输出函数</h2><p>input ( )：</p>
<ul>
<li>输入函数，在下框输入。</li>
<li>默认接收的数据都是字符串类型。</li>
</ul>
<p>print ( )：</p>
<ul>
<li><p>输出的内容可以是数字、字符串（要括起来）、含有运算符的表达式 （不括起来，输出表达式的值；反之，原样输出）。</p>
</li>
<li><p>输出的形式可以是换行、不换行（后面加上end&#x3D;’ ‘）。</p>
</li>
</ul>
<h2 id="1-4-标识符"><a href="#1-4-标识符" class="headerlink" title="1-4 标识符"></a>1-4 标识符</h2><p>变量、函数、方法、类、其他对象起的名字。</p>
<p>由字母、数字、下划线组成，数字不能开头。</p>
<p>严格区分大小写。</p>
<p>不能是关键字。</p>
<h2 id="1-5-转义字符"><a href="#1-5-转义字符" class="headerlink" title="1-5 转义字符"></a>1-5 转义字符</h2><p>换行：\n 。</p>
<p>回车：\r（用后面的内容覆盖前面的）。</p>
<p>制表符：\t（四个字符为一个单元，用空格补全单元空格）。</p>
<p>退格：\b（把紧邻的前一个字符退没）。</p>
<p>不希望转义字符起作用，可以在字符串前加 r或R。</p>
<h2 id="1-6-运算符"><a href="#1-6-运算符" class="headerlink" title="1-6 运算符"></a>1-6 运算符</h2><h3 id="1-6-1-优先级（由高到底）"><a href="#1-6-1-优先级（由高到底）" class="headerlink" title="1-6-1 优先级（由高到底）"></a>1-6-1 优先级（由高到底）</h3><p>( * * ) - ( *、&#x2F;、&#x2F;&#x2F;、% ) - ( +、- ) - ( &lt;&lt;、&gt;&gt; ) - ( &amp; ) - ( I ) - ( &gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D; ) - ( and ) - ( or ) - ( &#x3D; )</p>
<h3 id="1-6-2-算数运算符"><a href="#1-6-2-算数运算符" class="headerlink" title="1-6-2 算数运算符"></a>1-6-2 算数运算符</h3><p>+（加）、-（减）、*（乘）、&#x2F;（除）、&#x2F;&#x2F;（整除）、%（取余）、**（指数）。</p>
<h3 id="1-6-3-赋值运算符"><a href="#1-6-3-赋值运算符" class="headerlink" title="1-6-3 赋值运算符"></a>1-6-3 赋值运算符</h3><p>把 &#x3D; 右边的值赋给左边的变量。</p>
<p>支持复合赋值运算符+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、&#x2F;&#x2F;&#x3D;、%&#x3D;、**&#x3D; 。</p>
<p>支持链式赋值，a&#x3D;b&#x3D;c&#x3D;20 。</p>
<p>支持系列解包赋值，a,b,c&#x3D;20,30,40，变量的个数和值的个数要对应。</p>
<h3 id="1-6-4-比较运算符"><a href="#1-6-4-比较运算符" class="headerlink" title="1-6-4 比较运算符"></a>1-6-4 比较运算符</h3><p>&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、!&#x3D;、&#x3D;&#x3D; 。</p>
<p>&#x3D;&#x3D; 是对象value的比较，is、is not 是对象id的比较。</p>
<p>结果是bool类型。</p>
<h3 id="1-6-5-布尔运算符"><a href="#1-6-5-布尔运算符" class="headerlink" title="1-6-5 布尔运算符"></a>1-6-5 布尔运算符</h3><p>and：全真为真，一假为假；or：全假为假，一真为真。</p>
<p>not：取反，真变假，假变真。</p>
<p>in、not  in：在不在其中。</p>
<h3 id="1-6-6-位运算符"><a href="#1-6-6-位运算符" class="headerlink" title="1-6-6 位运算符"></a>1-6-6 位运算符</h3><p>先转换为二进制。</p>
<p>&amp;（位与）：对应数位都为1，结果数位为1。</p>
<p>I（位或）：对应数位都为0，结果数位为0。</p>
<p>&lt;&lt;（左移）：高位溢出舍弃，低位补0。</p>
<p>&gt;&gt;（右移）：低位溢出舍弃，高位补0。</p>
<h2 id="1-7-数据类型"><a href="#1-7-数据类型" class="headerlink" title="1-7 数据类型"></a>1-7 数据类型</h2><h3 id="1-7-1-类型转换"><a href="#1-7-1-类型转换" class="headerlink" title="1-7-1 类型转换"></a>1-7-1 类型转换</h3><p>int 转 float 时末尾加 .0。</p>
<p>float 转 int 时只截取整数部分。</p>
<p>str 转 int、float ，字符串必须是数字串，否则不允许转换。</p>
<h3 id="1-7-2-整数类型（int）"><a href="#1-7-2-整数类型（int）" class="headerlink" title="1-7-2 整数类型（int）"></a>1-7-2 整数类型（int）</h3><p>可以表示正数、负数、零。</p>
<p>二进制：以0b开头，内置函数bin ( ) 。</p>
<p>八进制：以0o开头，内置函数oct ( ) 。</p>
<p>十进制：以0x开头,内置函数hex ( ) 。</p>
<h3 id="1-7-3-浮点数类型（float）"><a href="#1-7-3-浮点数类型（float）" class="headerlink" title="1-7-3 浮点数类型（float）"></a>1-7-3 浮点数类型（float）</h3><p>由整数部分和小数部分组成。</p>
<p>浮点数储存不精确时，导入模块decimal。</p>
<ul>
<li>form  decimal  import  Decimal    </li>
<li>print(Decimal(‘ ‘)+Decimal(‘ ‘))</li>
</ul>
<h3 id="1-7-4-布尔类型（bool）"><a href="#1-7-4-布尔类型（bool）" class="headerlink" title="1-7-4 布尔类型（bool）"></a>1-7-4 布尔类型（bool）</h3><p>真 - True - 1；假 - False - 0 。</p>
<h3 id="1-7-5-字符串类型（str）"><a href="#1-7-5-字符串类型（str）" class="headerlink" title="1-7-5 字符串类型（str）"></a>1-7-5 字符串类型（str）</h3><p>定义：</p>
<ul>
<li>单引号或双引号定义在一行，而三引号定义可以换行。</li>
<li>引号的嵌套：<ul>
<li>可以用 \ 进行转义。</li>
<li>单引号内可以写双引号，双引号内可以写单引号。</li>
</ul>
</li>
</ul>
<p>拼接：</p>
<ul>
<li>使用 + 连接字符串变量或字符串字面量</li>
</ul>
<p>格式化：</p>
<ul>
<li>“%占位符” % 变量</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如下代码，完成字符串、整数、浮点数，三种不同类型变量的占位</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;传智播客”</span></span><br><span class="line"><span class="string">set_up_year = 2006</span></span><br><span class="line"><span class="string">stock_price = 19.99</span></span><br><span class="line"><span class="string">message = &quot;</span>我是:%s，我成立于:%d，我今天的股价是:%<span class="string">f&quot; % (name，set_up_year，stock_price)</span></span><br><span class="line"><span class="string">print(message)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#我是:传智播客，我成立于:2006，我今天的股价是:19.990000</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>数字精度控制</li>
</ul>
<p>我们可以使用辅助符号 “m.n” 来控制数据的宽度和精度</p>
<p>m，控制宽度，要求是数字（很少使用），设置的宽度小于数字自身，不生效。</p>
<p>.n，控制小数点精度，要求是数字，会进行小数的四舍五入。</p>
<ul>
<li>f”内容{变量}” 的格式来快速格式化</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;传智播客”</span></span><br><span class="line"><span class="string">set_up_year = 2006</span></span><br><span class="line"><span class="string">stock_price = 19.99</span></span><br><span class="line"><span class="string">print(f&quot;</span>我是:&#123;name&#125;，我成立于:&#123;set_up_year&#125;，我今天的股票价格是:&#123;stock_price&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#我是:传智播客，我成立于:2006，我今天的股价是:19.99(不做精度控制，原样输出)</span></span><br></pre></td></tr></table></figure></div>

<h1 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2- 顺序结构"></a>2- 顺序结构</h1><p>程序从上到下执行，中间没有判断和跳转，直到结束。</p>
<h1 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3- 选择结构"></a>3- 选择结构</h1><p>语法：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240407163757455.png"
                      alt="image-20240407163757455"
                ></p>
<p>实例：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的身高(cm):&quot;</span>)) &lt; <span class="number">120</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;身高小于120cm，可以免费。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的VIP等级(1-5):&quot;</span>)) &gt;<span class="number">3</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;vip级别大于3，可以免费。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请告诉我今天几号:&quot;</span>)) == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是1号免费日，可以免费。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;不好意思，条件都不满足。&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#请输入你的身高(cm):130</span></span><br><span class="line"><span class="comment">#请输入你的VIP等级(1-5):5</span></span><br><span class="line"><span class="comment">#vip级别大于3，可以免费。</span></span><br></pre></td></tr></table></figure></div>

<h1 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4- 循环结构"></a>4- 循环结构</h1><p>语法：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240407164255420.png"
                      alt="image-20240407164255420"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240407164359042.png"
                      alt="image-20240407164359042"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240407164407701.png"
                      alt="image-20240407164407701"
                ></p>
<p>实例（九九乘法表）：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过外层循环控制行数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">	<span class="comment">#通过内层循环控制每一行的数据</span></span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i + <span class="number">1</span>):</span><br><span class="line">        <span class="comment">#在内层循环中输出每一行的内容</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;j&#125;</span> * <span class="subst">&#123;i&#125;</span> = <span class="subst">&#123;j * i&#125;</span>\t&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 外层循环可以通过print输出一个回车符</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></div>

<h1 id="5-数据容器"><a href="#5-数据容器" class="headerlink" title="5- 数据容器"></a>5- 数据容器</h1><h2 id="5-1-内容"><a href="#5-1-内容" class="headerlink" title="5-1 内容"></a>5-1 内容</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240407170317626.png"
                      alt="image-20240407170317626"
                ></p>
<h2 id="5-2-方法"><a href="#5-2-方法" class="headerlink" title="5-2 方法"></a>5-2 方法</h2><p>max（容器）：统计容器的最大元素。</p>
<p>min（容器）：统计容器的最小元素。</p>
<p>len（容器）：统计容器的元素数量。</p>
<p>list（容器）：将给定容器转换为列表。</p>
<p>tuple（容器）：将给定容器转换为元组。</p>
<p>str（容器）：将给定容器转换为字符串。</p>
<p>set（容器）：将给定容器转换为集合。</p>
<p>sorted（容器, [reverse&#x3D;True]）：如果没有[reverse&#x3D;True]，正序排序；若有则反序排序。</p>
<h1 id="6-序列切片"><a href="#6-序列切片" class="headerlink" title="6- 序列切片"></a>6- 序列切片</h1><h2 id="6-1-内容"><a href="#6-1-内容" class="headerlink" title="6-1 内容"></a>6-1 内容</h2><p>介绍：</p>
<ul>
<li><p>序列支持切片，即：列表、元组、字符串，均支持进行切片操作。</p>
</li>
<li><p>切片：从一个序列中，取出一个子序列。</p>
</li>
</ul>
<p>语法：</p>
<ul>
<li>序列 [ 起始下标 : 结束下标 : 步长 ]。</li>
<li>表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列：<ul>
<li>起始下标表示从何处开始，可以留空，留空视作从头开始。</li>
<li>结束下标（不含）表示何处结束，可以留空，留空视作截取到结尾。</li>
<li>步长表示，依次取元素的间隔：<ul>
<li>步长1表示，一个个取元素。</li>
<li>步长2表示，每次跳过1个元素取。</li>
<li>步长N表示，每次跳过N-1个元素取。</li>
<li>步长为负数表示，反向取（注意，起始下标和结束下标也要反向标记）。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="6-2-实例"><a href="#6-2-实例" class="headerlink" title="6-2 实例"></a>6-2 实例</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对tuple进行切片，从头开始，到最后结束，步长1</span></span><br><span class="line">my_tuple = (<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>)</span><br><span class="line">result1 = my_tuple[:] <span class="comment">#起始和结束不写表示从头到尾，步长为1可以省略</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;结果1:<span class="subst">&#123;result1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#(0,1,2,3,4,5,6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对str进行切片，从头开始，到最后结束，步长-1</span></span><br><span class="line">my_str = <span class="string">&quot;01234567&quot;</span></span><br><span class="line">result2 = my_str[::-<span class="number">1</span>] <span class="comment">#等同于将序列反转了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;结果2:<span class="subst">&#123;result2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#76543210</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对列表进行切片，从3开始、到1结束，步长-1</span></span><br><span class="line">my_list = [<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>]</span><br><span class="line">result3 = my_list[<span class="number">3</span>:<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;结果3:<span class="subst">&#123;result3&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#[3,2]</span></span><br><span class="line"></span><br><span class="line">my_str = <span class="string">&quot;万过薪月，员序程马黑来，nohtyP学&quot;</span></span><br><span class="line"><span class="comment"># 倒序字符申，切片取出</span></span><br><span class="line">result1 = my_str[::-<span class="number">1</span>][<span class="number">9</span>:<span class="number">14</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;方式1结果:<span class="subst">&#123;result1&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片取出，然后倒序</span></span><br><span class="line">result2 = my_str[<span class="number">5</span>:<span class="number">10</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;方式2结果:<span class="subst">&#123;result2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># split分隔&quot;，&quot; replace替换&quot;来”为空，倒序字符串</span></span><br><span class="line">result3 = my_str.split(<span class="string">&quot;，&quot;</span>)[<span class="number">1</span>].replace(<span class="string">&quot;来&quot;</span>，<span class="string">&quot;&quot;</span>)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;方式3结果:<span class="subst">&#123;result3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#都得到：黑马程序员</span></span><br></pre></td></tr></table></figure></div>

<h1 id="7-列表（list）"><a href="#7-列表（list）" class="headerlink" title="7- 列表（list）"></a>7- 列表（list）</h1><h2 id="7-1-创建"><a href="#7-1-创建" class="headerlink" title="7-1 创建"></a>7-1 创建</h2><p>语法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）</span><br><span class="line">[ 元素1, 元素2, ...... ] </span><br><span class="line">（2）</span><br><span class="line">list ([ 元素1, 元素2, ...... ]) </span><br></pre></td></tr></table></figure></div>

<p>元素间用英文逗号隔开。</p>
<p>元素的数据类型没有限制，也可以是列表。</p>
<h2 id="7-2-查"><a href="#7-2-查" class="headerlink" title="7-2 查"></a>7-2 查</h2><p>列表 .index ( 元素 )</p>
<ul>
<li>查找某元素下标。</li>
<li>如果有n个相同元素，只返回第一个元素的下标。如果元素不存在，会抛出 ValueError。</li>
</ul>
<p>列表 [ 下标 ] [ 下标 ]</p>
<ul>
<li>查找某元素。</li>
<li>下标索引：正向从0到n-1，逆向从-n到-1。索引不存在抛出 IndexError。</li>
</ul>
<h2 id="7-3-改"><a href="#7-3-改" class="headerlink" title="7-3 改"></a>7-3 改</h2><p>列表 [ 下标 ] &#x3D; 值</p>
<ul>
<li>将指定位置元素的值修改。</li>
</ul>
<h2 id="7-4-增"><a href="#7-4-增" class="headerlink" title="7-4 增"></a>7-4 增</h2><p>列表 .insert ( 下标, 元素 )</p>
<ul>
<li>在指定位置插入一个元素。</li>
</ul>
<p>列表 .append ( 元素 )</p>
<ul>
<li>在尾部追加一个元素。</li>
</ul>
<p>列表 .extend ( 其他数据容器 )</p>
<ul>
<li>将其他数据容器的内容取出，依次追加到尾部。</li>
</ul>
<h2 id="7-5-删"><a href="#7-5-删" class="headerlink" title="7-5 删"></a>7-5 删</h2><p>del 列表 [ 下标 ]</p>
<ul>
<li>将指定位置的元素删除。</li>
</ul>
<p>列表 .pop ( 下标 )</p>
<ul>
<li>删除指定位置元素，还可将删除元素作为返回值得到。若不指定，则删除最后一个元素。索引不存在抛出 IndexError。</li>
</ul>
<p>列表 .remove ( 元素 )</p>
<ul>
<li>一次删除一个指定元素，重复元素只删除第一个。元素不存在抛出ValueError。</li>
</ul>
<p>列表 .clear ( )</p>
<ul>
<li>清空列表内容。</li>
</ul>
<h2 id="7-6-其他方法"><a href="#7-6-其他方法" class="headerlink" title="7-6 其他方法"></a>7-6 其他方法</h2><p>列表 .count ( 元素 )</p>
<ul>
<li>统计某元素在列表内的数量。</li>
</ul>
<p>列表 .sort ( )</p>
<ul>
<li>列表内元素默认从小到大排序。</li>
<li>可以指定reverse&#x3D;True进行降序排序。</li>
</ul>
<p>sorted ( 列表 )</p>
<ul>
<li>默认从小到大排序。</li>
<li>可指定reverse&#x3D;True进行降序排序。原列表不发生变化。</li>
</ul>
<h2 id="7-7-遍历"><a href="#7-7-遍历" class="headerlink" title="7-7 遍历"></a>7-7 遍历</h2><p>语法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）</span><br><span class="line">for 临时变量 in 数据容器:</span><br><span class="line">	对临时变量进行处理</span><br><span class="line"></span><br><span class="line">（2）</span><br><span class="line">index = 0</span><br><span class="line">while index &lt; len(列表):</span><br><span class="line">	元素 = 列表[index]</span><br><span class="line">	对元素进行处理</span><br><span class="line">	index += 1</span><br></pre></td></tr></table></figure></div>

<h1 id="8-元组（tuple）"><a href="#8-元组（tuple）" class="headerlink" title="8- 元组（tuple）"></a>8- 元组（tuple）</h1><h2 id="8-1-创建"><a href="#8-1-创建" class="headerlink" title="8-1 创建"></a>8-1 创建</h2><p>语法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）</span><br><span class="line">( 元素1, 元素2, ...... )</span><br><span class="line">（2）</span><br><span class="line">tuple (( 元素1, 元素2, ...... ))</span><br></pre></td></tr></table></figure></div>

<p>元组只有一个元素，要在其后面加上逗号。</p>
<p>元素的数据类型没有限制，可以是元组。</p>
<h2 id="8-2-特性"><a href="#8-2-特性" class="headerlink" title="8-2 特性"></a>8-2 特性</h2><p>不可修改。</p>
<p>但可以修改元组中 list ( ) 内部的内容。</p>
<h2 id="8-3-方法"><a href="#8-3-方法" class="headerlink" title="8-3 方法"></a>8-3 方法</h2><p>元组 [ 下标 ] [ 下标 ]</p>
<ul>
<li>查找某元素。</li>
</ul>
<p>元组 .index ( 元素 )</p>
<ul>
<li>查找某元素的下标。</li>
</ul>
<p>元组 .count ( 元素 )</p>
<ul>
<li>统计某元素在元组中的数量。</li>
</ul>
<h2 id="8-4-遍历"><a href="#8-4-遍历" class="headerlink" title="8-4 遍历"></a>8-4 遍历</h2><p>语法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）</span><br><span class="line">for 临时变量 in 数据容器:</span><br><span class="line">	对临时变量进行处理</span><br><span class="line"></span><br><span class="line">（2）</span><br><span class="line">index = 0</span><br><span class="line">while index &lt; len(列表):</span><br><span class="line">	元素 = 列表[index]</span><br><span class="line">	对元素进行处理</span><br><span class="line">	index += 1</span><br></pre></td></tr></table></figure></div>

<h1 id="9-字符串（str）"><a href="#9-字符串（str）" class="headerlink" title="9- 字符串（str）"></a>9- 字符串（str）</h1><h2 id="9-1-特性"><a href="#9-1-特性" class="headerlink" title="9-1 特性"></a>9-1 特性</h2><p>不可修改。</p>
<h2 id="9-2-查"><a href="#9-2-查" class="headerlink" title="9-2 查"></a>9-2 查</h2><p>字符串 [ 下标 ] [ 下标 ]</p>
<ul>
<li>查找某元素。</li>
</ul>
<p>字符串 .index ( 子串 )</p>
<ul>
<li>查找子串第一次出现位置，无则抛出ValueError。</li>
</ul>
<p>字符串 .rindex ( 子串 )</p>
<ul>
<li>查找子串最后一次出现位置，无则抛出ValueError。</li>
</ul>
<p>字符串 .find ( 子串 )</p>
<ul>
<li>查找子串第一次出现位置，无则返回-1。</li>
</ul>
<p>字符串 .rfind ( 子串 )</p>
<ul>
<li>查找子串最后一次出现位置，无则返回-1。</li>
</ul>
<h2 id="9-3-改"><a href="#9-3-改" class="headerlink" title="9-3 改"></a>9-3 改</h2><p>字符串 .replace ( 字符串1, 字符串2, 数字 )</p>
<ul>
<li>数字是字符串2替换字符串1的个数，若没有则全部替换。</li>
<li>不是修改字符串本身，而是得到新字符串。</li>
</ul>
<h2 id="9-4-分割"><a href="#9-4-分割" class="headerlink" title="9-4 分割"></a>9-4 分割</h2><p>字符串 .split ( sep&#x3D;’分隔符字符串’, maxsplit&#x3D;数字 )</p>
<ul>
<li>按照指定的分隔符字符串将字符串划分为多个字符串，并存入列表对象中。</li>
<li>数字是最大劈分次数，没有则全部劈分。</li>
<li>字符串本身不变，而是得到了一个列表对象。</li>
</ul>
<h2 id="9-5-规整"><a href="#9-5-规整" class="headerlink" title="9-5 规整"></a>9-5 规整</h2><p>字符串. strip ( )</p>
<ul>
<li>去前后空格</li>
</ul>
<p>字符串 .strip ( 字符串 )</p>
<ul>
<li>去前后指定字符串</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">&quot; itheima and itcast &quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_str.strip())</span><br><span class="line"><span class="comment">#结果:&quot;itheima and itcast&quot;</span></span><br><span class="line"></span><br><span class="line">my_str = <span class="string">&quot;12itheima and itcast21&quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_str.strip(<span class="string">&quot;12&quot;</span>))</span><br><span class="line"><span class="comment">#结果:&quot;itheima and itcast&quot;</span></span><br><span class="line"><span class="comment">#注意，传入的是&quot;12&quot;,其实就是:&quot;1&quot;和&quot;2&quot;都会移除，是按照单个字符。</span></span><br></pre></td></tr></table></figure></div>

<h2 id="9-6-比较"><a href="#9-6-比较" class="headerlink" title="9-6 比较"></a>9-6 比较</h2><p>字符串是按位比较，只要有一位大，整体都大。</p>
<h2 id="9-7-其他方法"><a href="#9-7-其他方法" class="headerlink" title="9-7 其他方法"></a>9-7 其他方法</h2><p>字符串 .count ( 子串 )</p>
<ul>
<li>子串在字符串的个数。</li>
</ul>
<h2 id="9-8-遍历"><a href="#9-8-遍历" class="headerlink" title="9-8 遍历"></a>9-8 遍历</h2><p>语法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）</span><br><span class="line">for 临时变量 in 数据容器:</span><br><span class="line">	对临时变量进行处理</span><br><span class="line"></span><br><span class="line">（2）</span><br><span class="line">index = 0</span><br><span class="line">while index &lt; len(列表):</span><br><span class="line">	元素 = 列表[index]</span><br><span class="line">	对元素进行处理</span><br><span class="line">	index += 1</span><br></pre></td></tr></table></figure></div>

<h1 id="10-集合（set）"><a href="#10-集合（set）" class="headerlink" title="10- 集合（set）"></a>10- 集合（set）</h1><h2 id="10-1-创建"><a href="#10-1-创建" class="headerlink" title="10-1 创建"></a>10-1 创建</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）</span><br><span class="line">&#123;元素1, 元素2, ......&#125;</span><br><span class="line">（2）</span><br><span class="line">set (&#123; 元素1, 元素2, ...... &#125;)</span><br></pre></td></tr></table></figure></div>

<p>集合中的元素不允许重复。</p>
<p>集合是无序的。</p>
<h2 id="10-2-增"><a href="#10-2-增" class="headerlink" title="10-2 增"></a>10-2 增</h2><p>集合 .add ( 元素 )</p>
<ul>
<li>一次添加一个元素。</li>
</ul>
<p>集合 .update ( 集合 )</p>
<ul>
<li>一次至少添加一个元素。</li>
</ul>
<h2 id="10-3-删"><a href="#10-3-删" class="headerlink" title="10-3 删"></a>10-3 删</h2><p>集合 .remove ( 元素 )</p>
<ul>
<li>一次删除一个元素，无则抛出KeyError。</li>
</ul>
<p>集合 .discard ( 元素 )</p>
<ul>
<li>一次删除一个元素，无不抛出异常。</li>
</ul>
<p>集合 .pop ( )</p>
<ul>
<li>从集合中随机取出一个元素。</li>
</ul>
<p>集合 .clear ( )</p>
<ul>
<li>清空集合。</li>
</ul>
<h2 id="10-4-关系"><a href="#10-4-关系" class="headerlink" title="10-4 关系"></a>10-4 关系</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;</span><br><span class="line">s3=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">90</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个集合是否是另一个集合的子集</span></span><br><span class="line"><span class="built_in">print</span>(s2.issubset(s1))<span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(s3.issubset(s1))<span class="comment">#False</span></span><br><span class="line"><span class="comment">#一个集合是否是另一个集合的超集</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s2))<span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s3))<span class="comment">#False</span></span><br><span class="line"><span class="comment">#两个集合是否含有交集</span></span><br><span class="line"><span class="built_in">print</span>(s2.isdisjoint(s3))<span class="comment">#False</span></span><br></pre></td></tr></table></figure></div>

<h2 id="10-5-数学操作"><a href="#10-5-数学操作" class="headerlink" title="10-5 数学操作"></a>10-5 数学操作</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#交并集</span></span><br><span class="line">s1=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sl.intersection(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br><span class="line"><span class="comment">#intersection()与&amp;等价，交集操作</span></span><br><span class="line"><span class="comment">#交：&#123;40,20,30&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1.union(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br><span class="line"><span class="comment">#union()与|等价，并集操作</span></span><br><span class="line"><span class="comment">#并：&#123;10,20,30,40,50,60&#125;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取出2个集合的差集</span></span><br><span class="line"><span class="comment">#语法:集合1.difference(集合2)</span></span><br><span class="line"><span class="comment">#功能:取出集合1和集合2的差集(集合1有而集合2没有的)</span></span><br><span class="line"><span class="comment">#结果:得到一个新集合，集合1和集合2不变</span></span><br><span class="line"></span><br><span class="line">set1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">set3 = setl.difference(set2) </span><br><span class="line"><span class="built_in">print</span>(set3) <span class="comment">#结果:&#123;2，3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1) <span class="comment">#结果:&#123;1，2，3&#125;不变</span></span><br><span class="line"><span class="built_in">print</span>(set2) <span class="comment">#结果:&#123;1，5，6&#125;不变</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#消除2个集合的差集</span></span><br><span class="line"><span class="comment">#语法:集合1.difference_update(集合2)</span></span><br><span class="line"><span class="comment">#功能:对比集合1和集合2，在集合1内，删除和集合2相同的元素</span></span><br><span class="line"><span class="comment">#结果:集合1被修改，集合2不变</span></span><br><span class="line"></span><br><span class="line">set1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">set1.difference_update(set2)</span><br><span class="line"><span class="built_in">print</span>(set1) <span class="comment">#结果:&#123;2，3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set2) <span class="comment">#结果:&#123;1，5，6&#125;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对称差集</span></span><br><span class="line"></span><br><span class="line">s1=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(sl.symmetric_difference(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 ^ s2) <span class="comment">#&#123;50,10,60&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="10-6-其他方法"><a href="#10-6-其他方法" class="headerlink" title="10-6 其他方法"></a>10-6 其他方法</h2><p>元素  in&#x2F;not  in  集合</p>
<ul>
<li>判断元素在不在集合中。</li>
</ul>
<h2 id="10-7-遍历"><a href="#10-7-遍历" class="headerlink" title="10-7 遍历"></a>10-7 遍历</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#集合不支持下标索引，不能用while循环</span></span><br><span class="line"><span class="comment">#可以用for循环</span></span><br><span class="line"></span><br><span class="line">set1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> set1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;集合的元素有:<span class="subst">&#123;element&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h1 id="11-字典（dict）"><a href="#11-字典（dict）" class="headerlink" title="11- 字典（dict）"></a>11- 字典（dict）</h1><h2 id="11-1-创建"><a href="#11-1-创建" class="headerlink" title="11-1 创建"></a>11-1 创建</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）</span><br><span class="line">&#123; key1:value1, key2:value2, ...... &#125;</span><br><span class="line">（2）</span><br><span class="line">dict (&#123; key1:value1, key2:value2, ...... &#125;)</span><br></pre></td></tr></table></figure></div>

<p>字典中的 key 不可重复，若重复后面的将覆盖前面的。</p>
<p>字典是无序的。</p>
<p>字典的 value 可以是任意数据类型，而 key 只能为不可变数据类型。</p>
<h2 id="11-2-查"><a href="#11-2-查" class="headerlink" title="11-2 查"></a>11-2 查</h2><p>字典 [ key ]</p>
<ul>
<li>通过 key 值获得对应的 value 。</li>
</ul>
<p>字典 .keys ( )</p>
<ul>
<li>得到字典中的全部 key 。</li>
</ul>
<p>字典 .values ( )</p>
<ul>
<li>得到字典中的全部 value 。</li>
</ul>
<h2 id="11-3-增-改"><a href="#11-3-增-改" class="headerlink" title="11-3 增&#x2F;改"></a>11-3 增&#x2F;改</h2><p>字典 [ key ] &#x3D; value</p>
<ul>
<li>若 key 不存在，则新增。</li>
<li>若 key 存在，则修改。</li>
</ul>
<h2 id="11-4-删"><a href="#11-4-删" class="headerlink" title="11-4 删"></a>11-4 删</h2><p>字典 .pop ( key )</p>
<ul>
<li>获得指定 key 的 value，同时字典被修改，指定 key 的数据被删除。</li>
</ul>
<p>字典 .clear ( )</p>
<ul>
<li>清空字典。</li>
</ul>
<h2 id="11-5-其他方法"><a href="#11-5-其他方法" class="headerlink" title="11-5 其他方法"></a>11-5 其他方法</h2><p>key  in&#x2F;not  in  字典</p>
<ul>
<li>判断 key 在不在字典中。</li>
</ul>
<h2 id="11-6-遍历"><a href="#11-6-遍历" class="headerlink" title="11-6 遍历"></a>11-6 遍历</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式1:通过获取到全部的key来完成遍历</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;字典的key是:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;字典的value是:<span class="subst">&#123;my_dict[key]&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#方式2:直接对字典进行for循环，每一次循环都是直接得到key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> my_dict:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;2字典的key是:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;2字典的value是:<span class="subst">&#123;my_dict[key]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h1 id="12-函数"><a href="#12-函数" class="headerlink" title="12- 函数"></a>12- 函数</h1><h2 id="12-1-创建与调用"><a href="#12-1-创建与调用" class="headerlink" title="12-1 创建与调用"></a>12-1 创建与调用</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240408204943428.png"
                      alt="image-20240408204943428"
                ></p>
<h2 id="12-2-多返回值（结果是元组）"><a href="#12-2-多返回值（结果是元组）" class="headerlink" title="12-2 多返回值（结果是元组）"></a>12-2 多返回值（结果是元组）</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_return</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>，<span class="number">2</span></span><br><span class="line"></span><br><span class="line">x,y = test_return()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#结果1</span></span><br><span class="line"><span class="built_in">print</span>(y) <span class="comment">#结果2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按照返回值的顺序，写对应顺序的多个变量接收即可</span></span><br><span class="line"><span class="comment">#变量之间用逗号隔开</span></span><br><span class="line"><span class="comment">#支持不同类型的数据return</span></span><br></pre></td></tr></table></figure></div>

<h2 id="12-3-参数"><a href="#12-3-参数" class="headerlink" title="12-3 参数"></a>12-3 参数</h2><h3 id="12-3-1-位置参数"><a href="#12-3-1-位置参数" class="headerlink" title="12-3-1 位置参数"></a>12-3-1 位置参数</h3><p>位置参数：</p>
<ul>
<li>调用函数时根据函数定义的参数位置来传递参数。</li>
</ul>
<p>注意：</p>
<ul>
<li>传递的参数和定义的参数的顺序及个数必须一致。</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>，年龄是<span class="subst">&#123;age&#125;</span>，性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="12-3-2-关键字参数"><a href="#12-3-2-关键字参数" class="headerlink" title="12-3-2 关键字参数"></a>12-3-2 关键字参数</h3><p>关键字参数：</p>
<ul>
<li>函数调用时通过 “键&#x3D;值” 形式传递参数。</li>
</ul>
<p>作用：</p>
<ul>
<li>可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</li>
</ul>
<p>注意：</p>
<ul>
<li>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</li>
<li>def fun ( a , b , * , c , d ):   从 * 之后的参数，在函数调用时，只能采用关键字。</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;您的名字是:<span class="subst">&#123;name&#125;</span>，年龄是:<span class="subst">&#123;age&#125;</span>，性别是:<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#关键字传参</span></span><br><span class="line">user_info(name=<span class="string">&quot;小明&quot;</span>,age=<span class="number">20</span>,gender=<span class="string">&quot;男&quot;</span>) </span><br><span class="line"><span class="comment">#可以不按照固定顺序</span></span><br><span class="line">user_info(age=<span class="number">20</span>,gender=<span class="string">&quot;男&quot;</span>,name=<span class="string">&quot;小明&quot;</span>) </span><br><span class="line"><span class="comment">#可以和位置参数混用，位置参数必须在前，且匹配参数序</span></span><br><span class="line">user_info(<span class="string">&quot;小明&quot;</span>,age=<span class="number">20</span>,gender=<span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="12-3-3-缺省参数"><a href="#12-3-3-缺省参数" class="headerlink" title="12-3-3 缺省参数"></a>12-3-3 缺省参数</h3><p>缺省参数：</p>
<ul>
<li>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值。</li>
<li>( 注意：所有位置参数必须出现在默认参数前，包括函数定义和调用 )。</li>
</ul>
<p>作用：</p>
<ul>
<li>当调用函数时没有传递参数，就会使用默认是用缺省参数对应的值。</li>
</ul>
<p>注意：</p>
<ul>
<li>函数调用时，如果为缺省参数传值则修改默认参数值，否则使用这个默认值。</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender=<span class="string">&#x27;男&#x27;</span></span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>，年龄是<span class="subst">&#123;age&#125;</span>，性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line">	</span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;女&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="12-3-4-不定长参数"><a href="#12-3-4-不定长参数" class="headerlink" title="12-3-4 不定长参数"></a>12-3-4 不定长参数</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240408211529142.png"
                      alt="image-20240408211529142"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240408211536261.png"
                      alt="image-20240408211536261"
                ></p>
<p>注意：</p>
<ul>
<li><p>在一个函数的定义过程中，既有个数可变的位置参数，也有个数可变的关键字形参。要求，个数可变的位置参数放在个数可变的关键字形参之前。</p>
</li>
<li><p>def fun ( *args1 , **args2 ): </p>
</li>
<li><p>def fun ( a , b , * , c , d , **args2 ):</p>
</li>
<li><p>def fun ( a , b , *args1 , **args2 ):</p>
</li>
</ul>
<h2 id="12-4-lambda匿名函数"><a href="#12-4-lambda匿名函数" class="headerlink" title="12-4 lambda匿名函数"></a>12-4 lambda匿名函数</h2><h3 id="12-4-1-定义"><a href="#12-4-1-定义" class="headerlink" title="12-4-1 定义"></a>12-4-1 定义</h3><p>def关键字，可以定义带有名称的函数。</p>
<p>lambda关键字，可以定义匿名函数 ( 无名称 )。</p>
<p>有名称的函数，可以基于名称重复使用。</p>
<p>无名称的匿名函数，只可临时使用一次。</p>
<h3 id="12-4-2-语法"><a href="#12-4-2-语法" class="headerlink" title="12-4-2 语法"></a>12-4-2 语法</h3><p>lambda 传入参数：函数体(一行代码)</p>
<ul>
<li>lambda 是关键字，表示定义匿名函数。</li>
<li>传入参数表示匿名函数的形式参数，如：x , y表示接收2个形式参数。</li>
<li>函数体，就是函数的执行逻辑，要注意：只能写一行，无法写多行代码。</li>
</ul>
<h3 id="12-4-3-实例"><a href="#12-4-3-实例" class="headerlink" title="12-4-3 实例"></a>12-4-3 实例</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过def关键字，定义一个函数，并传入</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_func</span>(<span class="params">compute</span>):</span><br><span class="line">    result=compute(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(resut)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"> </span><br><span class="line">test_func(compute) <span class="comment">#结果:3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以通过lambda关键字，传入一个一次性使用的lambda匿名函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_func</span>(<span class="params">compute</span>):</span><br><span class="line">    result=compute(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(resut)</span><br><span class="line"></span><br><span class="line">test_func(<span class="keyword">lambda</span> x,y: x+y) <span class="comment">#结果:3   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用def和使用lambda，定义的函数功能完全一致，只是lambda关键字定义的函数是匿名的，无法二次使用。</span></span><br></pre></td></tr></table></figure></div>

<h2 id="12-5-递归函数"><a href="#12-5-递归函数" class="headerlink" title="12-5 递归函数"></a>12-5 递归函数</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">	<span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">2</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>)</span><br><span class="line"><span class="comment">#输出数列前6位</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span> <span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(fib(i)) <span class="comment">#斐波那契数列：1 1 2 3 5 8</span></span><br></pre></td></tr></table></figure></div>

<h1 id="13-文件操作"><a href="#13-文件操作" class="headerlink" title="13- 文件操作"></a>13- 文件操作</h1><h2 id="13-1-常用的三种基础访问模式"><a href="#13-1-常用的三种基础访问模式" class="headerlink" title="13-1 常用的三种基础访问模式"></a>13-1 常用的三种基础访问模式</h2><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
</tbody></table>
<h2 id="13-2-打开"><a href="#13-2-打开" class="headerlink" title="13-2 打开"></a>13-2 打开</h2><p>语法：</p>
<ul>
<li>open ( name, mode, encoding )</li>
<li>name：是要打开的目标文件名的字符串 ( 可以包含文件所在的具体路径 )。</li>
<li>mode：设置打开文件的模式 ( 访问模式 )：只读、写入、追加等。</li>
<li>encoding：编码格式 ( 推荐使用UTF-8 )</li>
</ul>
<p>注意：</p>
<ul>
<li>此时的 f 是 open 函数的文件对象，对象是Python中一种特殊的数据类型，拥有属性和方法，可以使用 “对象.属性” 或 “对象.方法” 对其进行访问。</li>
</ul>
<p>实例：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;python.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="comment">#encoding的顺序不是第三位，所以不能用位置参数，用关键字参数直接指定</span></span><br></pre></td></tr></table></figure></div>

<h2 id="13-3-读取"><a href="#13-3-读取" class="headerlink" title="13-3 读取"></a>13-3 读取</h2><table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>文件对象 .read ( num )</td>
<td>读取指定长度字节，不指定num读取文件全部。</td>
</tr>
<tr>
<td>文件对象 .readline ( )</td>
<td>读取一行。</td>
</tr>
<tr>
<td>文件对象 .readlines ( )</td>
<td>读取全部行，得到列表。</td>
</tr>
</tbody></table>
<h2 id="13-4-关闭"><a href="#13-4-关闭" class="headerlink" title="13-4 关闭"></a>13-4 关闭</h2><p>close：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#最后通过close，关闭文件对象，也就是关闭对文件的占用。</span></span><br><span class="line"><span class="comment">#如果不调用close，同时程序没有停止运行，那么这个文件将一直被Python程序占用。</span></span><br></pre></td></tr></table></figure></div>

<p>with open：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.readlines()</span><br><span class="line"><span class="comment">#通过在with open的语句块中对文件进行操作。</span></span><br><span class="line"><span class="comment">#可以在操作完成后自动关闭close文件，避免遗忘掉close方法。</span></span><br></pre></td></tr></table></figure></div>

<h2 id="13-5-遍历"><a href="#13-5-遍历" class="headerlink" title="13-5 遍历"></a>13-5 遍历</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>, <span class="string">&quot;r&quot;</span>):</span><br><span class="line">	<span class="built_in">print</span>(line)</span><br><span class="line"><span class="comment">#for循环读取文件行</span></span><br><span class="line"><span class="comment">#每一个line临时变量，就记录了文件的一行数据</span></span><br></pre></td></tr></table></figure></div>

<h2 id="13-6-写出"><a href="#13-6-写出" class="headerlink" title="13-6 写出"></a>13-6 写出</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;python.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment">#2.文件写入</span></span><br><span class="line">f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="comment">#3.内容刷新</span></span><br><span class="line">f.flush()</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<ul>
<li>直接调用write，内容并未真正写入文件，而是会积在程序的内存中，称之为缓冲区。</li>
<li>当调用flush的时候，内容会真正写入文件。</li>
<li>这样做是避免频繁的操作硬盘，导致效率下降 ( 攒一堆，一次性写磁盘 )。</li>
<li>w模式，文件不存在，会创建新文件。</li>
<li>w模式，文件存在，会清空原有内容。</li>
</ul>
<h2 id="13-7-追加写出"><a href="#13-7-追加写出" class="headerlink" title="13-7 追加写出"></a>13-7 追加写出</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.打开文件，通过a模式打开即可</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;python.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#2.文件写入</span></span><br><span class="line">f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="comment">#3.内容刷新</span></span><br><span class="line">f.flush()</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<ul>
<li>a模式，文件不存在会创建文件。</li>
<li>a模式，文件存在会在最后，追加写入文件。</li>
</ul>
<h1 id="14-异常"><a href="#14-异常" class="headerlink" title="14- 异常"></a>14- 异常</h1><h2 id="14-1-异常捕获"><a href="#14-1-异常捕获" class="headerlink" title="14-1 异常捕获"></a>14-1 异常捕获</h2><h3 id="14-1-1-常规异常"><a href="#14-1-1-常规异常" class="headerlink" title="14-1-1 常规异常"></a>14-1-1 常规异常</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">	可能发生错误的代码</span><br><span class="line">except:</span><br><span class="line">	如果出现异常执行的代码</span><br></pre></td></tr></table></figure></div>

<h3 id="14-1-2-指定异常"><a href="#14-1-2-指定异常" class="headerlink" title="14-1-2 指定异常"></a>14-1-2 指定异常</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">	可能发生错误的代码</span><br><span class="line">except 可能发生错误代码的异常类型 as e:</span><br><span class="line">	如果出现异常执行的代码</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<ul>
<li>e是接收异常信息的临时变量。</li>
<li>如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</li>
<li>一般try下方只放一行尝试执行的代码。</li>
</ul>
<h3 id="14-1-3-多个异常"><a href="#14-1-3-多个异常" class="headerlink" title="14-1-3 多个异常"></a>14-1-3 多个异常</h3><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>(NameError, ZeroDivisionError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ZeroDivision错误...&#x27;</span>) <span class="comment">#结果：ZeroDivision错误...</span></span><br></pre></td></tr></table></figure></div>

<h3 id="14-1-4-全部异常"><a href="#14-1-4-全部异常" class="headerlink" title="14-1-4 全部异常"></a>14-1-4 全部异常</h3><p>Exception是最顶级的异常。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	f = <span class="built_in">open</span>(<span class="string">&quot;D:/123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;出现异常了&quot;</span>) <span class="comment">#结果：出现异常了</span></span><br></pre></td></tr></table></figure></div>

<h3 id="14-1-5-else"><a href="#14-1-5-else" class="headerlink" title="14-1-5  else"></a>14-1-5  else</h3><p>else表示的是如果没有异常要执行的代码。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;我是else，是没有异常的时候执行的代码&#x27;</span>) </span><br><span class="line"><span class="comment">#结果：1  我是else，是没有异常的时候执行的代码</span></span><br></pre></td></tr></table></figure></div>

<h3 id="14-1-6-finally"><a href="#14-1-6-finally" class="headerlink" title="14-1-6 finally"></a>14-1-6 finally</h3><p>finally表示的是无论是否异常都要执行的代码，例如关闭文件。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    f= <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;没有异常，真开心&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></div>

<h2 id="14-2-异常的传递性"><a href="#14-2-异常的传递性" class="headerlink" title="14-2 异常的传递性"></a>14-2 异常的传递性</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/51d6bbbb-63dd-40d6-b7f0-37c09b24555f-25143160.jpg"
                      alt="img"
                ></p>
<h2 id="14-3-traceback模块"><a href="#14-3-traceback模块" class="headerlink" title="14-3 traceback模块"></a>14-3 traceback模块</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/df434f28-095a-4235-9618-9526478d9719-25143160.jpg"
                      alt="img"
                ></p>
<h1 id="15-模块"><a href="#15-模块" class="headerlink" title="15- 模块"></a>15- 模块</h1><h2 id="15-1-介绍"><a href="#15-1-介绍" class="headerlink" title="15-1 介绍"></a>15-1 介绍</h2><p>内涵：</p>
<ul>
<li>模块就是一个Python代码文件，内含类、函数、变量等，我们可以导入进行使用。</li>
</ul>
<p>导入：</p>
<ul>
<li>[ from 模块名 ] import [ 模块|类|变量|函数 |* ] [ as 别名 ]</li>
</ul>
<p>注意：</p>
<ul>
<li><p>from可以省略，直接import即可。</p>
</li>
<li><p>as别名可以省略。</p>
</li>
<li><p>通过 “.” 来确定层级关系。</p>
</li>
<li><p>模块的导入一般写在代码文件的开头位置。</p>
</li>
</ul>
<h2 id="15-2-导入"><a href="#15-2-导入" class="headerlink" title="15-2 导入"></a>15-2 导入</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span>,模块名<span class="number">2</span></span><br><span class="line"></span><br><span class="line">模块名.功能名()</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例:导入time模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入时间模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"><span class="comment">#让程序睡眠1秒(阻塞)</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能名</span><br><span class="line"></span><br><span class="line">功能名()</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例:导入time模块中的sleep方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入时间模块中的sleep方法</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"><span class="comment">#让程序睡眠1秒(阻塞)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">功能名()</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例:导入time模块中所有的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入时间模块中所有的方法</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"><span class="comment">#让程序睡眠1秒(阻塞)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束”)</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模块定义别名</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="comment">#功能定义别名</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能 <span class="keyword">as</span> 别名</span><br><span class="line"></span><br><span class="line"><span class="comment">#模块别名</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> tt</span><br><span class="line">tt.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#功能别名</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> sl</span><br><span class="line">sl(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="15-3-自定义模块"><a href="#15-3-自定义模块" class="headerlink" title="15-3 自定义模块"></a>15-3 自定义模块</h2><h3 id="15-3-1-介绍"><a href="#15-3-1-介绍" class="headerlink" title="15-3-1 介绍"></a>15-3-1 介绍</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9ff46312-5af3-4435-8c6a-e66252aba50b-25143160.jpg"
                      alt="img"
                ></p>
<h3 id="15-3-2-main"><a href="#15-3-2-main" class="headerlink" title="15-3-2 _ main _"></a>15-3-2 _ main _</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/09f2494e-f47d-4e04-bbbf-fe2563414d10-25143160.jpg"
                      alt="img"
                ></p>
<h3 id="15-3-3-all"><a href="#15-3-3-all" class="headerlink" title="15-3-3 _ all _"></a>15-3-3 _ all _</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/1064a774-1417-4cfe-9286-176cb6852627-25143160.jpg"
                      alt="img"
                ></p>
<h3 id="13-3-4-注意"><a href="#13-3-4-注意" class="headerlink" title="13-3-4 注意"></a>13-3-4 注意</h3><p>当导入多个模块且模块内有同名功能时，当调用这个同名功能的时候，调用到的是后面导入的模块的功能。</p>
<h1 id="16-包"><a href="#16-包" class="headerlink" title="16- 包"></a>16- 包</h1><h2 id="16-1-创建"><a href="#16-1-创建" class="headerlink" title="16-1 创建"></a>16-1 创建</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d5b9f4ad-3b44-45ea-b347-8da9d6d64581-25143160.jpg"
                      alt="img"
                ></p>
<h2 id="16-2-导入"><a href="#16-2-导入" class="headerlink" title="16-2 导入"></a>16-2 导入</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c67c25c2-5d66-4ddc-a23e-9fe393c30502-25143160.jpg"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/fb85c068-4693-45f5-b6da-8533b3df1f53-25143160.jpg"
                      alt="img"
                ></p>
<h1 id="17-类与对象"><a href="#17-类与对象" class="headerlink" title="17- 类与对象"></a>17- 类与对象</h1><h2 id="17-1-类创建"><a href="#17-1-类创建" class="headerlink" title="17-1 类创建"></a>17-1 类创建</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建类的语法:</span></span><br><span class="line">	<span class="comment">#class是关键字，表示要定义类了</span></span><br><span class="line">	<span class="comment">#类的属性，即定义在类中的变量(成员变量)</span></span><br><span class="line">	<span class="comment">#类的行为，即定义在类中的函数(成员方法)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名称</span>:</span><br><span class="line">	类的属性</span><br><span class="line">	类的行为</span><br><span class="line">	</span><br><span class="line"><span class="comment">#创建类对象的语法:</span></span><br><span class="line">对象 = 类名称()</span><br></pre></td></tr></table></figure></div>

<h2 id="17-2-方法"><a href="#17-2-方法" class="headerlink" title="17-2 方法"></a>17-2 方法</h2><h3 id="17-2-1-创建"><a href="#17-2-1-创建" class="headerlink" title="17-2-1 创建"></a>17-2-1 创建</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#self关键字是成员方法定义的时候，必须填写的。</span></span><br><span class="line">	<span class="comment">#它用来表示类对象自身的意思</span></span><br><span class="line">    <span class="comment">#当我们使用类对象调用方法的是，self会自动被python传入</span></span><br><span class="line">    <span class="comment">#在方法内部，想要访问类的成员变量，必须使用self</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">方法名</span>(<span class="params">self, 形参<span class="number">1</span>, ......, 形参N</span>):</span><br><span class="line">	方法体</span><br></pre></td></tr></table></figure></div>

<h3 id="17-2-2-魔术方法"><a href="#17-2-2-魔术方法" class="headerlink" title="17-2-2 魔术方法"></a>17-2-2 魔术方法</h3><p>构造方法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/54488178-8ce3-453a-a8e6-09a20a1f5f14-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>_ str _字符串方法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/fc451bb8-9103-435f-980e-a28836c09b9c-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>_ lt _小于符号比较方法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8b9a6fc8-b822-44ad-a5f9-e784488871fd-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>_ le _小于等于比较符号方法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/23579518-a249-4e5e-8e69-566c4681ace9-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>_ eq _比较运算符实现方法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/89156723-b451-4e06-b97e-f41458a92cc1-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="17-3-封装（私有成员）"><a href="#17-3-封装（私有成员）" class="headerlink" title="17-3 封装（私有成员）"></a>17-3 封装（私有成员）</h2><h3 id="17-3-1-创建"><a href="#17-3-1-创建" class="headerlink" title="17-3-1 创建"></a>17-3-1 创建</h3><p>类中提供了私有成员的形式来支持：</p>
<ul>
<li>私有成员变量</li>
<li>私有成员方法</li>
</ul>
<p>定义私有成员的方式非常简单，只需要：</p>
<ul>
<li>私有成员变量：变量名以__开头 ( 2个下划线 )</li>
<li>私有成员方法：方法名以__开头 ( 2个下划线 )</li>
<li>即可完成私有成员的设置</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>:</span><br><span class="line">	IMEI = <span class="literal">None</span> <span class="comment">#序列号</span></span><br><span class="line">	producer = <span class="literal">None</span> <span class="comment">#厂商</span></span><br><span class="line"></span><br><span class="line">    __current_voltage = <span class="literal">None</span> <span class="comment">#当前电压，私有成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">ca11_by_5g</span>(<span class="params">se1f</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g通话已开启&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__keep_single_core</span>(<span class="params">self</span>): <span class="comment">#私有成员方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;让CPU以单核模式运行以节省电量&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="17-3-2-注意"><a href="#17-3-2-注意" class="headerlink" title="17-3-2 注意"></a>17-3-2 注意</h3><p>私有变量无法赋值，也无法获取值。</p>
<p>私有成员无法被类对象使用，但可以被其他的成员使用。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设计一个类，用来描述手机</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">	<span class="comment">#提供私有成员变量:__is_5g_enable</span></span><br><span class="line">    __is_5g_enable = <span class="literal">True</span> <span class="comment"># 5g状态</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">#提供私有成员方法:__check_5g()</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">_check_5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__is_5g_enable:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;5g开启&quot;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;5g关闭，使用4g网络&quot;</span>)</span><br><span class="line">            </span><br><span class="line">	<span class="comment">#提供公开成员方法:call_by_5g()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_by_5g</span>(<span class="params">self</span>):</span><br><span class="line">		self.__check_5g()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;正在通话中&quot;</span>)</span><br><span class="line">        </span><br><span class="line">phone = Phone()</span><br><span class="line">phone.call_by_5g() <span class="comment">#结果：5g开启    正在通话中</span></span><br></pre></td></tr></table></figure></div>

<h2 id="17-4-继承"><a href="#17-4-继承" class="headerlink" title="17-4 继承"></a>17-4 继承</h2><h3 id="17-4-1-单继承"><a href="#17-4-1-单继承" class="headerlink" title="17-4-1 单继承"></a>17-4-1 单继承</h3><p>语法：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类名</span>):</span><br><span class="line">	类内容体</span><br></pre></td></tr></table></figure></div>

<p>实例：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">	IMEI = <span class="literal">None</span> <span class="comment">#序列号</span></span><br><span class="line">	producer = <span class="literal">None</span> <span class="comment">#厂商</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">ca11_by_4g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;4g通话&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone2022</span>(<span class="title class_ inherited__">Phone</span>):</span><br><span class="line">	face_id = <span class="literal">True</span> <span class="comment">#面部识别</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">ca11_by_5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;2022最新5g通话&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="17-4-2-多继承"><a href="#17-4-2-多继承" class="headerlink" title="17-4-2 多继承"></a>17-4-2 多继承</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b44a3911-d61f-4ad0-88b3-f60a80049aad-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2deca8ef-175c-4f2d-a349-fad7275fae3f-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h3 id="17-4-3-pass关键字"><a href="#17-4-3-pass关键字" class="headerlink" title="17-4-3 pass关键字"></a>17-4-3 pass关键字</h3><p>是占位语句，用来保证函数（方法）或定义的完整性，表示无内容、空的意思。</p>
<h3 id="17-4-4-复写"><a href="#17-4-4-复写" class="headerlink" title="17-4-4 复写"></a>17-4-4 复写</h3><p>子类继承父类的成员属性和成员方法后，如果对其“不满意”，那么可以进行复写即：</p>
<ul>
<li>在子类中重新定义同名的属性或方法即可。</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>:</span><br><span class="line">	IMEI = <span class="literal">None</span> <span class="comment">#序列号</span></span><br><span class="line">	producer = <span class="string">&quot;ITCAST&quot;</span> <span class="comment">#厂商</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">cal1_by_5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类的5g通话&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPhone</span>(<span class="title class_ inherited__">Phone</span>):</span><br><span class="line">    proucer = <span class="string">&quot;ITHEIMA&quot;</span> <span class="comment">#复写父类属性</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">ca11_by_5g</span>(<span class="params">self</span>): <span class="comment">#复写父类方法</span></span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">&quot;子类的5g通话&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="17-4-5-调用父类成员（在子类内部）"><a href="#17-4-5-调用父类成员（在子类内部）" class="headerlink" title="17-4-5 调用父类成员（在子类内部）"></a>17-4-5 调用父类成员（在子类内部）</h3><p>一旦复写父类成员，那么类对象调用成员的时候，就会调用复写后的新成员。</p>
<p>如果需要使用被复写的父类的成员，需要特殊的调用方式：</p>
<ul>
<li><p>方式1:</p>
<ul>
<li><p>调用父类成员</p>
<ul>
<li><p>使用成员变量：父类名 .成员变量</p>
</li>
<li><p>使用成员方法：父类名 .成员方法 ( self )</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>方式2:</p>
<ul>
<li>使用 super( ) 调用父类成员<ul>
<li>使用成员变量：super( ) .成员变量</li>
<li>使用成员方法：super( ) .成员方法( )</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>:</span><br><span class="line">    IMEI = <span class="literal">None</span> <span class="comment">#序列号</span></span><br><span class="line">	producer = <span class="string">&quot;ITCAST&quot;</span> <span class="comment">#厂商</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">ca11_by_5g</span>(<span class="params">se1f</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类的5g通话&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myphone</span>(<span class="title class_ inherited__">phone</span>):</span><br><span class="line">    proucer = <span class="string">&quot;ITHEIMA&quot;</span> <span class="comment">#厂商</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">ca11_by_5g</span>(<span class="params">se1f</span>):</span><br><span class="line">		<span class="comment">#方式1调用父类成员</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;父类的品牌是:<span class="subst">&#123;Phone.producer&#125;</span>&quot;</span>)</span><br><span class="line">        Phone.ca11_by_5g(se1f)</span><br><span class="line">        </span><br><span class="line">		<span class="comment">#方式2调用父类成员</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;父类的品牌足:<span class="subst">&#123;<span class="built_in">super</span>().producer&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().ca11_by_5g()</span><br><span class="line">        </span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;子类的5g通话&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="17-5-多态"><a href="#17-5-多态" class="headerlink" title="17-5 多态"></a>17-5 多态</h2><h3 id="17-5-1-介绍"><a href="#17-5-1-介绍" class="headerlink" title="17-5-1 介绍"></a>17-5-1 介绍</h3><p>什么是多态：</p>
<ul>
<li>多态指的是，同一个行为，使用不同的对象获得不同的状态。如，定义函数（方法），通过类型注解声明需要父类对象，实际传入子类对象进行工作，从而获得不同的工作状态。</li>
</ul>
<p>什么是抽象类（接口）：</p>
<ul>
<li>包含抽象方法的类，称之为抽象类。</li>
<li>抽象方法是指：没有具体实现的方法（pass）称之为抽象方法。</li>
</ul>
<p>抽象类的作用：</p>
<ul>
<li>多用于做顶层设计（设计标准），以便子类做具体实现。也是对子类的一种软性约束，要求子类必须复写（实现）父类的一些方法并配合多态使用，获得不同的工作状态。</li>
</ul>
<h3 id="17-5-2-实例"><a href="#17-5-2-实例" class="headerlink" title="17-5-2 实例"></a>17-5-2 实例</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AC</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">cool_wind</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;制冷&quot;&quot;&quot;</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">hot_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;制热&quot;&quot;&quot;</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">swing_l_r</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;左右摆风&quot;&quot;&quot;</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Midea_AC</span>(<span class="title class_ inherited__">AC</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">cool_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的空调核心制冷科技&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">hot_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的空调电热丝加热&quot;</span>)</span><br><span class="line">	</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的空调无风感左右摆风&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GREE_AC</span>(<span class="title class_ inherited__">AC</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">cool_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;格力空调变频省电制冷&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">hot_wind</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;格力空调电热丝加热&quot;</span>)</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">swing_l_r</span>(<span class="params">self</span>):   </span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;格力空调静音左右摆风&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#配合多态，完成</span></span><br><span class="line"><span class="comment">#抽象的父类设计(设计标准)</span></span><br><span class="line"><span class="comment">#具体的子类实现(实现标准)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">ac: Ac</span>):</span><br><span class="line">    ac.cool_wind()</span><br><span class="line">    </span><br><span class="line">midea_ac = Midea_AC()</span><br><span class="line">gree_ac = GREE_AC()</span><br><span class="line"></span><br><span class="line">make_cool(midea_ac) <span class="comment"># 输出:美的空调制冷</span></span><br><span class="line">make_cool(gree_ac) <span class="comment"># 输出:格力空调制冷</span></span><br></pre></td></tr></table></figure></div>

<h2 id="17-6-类型注解"><a href="#17-6-类型注解" class="headerlink" title="17-6 类型注解"></a>17-6 类型注解</h2><h3 id="17-6-1-介绍"><a href="#17-6-1-介绍" class="headerlink" title="17-6-1 介绍"></a>17-6-1 介绍</h3><p>类型注解只是提示性的，并非决定性的。</p>
<h3 id="17-6-2-变量"><a href="#17-6-2-变量" class="headerlink" title="17-6-2 变量"></a>17-6-2 变量</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：变量:类型</span></span><br><span class="line">my_1ist: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">my_tuple: <span class="built_in">tuple</span>[<span class="built_in">str</span>,<span class="built_in">int</span>,<span class="built_in">bool</span>] = (<span class="string">&quot;itheima&quot;</span>, <span class="number">666</span>, <span class="literal">True</span>)</span><br><span class="line">my_set: <span class="built_in">set</span>[<span class="built_in">int</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">my_dict: <span class="built_in">dict</span>[<span class="built_in">str</span>,<span class="built_in">int</span>] = &#123;<span class="string">&quot;itheima&quot;</span>:<span class="number">666</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#注意:</span></span><br><span class="line"><span class="comment">#元组类型设置类型详细注解，需要将每一个元素都标记出来</span></span><br><span class="line"><span class="comment">#字典类型设置类型详细注解，需要2个类型，第一个是key，第二个是value</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：# type:类型（在注释中进行类型注解）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line">var_1 = random.randint(<span class="number">1</span>,<span class="number">10</span>) <span class="comment"># type: <span class="built_in">int</span></span></span><br><span class="line">var_2 = json.loads(data) <span class="comment"># type: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]</span></span><br><span class="line">var_3 = func() <span class="comment"># type: student</span></span><br></pre></td></tr></table></figure></div>

<h3 id="17-6-3-函数和方法"><a href="#17-6-3-函数和方法" class="headerlink" title="17-6-3 函数和方法"></a>17-6-3 函数和方法</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数和方法的形参类型注解语法:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数方法名</span>(<span class="params">形参名:类型, 形参名:类型, ......</span>):</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x:<span class="built_in">int</span>, y:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">data:<span class="built_in">list</span></span>):</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">add() <span class="comment">#提示参数的类型</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">同时，函数(方法)的返回值也是可以添加类型注解的。</span><br><span class="line">语法如下:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数方法名</span>(<span class="params">形参:类型, 形参:类型, ......</span>) -&gt; 返回值类型:</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div>

<h3 id="17-6-4-Union类型"><a href="#17-6-4-Union类型" class="headerlink" title="17-6-4 Union类型"></a>17-6-4 Union类型</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Union联合类型注解，在变量注解、函数(方法)形参和返回值注解中，均可使用。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line">my_list: <span class="built_in">list</span>[<span class="type">Union</span>(<span class="built_in">int</span>, <span class="built_in">str</span>)] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;itcast&quot;</span>, <span class="string">&quot;itheima&quot;</span>]</span><br><span class="line">my_dict: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]] = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;周杰轮&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">31</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">data: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>] -&gt; <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]:</span></span><br><span class="line"><span class="params">	<span class="keyword">pass</span>   </span></span><br></pre></td></tr></table></figure></div>

<h1 id="18-SQL"><a href="#18-SQL" class="headerlink" title="18- SQL"></a>18- SQL</h1><h2 id="18-1-介绍"><a href="#18-1-介绍" class="headerlink" title="18-1 介绍"></a>18-1 介绍</h2><p>数据库：</p>
<ul>
<li>按照 库 -&gt; 表 -&gt; 数据 三个层级组织数据。</li>
</ul>
<p>SQL的语法特征：</p>
<ul>
<li>SQL语言，大小写不敏感。</li>
<li>SQL可以单行或多行书写，最后以 ; 号结束。</li>
<li>SQL支持注释：<ul>
<li>单行注释：–注释内容（–后面一定要有一个空格）</li>
<li>单行注释：#注释内容（#后面可以不加空格，推荐加上）</li>
<li>多行注释：&#x2F;* 注释内容 *&#x2F;</li>
</ul>
</li>
</ul>
<h2 id="18-2-DDL"><a href="#18-2-DDL" class="headerlink" title="18-2 DDL"></a>18-2 DDL</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查看数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"></span><br><span class="line"><span class="comment">--使用数据库</span></span><br><span class="line">USE 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称 [CHARSET UTF8];</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查看当前使用的数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"></span><br><span class="line"><span class="comment">--查看有哪些表</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES; <span class="comment">--注意:需要先选择教据库哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	列名称 列类型,</span><br><span class="line">	列名称 列类型,</span><br><span class="line">    ......</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名称;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">--列类型有</span></span><br><span class="line"><span class="type">int</span> <span class="comment">--整数</span></span><br><span class="line"><span class="type">float</span> <span class="comment">--浮点数</span></span><br><span class="line"><span class="type">varchar</span>(长度) <span class="comment">--文本，长度为数字，做最大长度限制</span></span><br><span class="line"><span class="type">date</span> <span class="comment">--日期类型</span></span><br><span class="line"><span class="type">timestamp</span> <span class="comment">--时间藏类型</span></span><br></pre></td></tr></table></figure></div>

<h2 id="18-3-DML"><a href="#18-3-DML" class="headerlink" title="18-3 DML"></a>18-3 DML</h2><p>注意：</p>
<ul>
<li>字符串的值，出现在SQL语句中，必须要用单引号包围起来。</li>
</ul>
<h3 id="18-3-1-数据插入"><a href="#18-3-1-数据插入" class="headerlink" title="18-3-1 数据插入"></a>18-3-1 数据插入</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--基础语法:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表[(列<span class="number">1</span>, 列<span class="number">2</span>, ......, 列N)] <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ......, 值N)[, (值<span class="number">1</span>, 值<span class="number">2</span>, ......, 值N), ......, (值<span class="number">1</span>,值<span class="number">2</span>, ......, 值N)]</span><br><span class="line"></span><br><span class="line"><span class="comment">--实例:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	name VARCHART(<span class="number">20</span>),</span><br><span class="line">	age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#仅插入id列数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id) <span class="keyword">VALUES</span> (<span class="number">10001</span>),(<span class="number">10002</span>),(<span class="number">10003</span>)</span><br><span class="line">#插入全部列数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,name,age) <span class="keyword">VALUES</span> (<span class="number">10001</span>,<span class="string">&#x27;周杰轮&#x27;</span>,<span class="number">31</span>),(<span class="number">10002</span>,<span class="string">&#x27;王力鸿&#x27;</span>,<span class="number">33</span>),(<span class="number">10003</span>,<span class="string">&#x27;林俊节&#x27;</span>,<span class="number">26</span>)</span><br><span class="line">#插入全部列数据，快捷写法</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="number">10001</span>,<span class="string">&#x27;周杰轮&#x27;</span>,<span class="number">31</span>),(<span class="number">10002</span>,<span class="string">&#x27;王力鸿&#x27;</span>,<span class="number">33</span>)，(<span class="number">10003</span>,<span class="string">&#x27;林俊节&#x27;</span>,<span class="number">26</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="18-3-2-数据删除"><a href="#18-3-2-数据删除" class="headerlink" title="18-3-2 数据删除"></a>18-3-2 数据删除</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--基础语法:</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 [<span class="keyword">WHERE</span> 条件判断]</span><br><span class="line"></span><br><span class="line">#条件判断:</span><br><span class="line">列 操作符 值</span><br><span class="line">操作符:<span class="operator">=</span> <span class="operator">&lt;</span> <span class="operator">&gt;</span> <span class="operator">&lt;=</span> <span class="operator">&gt;=</span> <span class="operator">!=</span> 等等</span><br><span class="line"></span><br><span class="line"><span class="comment">--实例:</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="number">10001</span>,<span class="string">&#x27;周杰轮&#x27;</span>,<span class="number">31</span>),(<span class="number">10002</span>,<span class="string">&#x27;王力鸿&#x27;</span>,<span class="number">33</span>),(<span class="number">10003</span>,<span class="string">&#x27;林俊节&#x27;</span>,<span class="number">35</span>),(<span class="number">10004</span>,<span class="string">&#x27;张学油&#x27;</span>,<span class="number">36</span>),(<span class="number">10005</span>,<span class="string">&#x27;刘德滑&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">#删除name为林俊节的数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;林俊节&#x27;</span>; #注意，不要忘记<span class="string">&#x27;&#x27;</span></span><br><span class="line">#删除age <span class="operator">&gt;</span> <span class="number">33</span> 的数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">33</span>;</span><br><span class="line">#删除全部数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure></div>

<h3 id="18-3-3-数据更新"><a href="#18-3-3-数据更新" class="headerlink" title="18-3-3 数据更新"></a>18-3-3 数据更新</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--基础语法:</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列<span class="operator">=</span>值 [<span class="keyword">WHERE</span> 条件判断];</span><br><span class="line"></span><br><span class="line">#条件判断:</span><br><span class="line">列 操作符 值</span><br><span class="line">操作符:<span class="operator">=</span> <span class="operator">&lt;</span> <span class="operator">&gt;</span> <span class="operator">&lt;=</span> <span class="operator">&gt;=</span> <span class="operator">!=</span> 等等</span><br><span class="line"></span><br><span class="line"><span class="comment">--实例:</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">10001</span>,<span class="string">&#x27;周杰轮&#x27;</span>,<span class="number">31</span>),(<span class="number">10002</span>,<span class="string">&#x27;王力鸿&#x27;</span>,<span class="number">33</span>),(<span class="number">10003</span>,<span class="string">&#x27;林俊节&#x27;</span>,<span class="number">35</span>),(<span class="number">10004</span>,<span class="string">&#x27;张学油&#x27;</span>,<span class="number">36</span>),(<span class="number">10005</span>,<span class="string">&#x27;刘德滑&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">#修改id为<span class="number">10001</span>的name为陈一讯</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;陈一讯&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">10001</span>;</span><br><span class="line">#修改全部数据的age为<span class="number">11</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">11</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="18-4-DQL"><a href="#18-4-DQL" class="headerlink" title="18-4 DQL"></a>18-4 DQL</h2><h3 id="18-4-1-查询"><a href="#18-4-1-查询" class="headerlink" title="18-4-1 查询"></a>18-4-1 查询</h3><h4 id="18-4-1-1-基础查询"><a href="#18-4-1-1-基础查询" class="headerlink" title="18-4-1-1 基础查询"></a>18-4-1-1 基础查询</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--基础语法:</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表<span class="operator">|</span><span class="operator">*</span> <span class="keyword">FROM</span> 表</span><br><span class="line"></span><br><span class="line"><span class="comment">--实例:</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="number">10001</span>,<span class="string">&#x27;周杰轮&#x27;</span>,<span class="number">31</span>),(<span class="number">10002</span>,<span class="string">&#x27;王力鸿&#x27;</span>,<span class="number">33</span>),(<span class="number">10003</span>,<span class="string">&#x27;林俊节&#x27;</span>,<span class="number">35</span>),(<span class="number">10004</span>,<span class="string">&#x27;张学油&#x27;</span>,<span class="number">36</span>),(<span class="number">10005</span>,<span class="string">&#x27;刘德滑&#x27;</span>,<span class="number">30</span>);</span><br><span class="line">                                                                                       </span><br><span class="line">#查询id和name两个列</span><br><span class="line"><span class="keyword">SELEcT</span> id,name <span class="keyword">FROM</span> student;</span><br><span class="line">#查询全部列</span><br><span class="line"><span class="keyword">SELEcT</span> id,name,age <span class="keyword">FROM</span> student;</span><br><span class="line">#查询全部列，快捷写法</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure></div>

<h4 id="18-4-1-2-过滤查询"><a href="#18-4-1-2-过滤查询" class="headerlink" title="18-4-1-2 过滤查询"></a>18-4-1-2 过滤查询</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--基础语法:</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表<span class="operator">|</span><span class="operator">*</span> <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 条件判断</span><br><span class="line"></span><br><span class="line">#条件判断:</span><br><span class="line">列 操作符 值</span><br><span class="line">操作符:<span class="operator">=</span> <span class="operator">&lt;</span> <span class="operator">&gt;</span> <span class="operator">&lt;=</span> <span class="operator">&gt;=</span> <span class="operator">!=</span> 等等</span><br><span class="line"></span><br><span class="line"><span class="comment">--实例:</span></span><br><span class="line">#查询id和name两个列，年龄小于<span class="number">33</span>岁</span><br><span class="line"><span class="keyword">SELECT</span> id,name <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">33</span>;</span><br><span class="line">#查询全部列，id等于<span class="number">10003</span></span><br><span class="line"><span class="keyword">SELECT</span> id,name,age <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">10003</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="18-4-2-分组聚合"><a href="#18-4-2-分组聚合" class="headerlink" title="18-4-2 分组聚合"></a>18-4-2 分组聚合</h3><h4 id="18-4-2-1-语法"><a href="#18-4-2-1-语法" class="headerlink" title="18-4-2-1 语法"></a>18-4-2-1 语法</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="operator">|</span>聚合函数 <span class="keyword">FROM</span> 表 [<span class="keyword">WHERE</span> 条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 列</span><br><span class="line"></span><br><span class="line"><span class="comment">--聚合函数有:</span></span><br><span class="line"><span class="built_in">SUM</span>(列) 求和</span><br><span class="line"><span class="built_in">AVG</span>(列) 求平均值</span><br><span class="line"><span class="built_in">MIN</span>(列) 求最小值</span><br><span class="line"><span class="built_in">MAX</span>(列) 求最大值</span><br><span class="line"><span class="built_in">COUNT</span>(列<span class="operator">|</span><span class="operator">*</span>) 求数量</span><br></pre></td></tr></table></figure></div>

<h4 id="18-4-2-2-注意"><a href="#18-4-2-2-注意" class="headerlink" title="18-4-2-2 注意"></a>18-4-2-2 注意</h4><p>GROUP BY 中出现了哪个列，哪个列才能出现在 SELECT 中的非聚合中。</p>
<h3 id="18-4-3-排序"><a href="#18-4-3-排序" class="headerlink" title="18-4-3 排序"></a>18-4-3 排序</h3><h4 id="18-4-3-1-基础语法"><a href="#18-4-3-1-基础语法" class="headerlink" title="18-4-3-1 基础语法"></a>18-4-3-1 基础语法</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">可以对查询的结果，使用 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 关键字，指定某个列进行排序，语法:</span><br><span class="line"><span class="keyword">SELECT</span> 列<span class="operator">|</span>聚合函数<span class="operator">|</span><span class="operator">*</span> <span class="keyword">FROM</span> 表</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]</span><br><span class="line"></span><br><span class="line">演示:</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTs</span> student;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	age <span class="type">INT</span>,</span><br><span class="line">	gender <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="number">10001</span>,<span class="string">&#x27;周杰轮&#x27;</span>,<span class="number">31</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="number">10002</span>,<span class="string">&#x27;王力鸿&#x27;</span>,<span class="number">33</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="number">10003</span>,<span class="string">&#x27;蔡依琳&#x27;</span>,<span class="number">35</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">(<span class="number">10004</span>,<span class="string">&#x27;林志灵&#x27;</span>,<span class="number">36</span>,<span class="string">&#x27;女&#x27;</span>),(<span class="number">10005</span>,<span class="string">&#x27;刘德滑&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#按年龄隆序排序结果</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br><span class="line">#按ID升序排序结果</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">31</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure></div>

<h4 id="18-4-3-2-排序和分页限制语法"><a href="#18-4-3-2-排序和分页限制语法" class="headerlink" title="18-4-3-2 排序和分页限制语法"></a>18-4-3-2 排序和分页限制语法</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="operator">|</span>聚合函数<span class="operator">|</span><span class="operator">*</span> <span class="keyword">FROM</span> 表</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]</span><br><span class="line">LIMIT n[, m] #如果只有n，则是截取n个数据；如果有n和m，则是跳过n个数据，截取m个数据。</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<ul>
<li>WHERE、GROUP BY、ORDER BY、LIMIT均可按需求省略。</li>
<li>SELECT和 FROM 是必写的。</li>
<li>执行顺序：<ul>
<li>FROM -&gt; WHERE -&gt; GROUP BY和聚合函数 -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT。</li>
</ul>
</li>
</ul>
<h2 id="18-5-python操作"><a href="#18-5-python操作" class="headerlink" title="18-5 python操作"></a>18-5 python操作</h2><h3 id="18-5-1-创建到数据库的链接"><a href="#18-5-1-创建到数据库的链接" class="headerlink" title="18-5-1 创建到数据库的链接"></a>18-5-1 创建到数据库的链接</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">#获取到MySQL数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">	host=<span class="string">&#x27;localhost&#x27;</span>, <span class="comment">#主机名(或IP地址)</span></span><br><span class="line">    port=<span class="number">3306</span>, <span class="comment">#端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>, <span class="comment">#账户名</span></span><br><span class="line">	password=<span class="string">&#x27;123456&#x27;</span> <span class="comment">#密码</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印MySQL数据库软件信息</span></span><br><span class="line"><span class="built_in">print</span>(conn.get_server_info())</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭到数据库的链接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></div>

<h3 id="18-5-2-执行非查询性质的SQL语句"><a href="#18-5-2-执行非查询性质的SQL语句" class="headerlink" title="18-5-2 执行非查询性质的SQL语句"></a>18-5-2 执行非查询性质的SQL语句</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">#获取到MySQL数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">	host=<span class="string">&#x27;1oca1host&#x27;</span>, <span class="comment">#主机名(或IP地址)</span></span><br><span class="line">    port=<span class="number">3306</span>, <span class="comment">#端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>, <span class="comment">#账户名</span></span><br><span class="line">    password=<span class="string">&#x27;123456&#x27;</span> <span class="comment">#密码</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">conn.select_db(<span class="string">&quot;test&quot;</span>) <span class="comment">#先选择数据库</span></span><br><span class="line"><span class="comment">#使用游标对象，执行sql语句</span></span><br><span class="line">cursor.execute(<span class="string">&quot;CREATE TABLE test_pymysql(id INT, info VARCHAR(255))&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭到数据库的链接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></div>

<h3 id="18-5-3-执行查询性质的SQL语句"><a href="#18-5-3-执行查询性质的SQL语句" class="headerlink" title="18-5-3 执行查询性质的SQL语句"></a>18-5-3 执行查询性质的SQL语句</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">#获取到MySQL数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">	host=<span class="string">&#x27;1oca1host&#x27;</span>, <span class="comment">#主机名(或IP地址)</span></span><br><span class="line">    port=<span class="number">3306</span>, <span class="comment">#端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>, <span class="comment">#账户名</span></span><br><span class="line">    password=<span class="string">&#x27;123456&#x27;</span> <span class="comment">#密码</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">conn.select_db(<span class="string">&quot;test&quot;</span>) <span class="comment">#先选择数据库</span></span><br><span class="line"><span class="comment">#使用游标对象，执行sql语句</span></span><br><span class="line">cursor.execute(<span class="string">&quot;SELECT * FROM student&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取查询结果</span></span><br><span class="line">results: <span class="built_in">tuple</span> = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">	<span class="built_in">print</span>(r)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#关闭到数据库的链接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<p>通过连接对象调用cursor ( ) 方法，得到游标对象</p>
<ul>
<li>游标对象 .execute ( ) 执行SQL语句</li>
<li>游标对象 .fetchall ( ) 得到全部的查询结果封装入元组内</li>
</ul>
<h3 id="18-5-4-提交"><a href="#18-5-4-提交" class="headerlink" title="18-5-4 提交"></a>18-5-4 提交</h3><h4 id="18-5-4-1-commit-提交"><a href="#18-5-4-1-commit-提交" class="headerlink" title="18-5-4-1 commit 提交"></a>18-5-4-1 commit 提交</h4><p>pymysql 库在执行对数据库有修改操作的行为时，是需要通过链接对象的 commit 成员方法来进行确认的。</p>
<p>只有确认的修改，才能生效。</p>
<h4 id="18-5-4-2-自动提交"><a href="#18-5-4-2-自动提交" class="headerlink" title="18-5-4-2 自动提交"></a>18-5-4-2 自动提交</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 构建到MySQL数据库的链接</span><br><span class="line">conn <span class="operator">=</span> Connection(</span><br><span class="line">	host<span class="operator">=</span>&quot;localhost&quot;, #主机名(IP)</span><br><span class="line">    port<span class="operator">=</span><span class="number">3306</span>, #端口</span><br><span class="line">	<span class="keyword">user</span><span class="operator">=</span>&quot;root&quot;, #账户</span><br><span class="line">	password<span class="operator">=</span>&quot;123456&quot;, #密码</span><br><span class="line">	autocommit<span class="operator">=</span><span class="literal">True</span> #设置自动提交</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h1 id="19-PySpork"><a href="#19-PySpork" class="headerlink" title="19- PySpork"></a>19- PySpork</h1><h2 id="19-1-数据输入"><a href="#19-1-数据输入" class="headerlink" title="19-1 数据输入"></a>19-1 数据输入</h2><h3 id="19-1-1-Python对象"><a href="#19-1-1-Python对象" class="headerlink" title="19-1-1 Python对象"></a>19-1-1 Python对象</h3><p>PySpark 支持通过 SparkContext 对象的 parallelize 成员方法，将 list、tuple、set、dict、str 转换为 PySpark 的 RDD 对象。</p>
<p>注意：</p>
<ul>
<li>字符串会被拆分出一个个的字符，存入 RDD 对象</li>
<li>字典仅有 key 会被存入 RDD 对象</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).\setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line">rdd = sc.parallelize(数据容器对象)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出RDD的内容</span></span><br><span class="line"><span class="built_in">print</span>(rdd.collect())</span><br></pre></td></tr></table></figure></div>

<h3 id="19-1-2-文件"><a href="#19-1-2-文件" class="headerlink" title="19-1-2 文件"></a>19-1-2 文件</h3><p>PySpark 也支持通过 SparkContext 入口对象，来读取文件，来构建出 RDD 对象。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = Sparkconf().setMaster(<span class="string">&quot;local[*]&quot;</span>).\setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line">rdd =sc.textFie(文件路径)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印RDD内容</span></span><br><span class="line"><span class="built_in">print</span>(rdd.collect())</span><br></pre></td></tr></table></figure></div>

<h2 id="19-2-数据计算"><a href="#19-2-数据计算" class="headerlink" title="19-2 数据计算"></a>19-2 数据计算</h2><h3 id="19-2-1-map"><a href="#19-2-1-map" class="headerlink" title="19-2-1 map"></a>19-2-1 map</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/288b0277-fe93-43f3-b3f9-de038815ad23-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#准备一个RDD</span></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过map方法将全部数据都乘以10</span></span><br><span class="line"><span class="comment">#def func(data):</span></span><br><span class="line"><span class="comment">#	return data *10</span></span><br><span class="line"></span><br><span class="line">rdd2 = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(rdd2.collect())</span><br><span class="line"><span class="comment">#(T)-&gt;U</span></span><br><span class="line"><span class="comment">#(T)-&gt;T</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#链式调用</span></span><br><span class="line">rdd3 = rdd2.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x+<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#组合简写</span></span><br><span class="line">rdd4 = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*<span class="number">10</span>).<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x+<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="19-2-2-flatMap"><a href="#19-2-2-flatMap" class="headerlink" title="19-2-2 flatMap"></a>19-2-2 flatMap</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5bcab126-91e3-43f1-99e3-36a4d258271b-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="19-2-3-reduceByKey"><a href="#19-2-3-reduceByKey" class="headerlink" title="19-2-3 reduceByKey"></a>19-2-3 reduceByKey</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/bbeb7e1c-29c3-4ebb-ba65-0259bb71bb9e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="19-2-4-filter"><a href="#19-2-4-filter" class="headerlink" title="19-2-4 filter"></a>19-2-4 filter</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ef7ef679-7060-4818-b230-1c5132ab3ee0-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="19-2-5-distinct"><a href="#19-2-5-distinct" class="headerlink" title="19-2-5 distinct"></a>19-2-5 distinct</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/523a1565-c8b4-423d-9efa-770d4b78a43a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="19-2-6-sortBy"><a href="#19-2-6-sortBy" class="headerlink" title="19-2-6 sortBy"></a>19-2-6 sortBy</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/61b7395d-aa7c-46c5-b20c-4a8b97db298b-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="19-3-数据输出"><a href="#19-3-数据输出" class="headerlink" title="19-3 数据输出"></a>19-3 数据输出</h2><h3 id="19-3-1-输出为Python对象"><a href="#19-3-1-输出为Python对象" class="headerlink" title="19-3-1 输出为Python对象"></a>19-3-1 输出为Python对象</h3><h4 id="19-3-1-1-collect算子"><a href="#19-3-1-1-collect算子" class="headerlink" title="19-3-1-1 collect算子"></a>19-3-1-1 collect算子</h4><p>功能：将 RDD 各个分区内的数据，统一收集到 Driver 中，形成一个 List 对象</p>
<p>用法：rdd.collect ( )</p>
<p>返回值：是一个list</p>
<h4 id="19-3-1-2-take算子"><a href="#19-3-1-2-take算子" class="headerlink" title="19-3-1-2 take算子"></a>19-3-1-2 take算子</h4><p>功能：取 RDD 的前 N 个元素，组合成 list 返回</p>
<p>用法：sc.parallelize ( [ 3,2,1,4,5,6 ] ).take ( 5 )</p>
<p>结果：[3，2，1，4，5]</p>
<h4 id="19-3-1-3-count算子"><a href="#19-3-1-3-count算子" class="headerlink" title="19-3-1-3 count算子"></a>19-3-1-3 count算子</h4><p>功能：计算 RDD 有多少条数据，返回值是一个数字</p>
<p>用法：sc.parallelize ( [ 3,2,1,4,5,6 ] ).count ( )</p>
<p>结果：6</p>
<h4 id="19-3-1-4-reduce算子"><a href="#19-3-1-4-reduce算子" class="headerlink" title="19-3-1-4 reduce算子"></a>19-3-1-4 reduce算子</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d88002f0-f0da-4264-b12e-b4a70410f47b-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="19-3-2-输出到文件"><a href="#19-3-2-输出到文件" class="headerlink" title="19-3-2 输出到文件"></a>19-3-2 输出到文件</h3><h4 id="19-3-2-1-修改RDD分区为1个"><a href="#19-3-2-1-修改RDD分区为1个" class="headerlink" title="19-3-2-1 修改RDD分区为1个"></a>19-3-2-1 修改RDD分区为1个</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240511143925820.png"
                      alt="image-20240511143925820"
                ></li>
</ul>
<h4 id="19-3-2-2-RDD输出到文件的方法"><a href="#19-3-2-2-RDD输出到文件的方法" class="headerlink" title="19-3-2-2 RDD输出到文件的方法"></a>19-3-2-2 RDD输出到文件的方法</h4><p>rdd.saveAsTextFile ( 路径 )</p>
<p>输出的结果是一个文件夹</p>
<p>有几个分区就输出多少个结果文件</p>
<h4 id="19-3-2-3-如何修改RDD分区"><a href="#19-3-2-3-如何修改RDD分区" class="headerlink" title="19-3-2-3 如何修改RDD分区"></a>19-3-2-3 如何修改RDD分区</h4><p>SparkConf 对象设置 conf.set (“spark.default.parallelism”，”1”）</p>
<p>创建RDD的时候，sc.parallelize 方法传入 numSlices 参数为 1</p>
<h1 id="20-高阶"><a href="#20-高阶" class="headerlink" title="20- 高阶"></a>20- 高阶</h1><h2 id="20-1-闭包"><a href="#20-1-闭包" class="headerlink" title="20-1 闭包"></a>20-1 闭包</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/14b83c50-eb31-40a3-9b49-0a6d863ce03b-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/79c10b87-2deb-47a0-90c8-28cd416e8538-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p>结果：20    30</p>
</li>
</ul>
<h2 id="20-2-装饰器"><a href="#20-2-装饰器" class="headerlink" title="20-2 装饰器"></a>20-2 装饰器</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/534555cc-6480-448d-abee-0cb76e51534f-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="20-3-设计模式"><a href="#20-3-设计模式" class="headerlink" title="20-3 设计模式"></a>20-3 设计模式</h2><h3 id="20-3-1-单例模式"><a href="#20-3-1-单例模式" class="headerlink" title="20-3-1 单例模式"></a>20-3-1 单例模式</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3667556c-61b1-436c-8d35-f3f461d025b5-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="20-3-2-工厂模式"><a href="#20-3-2-工厂模式" class="headerlink" title="20-3-2 工厂模式"></a>20-3-2 工厂模式</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c3010b9b-448a-456c-b72b-15af70826d21-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="20-4-多线程"><a href="#20-4-多线程" class="headerlink" title="20-4 多线程"></a>20-4 多线程</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3772c3ed-e033-4ea8-82f7-dd89e203173a-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/09feff2d-7948-4f2d-8932-e6eb617a2719-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h2 id="20-5-socket服务端"><a href="#20-5-socket服务端" class="headerlink" title="20-5 socket服务端"></a>20-5 socket服务端</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f209c4d3-aa19-4b1a-b049-aaa761135f80-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="20-6-socket客户端"><a href="#20-6-socket客户端" class="headerlink" title="20-6 socket客户端"></a>20-6 socket客户端</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/0db0a86c-6fea-45f5-9b0d-6b7ae62a9c5c-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="20-7-正则表达式"><a href="#20-7-正则表达式" class="headerlink" title="20-7 正则表达式"></a>20-7 正则表达式</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/23a283e3-33f4-409c-ae9d-1d140f855ff3-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/eb0f609b-8665-4b92-8b16-f259cd6d7182-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c26ae980-1420-43c5-91a5-c6a4b2e449dc-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d127a325-e85f-4d91-a2bc-c2ec62094f16-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>课程笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>RuoYi框架实战开发</title>
    <url>/2024/07/12/RuoYi%E6%A1%86%E6%9E%B6%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1. 项目介绍"></a>1. 项目介绍</h1><h2 id="1-1-是什么"><a href="#1-1-是什么" class="headerlink" title="1.1 是什么"></a>1.1 是什么</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712171717250.png"
                      alt="image-20240712171717250"
                ></p>
<h2 id="1-2-售货机术语"><a href="#1-2-售货机术语" class="headerlink" title="1.2 售货机术语"></a>1.2 售货机术语</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712171750178.png"
                      alt="image-20240712171750178"
                ></p>
<h2 id="1-3-角色与功能"><a href="#1-3-角色与功能" class="headerlink" title="1.3 角色与功能"></a>1.3 角色与功能</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712172145708.png"
                      alt="image-20240712172145708"
                ></p>
<h2 id="1-4-业务流程"><a href="#1-4-业务流程" class="headerlink" title="1.4 业务流程"></a>1.4 业务流程</h2><ul>
<li>平台管理员</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712192010840.png"
                      alt="image-20240712192010840"
                ></p>
<h2 id="1-5-库表设计"><a href="#1-5-库表设计" class="headerlink" title="1.5 库表设计"></a>1.5 库表设计</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712192432967.png"
                      alt="image-20240712192432967"
                ></p>
<h2 id="1-6-页面原型"><a href="#1-6-页面原型" class="headerlink" title="1.6 页面原型"></a>1.6 页面原型</h2><ul>
<li><a class="link"   href="https://codesign.qq.com/s/426304924036117" >帝可得 - 产品原型 - 腾讯 CoDesign (qq.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h1 id="2-初始AI"><a href="#2-初始AI" class="headerlink" title="2. 初始AI"></a>2. 初始AI</h1><h2 id="2-1-AIGC"><a href="#2-1-AIGC" class="headerlink" title="2.1 AIGC"></a>2.1 AIGC</h2><ul>
<li>AIGC（AI Generated content）：是AI领域的一个应用分支，专注于利用AI技术自动生成内容。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712193042657.png"
                      alt="image-20240712193042657"
                ></p>
<ul>
<li>国内常见的通用大模型（AGI）产品：文心一言、讯飞星火、通义千问、KIMI。</li>
</ul>
<h2 id="2-2-提示工程"><a href="#2-2-提示工程" class="headerlink" title="2.2 提示工程"></a>2.2 提示工程</h2><h3 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1 概念"></a>2.2.1 概念</h3><ul>
<li>提示工程（Prompt Engineering）也被称为上下文提示。设计和优化输入文本（Prompt）来引导AI模型生成预期的输出。</li>
</ul>
<h3 id="2-2-2-Prompt的组成"><a href="#2-2-2-Prompt的组成" class="headerlink" title="2.2.2 Prompt的组成"></a>2.2.2 Prompt的组成</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712194115753.png"
                      alt="image-20240712194115753"
                ></p>
<h3 id="2-2-3-常见的编程相关的Prompt"><a href="#2-2-3-常见的编程相关的Prompt" class="headerlink" title="2.2.3 常见的编程相关的Prompt"></a>2.2.3 常见的编程相关的Prompt</h3><h4 id="2-2-3-1-表结构"><a href="#2-2-3-1-表结构" class="headerlink" title="2.2.3.1 表结构"></a>2.2.3.1 表结构</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712195440974.png"
                      alt="image-20240712195440974"
                ></p>
<h4 id="2-2-3-2-生成数据库说明文档"><a href="#2-2-3-2-生成数据库说明文档" class="headerlink" title="2.2.3.2 生成数据库说明文档"></a>2.2.3.2 生成数据库说明文档</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712195539500.png"
                      alt="image-20240712195539500"
                ></p>
<h4 id="2-2-3-3-生成代码"><a href="#2-2-3-3-生成代码" class="headerlink" title="2.2.3.3 生成代码"></a>2.2.3.3 生成代码</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712195852429.png"
                      alt="image-20240712195852429"
                ></p>
<h4 id="2-2-3-4-生成代码流程图"><a href="#2-2-3-4-生成代码流程图" class="headerlink" title="2.2.3.4 生成代码流程图"></a>2.2.3.4 生成代码流程图</h4><ul>
<li><p>你是一个软件工程师，为了方便理解代码执行流程，需要给出代码执行的流程图，代码如下：</p>
</li>
<li><p>代码内容</p>
</li>
<li><p>输出：请使用 mermaid 语言来描述这个方法的流程</p>
</li>
<li><p>注意：生成的 mermaid 语言可以使用 markdown 将其转为图像。</p>
</li>
</ul>
<h1 id="3-项目搭建"><a href="#3-项目搭建" class="headerlink" title="3. 项目搭建"></a>3. 项目搭建</h1><h2 id="3-1-后端"><a href="#3-1-后端" class="headerlink" title="3.1 后端"></a>3.1 后端</h2><ul>
<li>Git克隆并初始化项目（点击 从VCS获取，输入 仓库地址，选择 目录，打开 项目）（多了 dkd-manage 子模块）</li>
<li>MySQL导入与配置</li>
<li>启动Redis与配置</li>
<li>运行后端项目</li>
</ul>
<h2 id="3-2-前端"><a href="#3-2-前端" class="headerlink" title="3.2 前端"></a>3.2 前端</h2><ul>
<li><p>Git克隆并初始化项目（点击 克隆仓库，输入 仓库地址，选择 下载地址，打开 项目）</p>
</li>
<li><p>安装依赖（npm install）</p>
</li>
<li><p>运行前端项目</p>
</li>
</ul>
<h1 id="4-点位管理"><a href="#4-点位管理" class="headerlink" title="4. 点位管理"></a>4. 点位管理</h1><h2 id="4-1-需求说明"><a href="#4-1-需求说明" class="headerlink" title="4.1 需求说明"></a>4.1 需求说明</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712202906881.png"
                      alt="image-20240712202906881"
                ></p>
<h2 id="4-2-库表设计"><a href="#4-2-库表设计" class="headerlink" title="4.2 库表设计"></a>4.2 库表设计</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712214833188.png"
                      alt="image-20240712214833188"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712215457075.png"
                      alt="image-20240712215457075"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712215940131.png"
                      alt="image-20240712215940131"
                ></p>
<h2 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h2>]]></content>
      <categories>
        <category>RuoYi</category>
        <category>RuoYi框架实战开发</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT协议</title>
    <url>/2024/05/15/MQTT%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="—–Python—–"><a href="#—–Python—–" class="headerlink" title="—–Python—–"></a>—–Python—–</h1><h1 id="1-三种身份"><a href="#1-三种身份" class="headerlink" title="1- 三种身份"></a>1- 三种身份</h1><ul>
<li><p>发布者（Publisher）</p>
</li>
<li><p>服务器（Broker）</p>
</li>
<li><p>订阅者（Subscriber）</p>
</li>
<li><p>他们通过主题进行链接，只要主题相同，就能传输信息。</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240515183615998.png"
                      alt="image-20240515183615998"
                ></p>
</li>
</ul>
<h1 id="2-消息结构"><a href="#2-消息结构" class="headerlink" title="2- 消息结构"></a>2- 消息结构</h1><ul>
<li><p>主题（Topic）：字符串</p>
</li>
<li><p>负载（Payload）：字符串</p>
</li>
</ul>
<h1 id="3-搭建mqtt-broker-中心服务器"><a href="#3-搭建mqtt-broker-中心服务器" class="headerlink" title="3- 搭建mqtt-broker (中心服务器)"></a>3- 搭建mqtt-broker (中心服务器)</h1><h2 id="3-1-准备"><a href="#3-1-准备" class="headerlink" title="3-1 准备"></a>3-1 准备</h2><ul>
<li>登陆一台作为服务器的 Ubuntu 主机 (本地主机或云服务器) 。</li>
</ul>
<h2 id="3-2-下载-EMQX-安装包-命令"><a href="#3-2-下载-EMQX-安装包-命令" class="headerlink" title="3-2 下载 EMQX 安装包 (命令)"></a>3-2 下载 EMQX 安装包 (命令)</h2><ul>
<li>wget <a class="link"   href="https://www.emqx.com/zh/downloads/broker/5.0.11/emqx-5.0.11-ubuntu18.04-amd64.deb" >https://www.emqx.com/zh/downloads/broker/5.0.11/emqx-5.0.11-ubuntu18.04-amd64.deb <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="3-3-安装-命令"><a href="#3-3-安装-命令" class="headerlink" title="3-3 安装 (命令)"></a>3-3 安装 (命令)</h2><ul>
<li>sudo apt install .&#x2F;emqx-5.0.11-ubuntu18.04-amd64.deb</li>
</ul>
<h2 id="3-4-运行-命令"><a href="#3-4-运行-命令" class="headerlink" title="3-4 运行 (命令)"></a>3-4 运行 (命令)</h2><ul>
<li>sudo systemctl start emqx</li>
</ul>
<h2 id="3-5-非必选-命令"><a href="#3-5-非必选-命令" class="headerlink" title="3-5 非必选 (命令)"></a>3-5 非必选 (命令)</h2><ul>
<li>sudo emqx ctl admins add [ 用户名 ] [ 用户密码 ]</li>
</ul>
<h2 id="3-6-控制台"><a href="#3-6-控制台" class="headerlink" title="3-6 控制台"></a>3-6 控制台</h2><ul>
<li>http:&#x2F;&#x2F;[ broker 的 ip ]:18083&#x2F;</li>
</ul>
<h1 id="4-mqtt接口的python实现-消息的发送端和接收端"><a href="#4-mqtt接口的python实现-消息的发送端和接收端" class="headerlink" title="4- mqtt接口的python实现 (消息的发送端和接收端)"></a>4- mqtt接口的python实现 (消息的发送端和接收端)</h1><h2 id="4-1-安装python依赖库"><a href="#4-1-安装python依赖库" class="headerlink" title="4-1 安装python依赖库"></a>4-1 安装python依赖库</h2><ul>
<li>pip install paho-mqtt</li>
</ul>
<h2 id="4-2-连接到broker"><a href="#4-2-连接到broker" class="headerlink" title="4-2 连接到broker"></a>4-2 连接到broker</h2><ul>
<li><p>1、from paho.mqtt import client as paho_mqtt_cient</p>
</li>
<li><p>2、建立Client对象</p>
<ul>
<li><p>_client &#x3D; paho_mqtt _client.Client (client _id)</p>
</li>
<li><p>client_id是它的名字</p>
</li>
</ul>
</li>
<li><p>3、链接服务器IP和端口号</p>
<ul>
<li>_client.connect (broker-ip, broker-port)</li>
<li>broker-ip：服务器IP</li>
<li>broker-port：服务器端口号，一般是1883</li>
</ul>
</li>
<li><p>4、判断是否连接成功</p>
<ul>
<li><p>先写一个回调函数</p>
<ul>
<li>def on_connect (client, userdata, flags, rc):</li>
<li>if rc &#x3D;&#x3D; 0: </li>
<li>连接上了</li>
<li>else:</li>
<li>没连接上</li>
</ul>
</li>
<li><p>然后绑定到Client</p>
<ul>
<li>_client.on_connect &#x3D; on_connect</li>
</ul>
</li>
</ul>
</li>
<li><p>5、开启线程</p>
<ul>
<li>self._client.loop_start ( )</li>
</ul>
</li>
</ul>
<h2 id="4-3-消息发送端"><a href="#4-3-消息发送端" class="headerlink" title="4-3 消息发送端"></a>4-3 消息发送端</h2><ul>
<li>result &#x3D; client.publish (topic, msg, qos, retain)<ul>
<li>topic：消息名、主题</li>
<li>msg：消息内容、负载</li>
<li>retain：状态机消息</li>
<li>返回消息状态</li>
</ul>
</li>
</ul>
<h2 id="4-4-消息接收端"><a href="#4-4-消息接收端" class="headerlink" title="4-4 消息接收端"></a>4-4 消息接收端</h2><ul>
<li>1、写一个回调函数<ul>
<li>def default_on_message (self, client, userdata, msg):</li>
<li>……</li>
<li>默认回调函数</li>
<li>print (msg.payload.decode (‘utf-8’))</li>
</ul>
</li>
<li>2、把回调函数绑定到_client.on_message<ul>
<li>self.client.on_message &#x3D; self.default_on_message</li>
</ul>
</li>
<li>3、关联到发送端消息名<ul>
<li>self.client.subscribe (topic)</li>
<li>绑定关联完成后，接收到同名消息，就会激活回调函数</li>
</ul>
</li>
<li>4、在回调函数中处理接收消息</li>
</ul>
<h2 id="4-5-关闭链接"><a href="#4-5-关闭链接" class="headerlink" title="4-5 关闭链接"></a>4-5 关闭链接</h2><ul>
<li>_client.loop_stop ( ）</li>
<li>_client.disconnect ( )</li>
</ul>
<h1 id="5-python代码"><a href="#5-python代码" class="headerlink" title="5- python代码"></a>5- python代码</h1><h2 id="5-1-发送端"><a href="#5-1-发送端" class="headerlink" title="5-1 发送端"></a>5-1 发送端</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paho.mqtt.client <span class="keyword">as</span> mqtt</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 连接成功回调</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mqtt_Publisher</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mqtt消息通讯接口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,central_ip=<span class="string">&#x27;192.168.0.205&#x27;</span>,port=<span class="number">1883</span>,node_name=<span class="string">&#x27;bci_&#x27;</span>,anonymous=<span class="literal">True</span>,timeout=<span class="number">60</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        :param central_ip: Broker的地址</span></span><br><span class="line"><span class="string">        :param port:  端口号</span></span><br><span class="line"><span class="string">        :param timeout:  连接延时</span></span><br><span class="line"><span class="string">        :param node_name: 节点名称</span></span><br><span class="line"><span class="string">        :param anonymous: 是否同时允许多个节点</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.broker_ip=central_ip</span><br><span class="line">        self.broker_port=port</span><br><span class="line">        self.timeout=timeout</span><br><span class="line">        self.connected=<span class="literal">False</span></span><br><span class="line">        self.node_name=node_name</span><br><span class="line">        <span class="keyword">if</span> anonymous:</span><br><span class="line">            self.node_name=self.node_name+<span class="built_in">str</span>(random.randint(<span class="number">100000</span>,<span class="number">999999</span>))</span><br><span class="line">        self.Start()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        开启publisher</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.client = mqtt.Client(self.node_name)     <span class="comment">#创建客户端</span></span><br><span class="line">        self.client.on_connect = self.on_connect  <span class="comment"># 指定回调函数</span></span><br><span class="line">        self.client.connect(self.broker_ip, self.broker_port, self.timeout)     <span class="comment">#开始连接</span></span><br><span class="line">        self.client.loop_start()    <span class="comment">#开启一个独立的循环通讯线程</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Publish</span>(<span class="params">self,topic,payload,qos=<span class="number">0</span>,retain=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            发送一个mqtt消息</span></span><br><span class="line"><span class="string">            :param topic: 消息名称，string类型</span></span><br><span class="line"><span class="string">            :param payload: 消息内容，string类型</span></span><br><span class="line"><span class="string">            :param qos: 消息等级</span></span><br><span class="line"><span class="string">            :retain: 状态机消息</span></span><br><span class="line"><span class="string">            :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.connected:</span><br><span class="line">            <span class="keyword">return</span> self.client.publish(topic,payload=payload,qos=qos,retain=retain)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;mqtt server not connected! you may use .Start() function to connect to server firstly.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                回调函数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_connect</span>(<span class="params">self,client, userdata, flags, rc</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            连接到broker的回调函数</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> rc==<span class="number">0</span>:</span><br><span class="line">            self.connected=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;Failed to connect mqtt server.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Mqtt_Publisher()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> p.connected:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p.Publish(<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;this is a test message&#x27;</span>)</span><br><span class="line">        p.Publish(<span class="string">&#x27;test_2&#x27;</span>,<span class="string">&#x27;this is test 2&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="5-2-接收端"><a href="#5-2-接收端" class="headerlink" title="5-2 接收端"></a>5-2 接收端</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paho.mqtt.client <span class="keyword">as</span> mqtt</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 连接成功回调</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mqtt_Subscriber</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mqtt消息通讯接口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,central_ip=<span class="string">&#x27;192.168.0.205&#x27;</span>,port=<span class="number">1883</span>,</span></span><br><span class="line"><span class="params">                 topic_name=<span class="string">&#x27;test_2&#x27;</span>,callback_func=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 node_name=<span class="string">&#x27;bci_&#x27;</span>,anonymous=<span class="literal">True</span>,timeout=<span class="number">60</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            :param central_ip: Broker的地址</span></span><br><span class="line"><span class="string">            :param port:  端口号</span></span><br><span class="line"><span class="string">            :param topic_name: 接收的消息名称</span></span><br><span class="line"><span class="string">            :param callback_func: 指定回调函数</span></span><br><span class="line"><span class="string">            :param timeout:  连接延时</span></span><br><span class="line"><span class="string">            :param node_name: 节点名称</span></span><br><span class="line"><span class="string">            :param anonymous: 是否同时允许多个节点</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.topic=topic_name</span><br><span class="line">        self.callback=callback_func</span><br><span class="line">        self.broker_ip=central_ip</span><br><span class="line">        self.broker_port=port</span><br><span class="line">        self.timeout=timeout</span><br><span class="line">        self.connected=<span class="literal">False</span></span><br><span class="line">        self.node_name=node_name</span><br><span class="line">        <span class="keyword">if</span> anonymous:</span><br><span class="line">            self.node_name=self.node_name+<span class="built_in">str</span>(random.randint(<span class="number">100000</span>,<span class="number">999999</span>))</span><br><span class="line">        self.Start()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        开启publisher</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.client = mqtt.Client(self.node_name)     <span class="comment">#创建客户端</span></span><br><span class="line">        self.client.on_connect = self.on_connect  <span class="comment"># 指定回调函数</span></span><br><span class="line">        self.client.on_message=self.default_on_message</span><br><span class="line">        self.client.connect(self.broker_ip, self.broker_port, self.timeout)     <span class="comment">#开始连接</span></span><br><span class="line">        self.client.subscribe(self.topic)</span><br><span class="line">        self.client.loop_start()    <span class="comment">#开启一个独立的循环通讯线程。</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                回调函数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default_on_message</span>(<span class="params">self,client, userdata, msg</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            默认回调函数</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(msg.payload.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_connect</span>(<span class="params">self,client, userdata, flags, rc</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            连接到broker的回调函数</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> rc==<span class="number">0</span>:</span><br><span class="line">            self.connected=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;Failed to connect mqtt server.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Mqtt_Subscriber()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> p.connected:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>

<h1 id="—–Java—–"><a href="#—–Java—–" class="headerlink" title="—–Java—–"></a>—–Java—–</h1><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1- 准备工作"></a>1- 准备工作</h1><ul>
<li><a class="link"   href="https://blog.csdn.net/weixin_44462773/article/details/135056325" >windows10-EMQX与MQTTX的安装及配置使用教程-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h1 id="2-EMQX常用命令"><a href="#2-EMQX常用命令" class="headerlink" title="2- EMQX常用命令"></a>2- EMQX常用命令</h1><ul>
<li><p>.\emqx.cmd start ：启动服务和 Erlang 节点</p>
</li>
<li><p>.\emqx.cmd stop ：停止服务和 Erlang 节点</p>
</li>
<li><p>.\emqx.cmd restart ：运行停止命令和启动命令</p>
</li>
<li><p>.\emqx.cmd ping ： 检查节点是否正在运行</p>
</li>
<li><p>.\emqx.cmd ctl ：运行管理命令</p>
</li>
<li><p>.\emqx.cmd console ：在Windows shell 中启动 Erlang 版本</p>
</li>
<li><p>.\emqx.cmd attach ：连接到正在运行的节点并打开交互式控制台</p>
</li>
<li><p>.\emqx.cmd remote_console ：与附加相同</p>
</li>
<li><p>.\emqx.cmd list ： 显示已安装的 Erlang 服务的列表</p>
</li>
<li><p>.\emqx.cmd usage ：显示可用命令</p>
</li>
</ul>
<h1 id="3-实际应用"><a href="#3-实际应用" class="headerlink" title="3- 实际应用"></a>3- 实际应用</h1><h2 id="3-1-应用场景"><a href="#3-1-应用场景" class="headerlink" title="3-1 应用场景"></a>3-1 应用场景</h2><p>硬件采集的数据传入EMQX平台(采用MQTT协议)，java通过代码连接MQTT服务器，进行采集数据接收、解析、业务处理、存储入库、数据展示。</p>
<p>MQTT 是基于 <strong>发布(Publish)&#x2F;订阅(Subscribe)</strong> 模式来进行通信及数据交换的。</p>
<h2 id="3-2-pom文件中直接引入mqtt依赖"><a href="#3-2-pom文件中直接引入mqtt依赖" class="headerlink" title="3-2 pom文件中直接引入mqtt依赖"></a>3-2 pom文件中直接引入mqtt依赖</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.integration<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-integration-mqtt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="3-2-编写MQTT工具类"><a href="#3-2-编写MQTT工具类" class="headerlink" title="3-2 编写MQTT工具类"></a>3-2 编写MQTT工具类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.siborui.dc.mqtt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.*;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MQTT工具类操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Qu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> v1.1.0 2020-01-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQTTConnect</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">HOST</span> <span class="operator">=</span> <span class="string">&quot;tcp://127.0.0.1:1883&quot;</span>; <span class="comment">//mqtt服务器的地址和端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> <span class="string">&quot;DC&quot;</span> + (<span class="type">int</span>) (Math.random() * <span class="number">100000000</span>);</span><br><span class="line">    <span class="keyword">private</span> MqttClient mqttClient;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端connect连接mqtt服务器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName     用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passWord     密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mqttCallback 回调函数</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMqttClient</span><span class="params">(String userName, String passWord, MqttCallback mqttCallback)</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        <span class="type">MqttConnectOptions</span> <span class="variable">options</span> <span class="operator">=</span> mqttConnectOptions(userName, passWord);</span><br><span class="line">        <span class="keyword">if</span> (mqttCallback == <span class="literal">null</span>) &#123;</span><br><span class="line">            mqttClient.setCallback(<span class="keyword">new</span> <span class="title class_">Callback</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mqttClient.setCallback(mqttCallback);</span><br><span class="line">        &#125;</span><br><span class="line">        mqttClient.connect(options);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MQTT连接参数设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MqttConnectOptions <span class="title function_">mqttConnectOptions</span><span class="params">(String userName, String passWord)</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        mqttClient = <span class="keyword">new</span> <span class="title class_">MqttClient</span>(HOST, clientId, <span class="keyword">new</span> <span class="title class_">MemoryPersistence</span>());</span><br><span class="line">        <span class="type">MqttConnectOptions</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttConnectOptions</span>();</span><br><span class="line">        options.setUserName(userName);</span><br><span class="line">        options.setPassword(passWord.toCharArray());</span><br><span class="line">        options.setConnectionTimeout(<span class="number">10</span>);<span class="comment">///默认：30</span></span><br><span class="line">        options.setAutomaticReconnect(<span class="literal">true</span>);<span class="comment">//默认：false</span></span><br><span class="line">        options.setCleanSession(<span class="literal">false</span>);<span class="comment">//默认：true</span></span><br><span class="line">        <span class="comment">//options.setKeepAliveInterval(20);//默认：60</span></span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭MQTT连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        mqttClient.disconnect();</span><br><span class="line">        mqttClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向某个主题发布消息 默认qos：1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic:发布的主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg：发布的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pub</span><span class="params">(String topic, String msg)</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        <span class="type">MqttMessage</span> <span class="variable">mqttMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttMessage</span>();</span><br><span class="line">        <span class="comment">//mqttMessage.setQos(2);</span></span><br><span class="line">        mqttMessage.setPayload(msg.getBytes());</span><br><span class="line">        <span class="type">MqttTopic</span> <span class="variable">mqttTopic</span> <span class="operator">=</span> mqttClient.getTopic(topic);</span><br><span class="line">        <span class="type">MqttDeliveryToken</span> <span class="variable">token</span> <span class="operator">=</span> mqttTopic.publish(mqttMessage);</span><br><span class="line">        token.waitForCompletion();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向某个主题发布消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic: 发布的主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg:   发布的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qos:   消息质量    Qos：0、1、2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pub</span><span class="params">(String topic, String msg, <span class="type">int</span> qos)</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        <span class="type">MqttMessage</span> <span class="variable">mqttMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttMessage</span>();</span><br><span class="line">        mqttMessage.setQos(qos);</span><br><span class="line">        mqttMessage.setPayload(msg.getBytes());</span><br><span class="line">        <span class="type">MqttTopic</span> <span class="variable">mqttTopic</span> <span class="operator">=</span> mqttClient.getTopic(topic);</span><br><span class="line">        <span class="type">MqttDeliveryToken</span> <span class="variable">token</span> <span class="operator">=</span> mqttTopic.publish(mqttMessage);</span><br><span class="line">        token.waitForCompletion();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅某一个主题 ，此方法默认的的Qos等级为：1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">(String topic)</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        mqttClient.subscribe(topic);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅某一个主题，可携带Qos</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 所要订阅的主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qos   消息质量：0、1、2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">(String topic, <span class="type">int</span> qos)</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        mqttClient.subscribe(topic, qos);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * main函数自己测试用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException &#123;</span><br><span class="line">        <span class="type">MQTTConnect</span> <span class="variable">mqttConnect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MQTTConnect</span>();</span><br><span class="line">        mqttConnect.setMqttClient(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;public&quot;</span>, <span class="keyword">new</span> <span class="title class_">Callback</span>());</span><br><span class="line">        mqttConnect.sub(<span class="string">&quot;com/iot/init&quot;</span>);</span><br><span class="line">        mqttConnect.pub(<span class="string">&quot;com/iot/init&quot;</span>, <span class="string">&quot;Mr.Qu&quot;</span> + (<span class="type">int</span>) (Math.random() * <span class="number">100000000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-3-编写MQTT的回调函数"><a href="#3-3-编写MQTT的回调函数" class="headerlink" title="3-3 编写MQTT的回调函数"></a>3-3 编写MQTT的回调函数</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.siborui.dc.mqtt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttCallback;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttMessage;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常规MQTT回调函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Qu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/1/9 16:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Callback</span> <span class="keyword">implements</span> <span class="title class_">MqttCallback</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MQTT 断开连接会执行此方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectionLost</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;断开了MQTT连接 ：&#123;&#125;&quot;</span>, throwable.getMessage());</span><br><span class="line">        log.error(throwable.getMessage(), throwable);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * publish发布成功后会执行到这里</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deliveryComplete</span><span class="params">(IMqttDeliveryToken iMqttDeliveryToken)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发布消息成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * subscribe订阅后得到的消息会执行到这里</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//  TODO    此处可以将订阅得到的消息进行业务处理、数据存储</span></span><br><span class="line">        log.info(<span class="string">&quot;收到来自 &quot;</span> + topic + <span class="string">&quot; 的消息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(message.getPayload()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-4-监听MQTT主题Topic，编写MQTT监听器"><a href="#3-4-监听MQTT主题Topic，编写MQTT监听器" class="headerlink" title="3-4 监听MQTT主题Topic，编写MQTT监听器"></a>3-4 监听MQTT主题Topic，编写MQTT监听器</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.siborui.dc.mqtt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextRefreshedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.siborui.dc.mqtt.Callback;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 项目启动 监听主题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Qu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/1/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQTTListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MQTTConnect server;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MQTTListener</span><span class="params">(MQTTConnect server)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.server = server;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent contextRefreshedEvent)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server.setMqttClient(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;public&quot;</span>, <span class="keyword">new</span> <span class="title class_">Callback</span>());</span><br><span class="line">            server.sub(<span class="string">&quot;com/iot/init&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>其他</category>
        <category>MQTT协议</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2速学</title>
    <url>/2024/07/08/Vue2%E9%80%9F%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="1-快速上手"><a href="#1-快速上手" class="headerlink" title="1- 快速上手"></a>1- 快速上手</h1><h2 id="1-1-Vue概念"><a href="#1-1-Vue概念" class="headerlink" title="1-1 Vue概念"></a>1-1 Vue概念</h2><p>Vue 是一个用于 构建用户界面 的 渐进式 框架。</p>
<ul>
<li><p>构建用户界面：基于数据渲染出用户看到的页面。</p>
</li>
<li><p>渐进式：循序渐进。</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708072110066.png"
                      alt="image-20240708072110066"
                ></p>
</li>
<li><p>框架：一套完整的项目解决方案。可以提升开发效率（理解规则 -&gt; 官网）。</p>
</li>
</ul>
<h2 id="1-2-构建Vue实例"><a href="#1-2-构建Vue实例" class="headerlink" title="1-2 构建Vue实例"></a>1-2 构建Vue实例</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708072951874.png"
                      alt="image-20240708072951874"
                ></p>
<ul>
<li>引入的是开发版本包，包含完整的注释和警告。</li>
<li>一旦引入 VueJs 核心包，在全局环境，就有了 Vue 构造函数。</li>
</ul>
<h2 id="1-3-插值表达式"><a href="#1-3-插值表达式" class="headerlink" title="1-3 插值表达式"></a>1-3 插值表达式</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708074148262.png"
                      alt="image-20240708074148262"
                ></p>
<h2 id="1-4-Vue响应式特性"><a href="#1-4-Vue响应式特性" class="headerlink" title="1-4 Vue响应式特性"></a>1-4 Vue响应式特性</h2><p>响应式：</p>
<ul>
<li>数据改变，视图自动更新。</li>
<li>使用 Vue 开发 -&gt; 专注于业务核心逻辑 即可。</li>
</ul>
<p>访问或修改数据：</p>
<ul>
<li>data 中的数据，最终会被添加到实例上。</li>
<li>访问数据：” 实例 .属性名 “</li>
<li>修改数据：” 实例 .属性名 “ &#x3D; “ 值 “</li>
</ul>
<h1 id="2-Vue指令"><a href="#2-Vue指令" class="headerlink" title="2- Vue指令"></a>2- Vue指令</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2-1 概念"></a>2-1 概念</h2><p>Vue 会根据不同的【指令】，针对标签实现不同的【功能】。</p>
<p>指令：带有 v- 前缀 的 特殊 标签属性。</p>
<h2 id="2-2-v-html"><a href="#2-2-v-html" class="headerlink" title="2-2 v-html"></a>2-2 v-html</h2><p>作用：动态解析标签，设置元素的 innerHTML。</p>
<p>语法：v-html &#x3D; “ 表达式 “</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708091134224.png"
                      alt="image-20240708091134224"
                ></p>
<h2 id="2-3-v-show"><a href="#2-3-v-show" class="headerlink" title="2-3 v-show"></a>2-3 v-show</h2><p>作用：控制元素显示隐藏。</p>
<p>语法：v-show &#x3D; “ 表达式 “，表达式值 true 显示， false 隐藏。</p>
<p>底层原理：切换 css 的 display: none 来控制 显示 和 隐藏。</p>
<p>场景：频繁切换显示隐藏的场景。</p>
<h2 id="2-4-v-if"><a href="#2-4-v-if" class="headerlink" title="2-4 v-if"></a>2-4 v-if</h2><p>作用：控制元素显示隐藏（条件渲染）。</p>
<p>语法：v-if &#x3D; “ 表达式 “，表达式值 true 显示， false 隐藏。</p>
<p>底层原理：根据 判断条件 控制元素节点的 创建 和 移除。</p>
<p>场景：要么显示，要么隐藏，不频繁切换的场景。</p>
<h2 id="2-5-v-else-与-v-else-if"><a href="#2-5-v-else-与-v-else-if" class="headerlink" title="2-5 v-else 与 v-else-if"></a>2-5 v-else 与 v-else-if</h2><p>作用：辅助 v-if 进行判断渲染。</p>
<p>语法：v-else</p>
<p>语法：v-else-if &#x3D; “ 表达式 “</p>
<p>注意：需要紧挨着 v-if 一起使用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-08%20094643.png"
                      alt="屏幕截图 2024-07-08 094643"
                ></p>
<h2 id="2-6-v-on"><a href="#2-6-v-on" class="headerlink" title="2-6 v-on"></a>2-6 v-on</h2><p>作用：注册事件 &#x3D; 添加监听 + 提供处理逻辑。</p>
<p>语法：</p>
<ul>
<li><p>v-on：事件名 &#x3D; “ 内联语句 “</p>
</li>
<li><p>v-on：事件名 &#x3D; “ methods中的函数名 “</p>
</li>
</ul>
<p>简写：@事件名</p>
<p>注意：methods 函数内的 this 指向 Vue 实例。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708095731810.png"
                      alt="image-20240708095731810"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708100747646.png"
                      alt="image-20240708100747646"
                ></p>
<h2 id="2-7-v-on-调用传参"><a href="#2-7-v-on-调用传参" class="headerlink" title="2-7 v-on 调用传参"></a>2-7 v-on 调用传参</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708101525642.png"
                      alt="image-20240708101525642"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708101554164.png"
                      alt="image-20240708101554164"
                ></p>
<h2 id="2-8-v-bind"><a href="#2-8-v-bind" class="headerlink" title="2-8 v-bind"></a>2-8 v-bind</h2><p>作用：动态的设置 html 的标签属性 -&gt; src、url、title…</p>
<p>语法：v-bind：属性名 &#x3D; “ 表达式 “</p>
<p>简写：: 属性名 &#x3D; “ 表达式 “</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708105400142.png"
                      alt="image-20240708105400142"
                ></p>
<h2 id="2-9-v-for"><a href="#2-9-v-for" class="headerlink" title="2-9 v-for"></a>2-9 v-for</h2><p>作用：基于数据循环，多次渲染整个元素 -&gt;  数组、对象、数字…</p>
<p>遍历数组语法：</p>
<ul>
<li><p>v-for &#x3D; “ ( item, index ) in 数组 “</p>
</li>
<li><p>省略 index：v-for &#x3D; “ item in 数组 “</p>
</li>
<li><p>item 每一项</p>
</li>
<li><p>index 下标（从0开始）</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708110646069.png"
                      alt="image-20240708110646069"
                ></p>
<h2 id="2-10-v-for-的key"><a href="#2-10-v-for-的key" class="headerlink" title="2-10 v-for 的key"></a>2-10 v-for 的key</h2><p>作用：给列表项添加的唯一标识。便于Vue进行列表项的正确排序复用。</p>
<p>语法：key属性 &#x3D; “ 唯一标识 “</p>
<p>注意点：</p>
<ul>
<li>key 的值只能是 字符串 或 数字类型。</li>
<li>key 的值必须具有 唯一性。</li>
<li>推荐使用 id 作为 key（唯一），不推荐使用 index 作为 key（会变化，不对应）。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708160208873.png"
                      alt="image-20240708160208873"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708160356031.png"
                      alt="image-20240708160356031"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710082751895.png"
                      alt="image-20240710082751895"
                ></p>
<h2 id="2-11-v-model"><a href="#2-11-v-model" class="headerlink" title="2-11 v-model"></a>2-11 v-model</h2><p>作用：给 表单元素 使用，双向数据绑定 -&gt; 可以快速 获取 或 设置 表单元素内容。</p>
<ul>
<li>数据变化 -&gt; 视图自动更新</li>
<li>视图变化 -&gt; 数据自动更新</li>
</ul>
<p>语法：v-model &#x3D; “ 变量 “ </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708161454324.png"
                      alt="image-20240708161454324"
                ></p>
<h1 id="3-指令补充"><a href="#3-指令补充" class="headerlink" title="3- 指令补充"></a>3- 指令补充</h1><h2 id="3-1-指令修饰符"><a href="#3-1-指令修饰符" class="headerlink" title="3-1 指令修饰符"></a>3-1 指令修饰符</h2><p>概念：通过 “ , “ 指明一些指令 后缀，不同 后缀 封装了不同的处理操作 -&gt; 简化代码。</p>
<p>按键修饰符：</p>
<ul>
<li>@keyup .enter：键盘回车监听</li>
</ul>
<p>v-model修饰符：</p>
<ul>
<li>v-model .trim：去除首尾空格</li>
<li>v-model .number：转数字</li>
</ul>
<p>事件修饰符：</p>
<ul>
<li>@事件名 .stop：阻止冒泡，用在子模块</li>
<li>@事件名 .prevent：阻止默认行为</li>
</ul>
<h2 id="3-2-v-bind操作class"><a href="#3-2-v-bind操作class" class="headerlink" title="3-2 v-bind操作class"></a>3-2 v-bind操作class</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709173947734.png"
                      alt="image-20240709173947734"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709193118247.png"
                      alt="image-20240709193118247"
                ></p>
<h2 id="3-3-v-bind操作style"><a href="#3-3-v-bind操作style" class="headerlink" title="3-3 v-bind操作style"></a>3-3 v-bind操作style</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709193007230.png"
                      alt="image-20240709193007230"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709192940869.png"
                      alt="image-20240709192940869"
                ></p>
<h2 id="3-4-v-model应用于其他表单元素"><a href="#3-4-v-model应用于其他表单元素" class="headerlink" title="3-4 v-model应用于其他表单元素"></a>3-4 v-model应用于其他表单元素</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709195046333.png"
                      alt="image-20240709195046333"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709195237001.png"
                      alt="image-20240709195237001"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709195349812.png"
                      alt="image-20240709195349812"
                ></p>
<h1 id="4-计算属性"><a href="#4-计算属性" class="headerlink" title="4- 计算属性"></a>4- 计算属性</h1><h2 id="4-1-计算属性基础使用"><a href="#4-1-计算属性基础使用" class="headerlink" title="4-1 计算属性基础使用"></a>4-1 计算属性基础使用</h2><ul>
<li>概念与语法</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709200732741.png"
                      alt="image-20240709200732741"
                ></p>
<ul>
<li>实例</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for:</span>(<span class="attr">item</span>, <span class="attr">index</span>) <span class="attr">in</span> <span class="attr">list</span> <span class="attr">:key</span>=<span class="string">item.id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123; item.name &#125;&#125; - &#123;&#123; item.num &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>   </span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>礼物总数:&#123;&#123; totalcount &#125;&#125;个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="comment">// 现有的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">list</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;篮球&#x27;</span>, <span class="attr">num</span>:<span class="number">3</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;玩具&#x27;</span>, <span class="attr">num</span>:<span class="number">2</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="string">&#x27;铅笔&#x27;</span>, <span class="attr">num</span>:<span class="number">5</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="title function_">totalcount</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//基于现有的数据，编写求值逻辑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//计算属性函数内部，可以直接通过 this 访问到 app 实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//需求:对 this.list 数组里面的 num 进行求和 → reduce</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//把0先赋给sum，然后sum加上遍历的实例的num后，再赋给sum累加，直到遍历完毕</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="keyword">let</span> total = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="keyword">return</span> total</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>    </span><br></pre></td></tr></table></figure></div>

<h2 id="4-2-computed计算属性-vs-methods方法"><a href="#4-2-computed计算属性-vs-methods方法" class="headerlink" title="4-2 computed计算属性 vs methods方法"></a>4-2 computed计算属性 vs methods方法</h2><ul>
<li>对比</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710073817294.png"
                      alt="image-20240710073817294"
                ></p>
<ul>
<li>实例</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for:</span>(<span class="attr">item</span>, <span class="attr">index</span>) <span class="attr">in</span> <span class="attr">list</span> <span class="attr">:key</span>=<span class="string">item.id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123; item.name &#125;&#125; - &#123;&#123; item.num &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    </span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单雪<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalcountFn() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单雪<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalcountFn() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单雪<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalcount &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单雪<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalcount &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="comment">// 现有的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">list</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;篮球&#x27;</span>, <span class="attr">num</span>:<span class="number">3</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;玩具&#x27;</span>, <span class="attr">num</span>:<span class="number">2</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="string">&#x27;铅笔&#x27;</span>, <span class="attr">num</span>:<span class="number">5</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="title function_">totalcountFn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;methods方法执行了&#x27;</span>) <span class="comment">//执行2次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="keyword">let</span> total = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="keyword">return</span> total</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		&#125;,		</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="title function_">totalcount</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//计算属性:有缓存的，一旦计算出来结果，就会立刻缓存</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//下一次读取 → 直接读缓存就行 → 性能特别高</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;computed方法执行了&#x27;</span>) <span class="comment">//执行1次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="keyword">let</span> total = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="keyword">return</span> total</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>    </span><br></pre></td></tr></table></figure></div>

<h2 id="4-3-计算属性完整写法"><a href="#4-3-计算属性完整写法" class="headerlink" title="4-3 计算属性完整写法"></a>4-3 计算属性完整写法</h2><ul>
<li>概念与语法</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710075300172.png"
                      alt="image-20240710075300172"
                ></p>
<ul>
<li>实例</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">		<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">		<span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">firstName</span>: <span class="string">&#x27;刘&#x27;</span></span><br><span class="line"> 			<span class="attr">lastName</span>: <span class="string">&#x27;备&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">			<span class="title function_">changeName</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="string">&#x27;吕小布&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,		</span><br><span class="line">		<span class="attr">computed</span>:&#123;</span><br><span class="line">            <span class="comment">// 完整写法 → 获取 + 设置</span></span><br><span class="line">            <span class="attr">fullName</span>:&#123;</span><br><span class="line">                <span class="comment">//(1)当fullName计算属性，被获取求值时，执行get(有缓存)</span></span><br><span class="line">                <span class="comment">//会将返回值作为，求值的结果</span></span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//(2)当fullName计算属性，被修改赋值时，执行set</span></span><br><span class="line">                <span class="comment">//修改的值，传递给set方法的形参</span></span><br><span class="line">                <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">firstName</span> = value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">lastName</span> = value.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="5-watch侦听器"><a href="#5-watch侦听器" class="headerlink" title="5- watch侦听器"></a>5- watch侦听器</h1><h2 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5-1 概念"></a>5-1 概念</h2><p>作用：监视数据变化，执行一些 业务逻辑 或 异步操作。</p>
<p>语法：</p>
<ul>
<li>简单写法 -&gt; 简单类型数据，直接监视</li>
<li>完整写法 -&gt; 添加额外配置项</li>
</ul>
<h2 id="5-2-简单写法"><a href="#5-2-简单写法" class="headerlink" title="5-2 简单写法"></a>5-2 简单写法</h2><ul>
<li>语法</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710083552727.png"
                      alt="image-20240710083552727"
                ></p>
<ul>
<li>实例（实时翻译）</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">		<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">		<span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">words</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">result</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//翻译后结果</span></span><br><span class="line">            <span class="comment">// timer:null //延时器id，可以去掉，只在下面逻辑有this.timer就行</span></span><br><span class="line">            <span class="attr">obj</span>: &#123;</span><br><span class="line">            	<span class="attr">words</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//需要翻译的数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">watch</span>:&#123;</span><br><span class="line">			<span class="comment">//该方法会在数据变化时调用执行</span></span><br><span class="line">			<span class="comment">//newValue新值，oldValue老值(一般不用)</span></span><br><span class="line">			<span class="title function_">words</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>, newValue)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&#x27;obj.words&#x27;</span> (newValue)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>, newValue)</span><br><span class="line">			&#125;,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//翻译逻辑代码</span></span><br><span class="line">            <span class="string">&#x27;obj.words&#x27;</span> (newValue)&#123;</span><br><span class="line">                <span class="comment">//防抖:延迟执行 → 干啥事先等一等，延迟一会，一段时间内没有再次触发，才执行</span></span><br><span class="line">                <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">                    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">                        <span class="attr">url</span>:<span class="string">&quot;https://applet-base-api-t.itheima.net/api/&quot;</span></span><br><span class="line">                        <span class="attr">params</span>:&#123;</span><br><span class="line">                            <span class="attr">words</span>: newValue</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">result</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">                &#125;,<span class="number">1000</span>) <span class="comment">//1秒</span></span><br><span class="line">            &#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-3-完整写法"><a href="#5-3-完整写法" class="headerlink" title="5-3 完整写法"></a>5-3 完整写法</h2><ul>
<li>语法</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710111306372.png"
                      alt="image-20240710111306372"
                ></p>
<ul>
<li>实例</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">		<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">		<span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">result</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//翻译后结果</span></span><br><span class="line">            <span class="attr">obj</span>: &#123;</span><br><span class="line">            	<span class="attr">words</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//需要翻译的数据</span></span><br><span class="line">            	<span class="attr">lang</span>: <span class="string">&#x27;english&#x27;</span> <span class="comment">//设定翻译成的语言</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">watch</span>:&#123;</span><br><span class="line">            <span class="attr">obj</span>:&#123;</span><br><span class="line">            	<span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">//深度监视</span></span><br><span class="line">                <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//初始化立刻执行一次handler方法 </span></span><br><span class="line">            	<span class="title function_">handler</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">            		<span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">                        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">                            <span class="attr">url</span>:<span class="string">&quot;https://applet-base-api-t.itheima.net/api/&quot;</span>,</span><br><span class="line">                            <span class="attr">params</span>:newValue</span><br><span class="line">                        &#125;)</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">result</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">                    &#125;,<span class="number">1000</span>) <span class="comment">//1秒</span></span><br><span class="line">            	&#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Web</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2024/04/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-存储器"><a href="#1-存储器" class="headerlink" title="1- 存储器"></a>1- 存储器</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1-1 概述"></a>1-1 概述</h2><h3 id="1-1-1-存储器分类"><a href="#1-1-1-存储器分类" class="headerlink" title="1-1-1 存储器分类"></a>1-1-1 存储器分类</h3><h4 id="1-1-1-1-按存储介质分类"><a href="#1-1-1-1-按存储介质分类" class="headerlink" title="1-1-1-1 按存储介质分类"></a>1-1-1-1 按存储介质分类</h4><p>1、半导体存储器		TTL、MOS		易失</p>
<p>2、磁表面存储器		磁头、载磁体		非易失</p>
<p>3、磁芯存储器		硬磁材料、环状元件		非易失</p>
<p>4、光盘存储器		激光、磁光材料		非易失</p>
<h4 id="1-1-1-2-按存取方式分类"><a href="#1-1-1-2-按存取方式分类" class="headerlink" title="1-1-1-2 按存取方式分类"></a>1-1-1-2 按存取方式分类</h4><p>1、存取时间与物理地址无关（随机访问）</p>
<ul>
<li>随机存储器		在程序的执行过程中		可读可写</li>
<li>只读存储器        在程序的执行过程中		只读</li>
</ul>
<p>2、存取时间与物理地址有关（串行访问）</p>
<ul>
<li>顺序存取存储器		磁带</li>
<li>直接存取存储器		磁盘</li>
</ul>
<h4 id="1-1-1-3-按在计算机中的作用分类"><a href="#1-1-1-3-按在计算机中的作用分类" class="headerlink" title="1-1-1-3 按在计算机中的作用分类"></a>1-1-1-3 按在计算机中的作用分类</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501154448708.png"
                      alt="image-20240501154448708"
                ></li>
</ul>
<h3 id="1-1-2-存储器的层次结构"><a href="#1-1-2-存储器的层次结构" class="headerlink" title="1-1-2 存储器的层次结构"></a>1-1-2 存储器的层次结构</h3><h4 id="1-1-2-1-存储器三个主要特性的关系"><a href="#1-1-2-1-存储器三个主要特性的关系" class="headerlink" title="1-1-2-1 存储器三个主要特性的关系"></a>1-1-2-1 存储器三个主要特性的关系</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501154934996.png"
                      alt="image-20240501154934996"
                ></li>
</ul>
<h4 id="1-1-2-2-缓存一主存层次和主存一辅存层次"><a href="#1-1-2-2-缓存一主存层次和主存一辅存层次" class="headerlink" title="1-1-2-2 缓存一主存层次和主存一辅存层次"></a>1-1-2-2 缓存一主存层次和主存一辅存层次</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501160415479.png"
                      alt="image-20240501160415479"
                ></li>
</ul>
<p>缓存一主存层次	主要解决CPU和主存速度不匹配的问题。</p>
<p>主存一辅存层次	主要解决存储系统的容量问题。</p>
<p>注意：</p>
<ul>
<li>辅存的速度比主存的速度低，容量比主存大的多，且不能和CPU直接交换信息。</li>
<li>主存和辅存共同构成虚拟存储器，用虚地址，即逻辑地址。</li>
<li>缓存和主存共同构成主存储器，用实地址，即物理地址。</li>
</ul>
<h2 id="1-2-主存储器"><a href="#1-2-主存储器" class="headerlink" title="1-2 主存储器"></a>1-2 主存储器</h2><h3 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1-2-1 概述"></a>1-2-1 概述</h3><h4 id="1-2-1-1-主存的基本组成"><a href="#1-2-1-1-主存的基本组成" class="headerlink" title="1-2-1-1 主存的基本组成"></a>1-2-1-1 主存的基本组成</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501161203442.png"
                      alt="image-20240501161203442"
                ></li>
</ul>
<h4 id="1-2-1-2-主存和CPU的联系"><a href="#1-2-1-2-主存和CPU的联系" class="headerlink" title="1-2-1-2 主存和CPU的联系"></a>1-2-1-2 主存和CPU的联系</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501161405812.png"
                      alt="image-20240501161405812"
                ></li>
</ul>
<h4 id="1-2-1-3-主存中存储单元地址的分配"><a href="#1-2-1-3-主存中存储单元地址的分配" class="headerlink" title="1-2-1-3 主存中存储单元地址的分配"></a>1-2-1-3 主存中存储单元地址的分配</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501164042442.png"
                      alt="image-20240501164042442"
                ></li>
</ul>
<h4 id="1-2-1-4-主存的技术指标"><a href="#1-2-1-4-主存的技术指标" class="headerlink" title="1-2-1-4 主存的技术指标"></a>1-2-1-4 主存的技术指标</h4><p>1、存储容量		主存存放二进制代码的总位数</p>
<p>2、存储速度</p>
<ul>
<li>存取时间		存储器的访问时间		读出时间、写入时间</li>
<li>存取周期		连续两次独立的存储器操作（读或写）所需的 最小间隔时间		读周期、写周期</li>
</ul>
<p>3、存储器的带宽		位&#x2F;秒</p>
<h3 id="1-2-2-半导体存储芯片简介"><a href="#1-2-2-半导体存储芯片简介" class="headerlink" title="1-2-2 半导体存储芯片简介"></a>1-2-2 半导体存储芯片简介</h3><h4 id="1-2-2-1-半导体存储芯片的基本结构"><a href="#1-2-2-1-半导体存储芯片的基本结构" class="headerlink" title="1-2-2-1 半导体存储芯片的基本结构"></a>1-2-2-1 半导体存储芯片的基本结构</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501170522545.png"
                      alt="image-20240501170522545"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20170824.png"
                      alt="屏幕截图 2024-05-01 170824"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501171250938.png"
                      alt="image-20240501171250938"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501172625363.png"
                      alt="image-20240501172625363"
                ></p>
</li>
</ul>
<h4 id="1-2-2-2-半导体存储芯片的译码驱动方式"><a href="#1-2-2-2-半导体存储芯片的译码驱动方式" class="headerlink" title="1-2-2-2 半导体存储芯片的译码驱动方式"></a>1-2-2-2 半导体存储芯片的译码驱动方式</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501174037281.png"
                      alt="image-20240501174037281"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501180954195.png"
                      alt="image-20240501180954195"
                ></li>
</ul>
<h3 id="1-2-3-随机存取存储器（RAM）"><a href="#1-2-3-随机存取存储器（RAM）" class="headerlink" title="1-2-3 随机存取存储器（RAM）"></a>1-2-3 随机存取存储器（RAM）</h3><h4 id="1-2-3-1-静态RAM（SRAM）"><a href="#1-2-3-1-静态RAM（SRAM）" class="headerlink" title="1-2-3-1 静态RAM（SRAM）"></a>1-2-3-1 静态RAM（SRAM）</h4><ul>
<li><p>（1）</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501183002847.png"
                      alt="image-20240501183002847"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501183636169.png"
                      alt="image-20240501183636169"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501202323787.png"
                      alt="image-20240501202323787"
                ></p>
</li>
<li><p>（2）</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501202850951.png"
                      alt="image-20240501202850951"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501203253664.png"
                      alt="image-20240501203253664"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240501203403471.png"
                      alt="image-20240501203403471"
                ></p>
</li>
</ul>
<h4 id="1-2-3-2-动态RAM（DRAM）"><a href="#1-2-3-2-动态RAM（DRAM）" class="headerlink" title="1-2-3-2 动态RAM（DRAM）"></a>1-2-3-2 动态RAM（DRAM）</h4><ul>
<li><p>（1）动态RAM基本单元电路</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240502213650982.png"
                      alt="image-20240502213650982"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240502214639674.png"
                      alt="image-20240502214639674"
                ></p>
</li>
<li><p>（2）动态RAM芯片举例</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240502215549112.png"
                      alt="image-20240502215549112"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240502215644971.png"
                      alt="image-20240502215644971"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240502215901289.png"
                      alt="image-20240502215901289"
                ></p>
</li>
<li><p>注意：读放大器 起跷跷板的作用，左侧为1，右侧为0；左侧为0，右侧为1。</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240503213329774.png"
                      alt="image-20240503213329774"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240503214043486.png"
                      alt="image-20240503214043486"
                ></p>
</li>
<li><p>（4）动态RAM刷新（刷新与行地址有关）</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240503215448102.png"
                      alt="image-20240503215448102"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240503215844691.png"
                      alt="image-20240503215844691"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240503221118229.png"
                      alt="image-20240503221118229"
                ></p>
</li>
</ul>
<h4 id="1-2-3-3-动态RAM和静态RAM的比较"><a href="#1-2-3-3-动态RAM和静态RAM的比较" class="headerlink" title="1-2-3-3 动态RAM和静态RAM的比较"></a>1-2-3-3 动态RAM和静态RAM的比较</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240503221804668.png"
                      alt="image-20240503221804668"
                ></li>
</ul>
<h3 id="1-2-4-只读存储器（ROM）"><a href="#1-2-4-只读存储器（ROM）" class="headerlink" title="1-2-4 只读存储器（ROM）"></a>1-2-4 只读存储器（ROM）</h3><h4 id="1-2-4-1-掩模ROM（MROM）"><a href="#1-2-4-1-掩模ROM（MROM）" class="headerlink" title="1-2-4-1 掩模ROM（MROM）"></a>1-2-4-1 掩模ROM（MROM）</h4><p>行列选择线交叉处有 MOS 管为“1”。</p>
<p>行列选择线交叉处无 MOS 管为“0”。</p>
<h4 id="1-2-4-2-PROM（一次性编程）"><a href="#1-2-4-2-PROM（一次性编程）" class="headerlink" title="1-2-4-2 PROM（一次性编程）"></a>1-2-4-2 PROM（一次性编程）</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240504212752736.png"
                      alt="image-20240504212752736"
                ></li>
</ul>
<h4 id="1-2-4-3-EPROM（多次性编程）"><a href="#1-2-4-3-EPROM（多次性编程）" class="headerlink" title="1-2-4-3 EPROM（多次性编程）"></a>1-2-4-3 EPROM（多次性编程）</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240504213808890.png"
                      alt="image-20240504213808890"
                ></li>
</ul>
<h4 id="1-2-4-4-EEPROM（多次性编程）"><a href="#1-2-4-4-EEPROM（多次性编程）" class="headerlink" title="1-2-4-4 EEPROM（多次性编程）"></a>1-2-4-4 EEPROM（多次性编程）</h4><p>电可擦写</p>
<p>局部擦写</p>
<p>全部擦写</p>
<h4 id="1-2-4-5-Flash-Memory（闪速型存储器）"><a href="#1-2-4-5-Flash-Memory（闪速型存储器）" class="headerlink" title="1-2-4-5 Flash Memory（闪速型存储器）"></a>1-2-4-5 Flash Memory（闪速型存储器）</h4><p>既有	EPROM	价格便宜 集成度高，</p>
<p>又有	EEPROM	电可擦洗重写，</p>
<p>而且	比EEPROM快	还具备RAM功能。</p>
<h3 id="1-2-5-主存储器–存储器与CPU的连接"><a href="#1-2-5-主存储器–存储器与CPU的连接" class="headerlink" title="1-2-5 主存储器–存储器与CPU的连接"></a>1-2-5 主存储器–存储器与CPU的连接</h3><h4 id="1-2-5-1-存储器容量的扩展"><a href="#1-2-5-1-存储器容量的扩展" class="headerlink" title="1-2-5-1 存储器容量的扩展"></a>1-2-5-1 存储器容量的扩展</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240504222116832.png"
                      alt="image-20240504222116832"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240504223359589.png"
                      alt="image-20240504223359589"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240505151701412.png"
                      alt="image-20240505151701412"
                ></p>
</li>
</ul>
<h4 id="1-2-5-2-存储器与CPU的连接"><a href="#1-2-5-2-存储器与CPU的连接" class="headerlink" title="1-2-5-2 存储器与CPU的连接"></a>1-2-5-2 存储器与CPU的连接</h4><p>1、地址线的连接</p>
<ul>
<li>设CPU的地址线为16位 A15<del>A0，1k * 4位的存储芯片为10位 A9</del>A0，此时，可将CPU的低位地址 A9<del>A0 与存储芯片 A9</del>A0 相连。</li>
</ul>
<p>2、数据线的连接</p>
<ul>
<li>对存储芯片扩位，使其数据位数与CPU的数据位数相等。</li>
</ul>
<p>3、读&#x2F;写命令线的连接</p>
<ul>
<li>CPU读&#x2F;写命令线一般可直接与存储芯片的读&#x2F;写控制端相连；高电平为读，低电平为写。</li>
</ul>
<p>4、片选线的连接</p>
<p>5、合理选择存储芯片</p>
<p>6、其他</p>
<ul>
<li>时序、负载</li>
</ul>
<h4 id="1-2-5-3-实例"><a href="#1-2-5-3-实例" class="headerlink" title="1-2-5-3 实例"></a>1-2-5-3 实例</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240505171445776.png"
                      alt="image-20240505171445776"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240505173035824.png"
                      alt="image-20240505173035824"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240505195708077.png"
                      alt="image-20240505195708077"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240505205310527.png"
                      alt="image-20240505205310527"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240505205523360.png"
                      alt="image-20240505205523360"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240505210305604.png"
                      alt="image-20240505210305604"
                ></p>
</li>
</ul>
<h3 id="1-2-6-主存储器–存储器的校验"><a href="#1-2-6-主存储器–存储器的校验" class="headerlink" title="1-2-6 主存储器–存储器的校验"></a>1-2-6 主存储器–存储器的校验</h3><h4 id="1-2-6-1-合法代码集合"><a href="#1-2-6-1-合法代码集合" class="headerlink" title="1-2-6-1 合法代码集合"></a>1-2-6-1 合法代码集合</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240506215821189.png"
                      alt="image-20240506215821189"
                ></li>
</ul>
<h4 id="1-2-6-2-编码的最小距离"><a href="#1-2-6-2-编码的最小距离" class="headerlink" title="1-2-6-2 编码的最小距离"></a>1-2-6-2 编码的最小距离</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240506220252347.png"
                      alt="image-20240506220252347"
                ></li>
</ul>
<h4 id="1-2-6-3-汉明码的组成"><a href="#1-2-6-3-汉明码的组成" class="headerlink" title="1-2-6-3 汉明码的组成"></a>1-2-6-3 汉明码的组成</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240507150004146.png"
                      alt="image-20240507150004146"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240507150313337.png"
                      alt="image-20240507150313337"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240507150918713.png"
                      alt="image-20240507150918713"
                ></p>
</li>
</ul>
<h4 id="1-2-6-4-汉明码的组成-计算"><a href="#1-2-6-4-汉明码的组成-计算" class="headerlink" title="1-2-6-4 汉明码的组成 计算"></a>1-2-6-4 汉明码的组成 计算</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240507151332105.png"
                      alt="image-20240507151332105"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240507151628234.png"
                      alt="image-20240507151628234"
                ></p>
</li>
</ul>
<h4 id="1-2-6-5-汉明码的纠错"><a href="#1-2-6-5-汉明码的纠错" class="headerlink" title="1-2-6-5 汉明码的纠错"></a>1-2-6-5 汉明码的纠错</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240507152942309.png"
                      alt="image-20240507152942309"
                ></li>
</ul>
<h4 id="1-2-6-6-汉明码的纠错-计算"><a href="#1-2-6-6-汉明码的纠错-计算" class="headerlink" title="1-2-6-6 汉明码的纠错 计算"></a>1-2-6-6 汉明码的纠错 计算</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240507155950070.png"
                      alt="image-20240507155950070"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240507160222825.png"
                      alt="image-20240507160222825"
                ></p>
</li>
</ul>
<h3 id="1-2-7-提高访存速度的措施"><a href="#1-2-7-提高访存速度的措施" class="headerlink" title="1-2-7 提高访存速度的措施"></a>1-2-7 提高访存速度的措施</h3><ul>
<li>采用高速器件</li>
<li>采用层次结构	Cache-主存</li>
<li>调整主存结构</li>
</ul>
<h4 id="1-2-7-1-单体多字系统"><a href="#1-2-7-1-单体多字系统" class="headerlink" title="1-2-7-1 单体多字系统"></a>1-2-7-1 单体多字系统</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240508090851983.png"
                      alt="image-20240508090851983"
                ></li>
</ul>
<h4 id="1-2-7-2-多体并行系统"><a href="#1-2-7-2-多体并行系统" class="headerlink" title="1-2-7-2 多体并行系统"></a>1-2-7-2 多体并行系统</h4><ul>
<li><p>高位交叉用来提高存储容量，低位交叉用来提高访问速度</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240508091933945.png"
                      alt="image-20240508091933945"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240508092309255.png"
                      alt="image-20240508092309255"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240508103941697.png"
                      alt="image-20240508103941697"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240508104012951.png"
                      alt="image-20240508104012951"
                ></p>
</li>
</ul>
<h4 id="1-2-7-3-高性能存储芯片"><a href="#1-2-7-3-高性能存储芯片" class="headerlink" title="1-2-7-3 高性能存储芯片"></a>1-2-7-3 高性能存储芯片</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240508104843320.png"
                      alt="image-20240508104843320"
                ></li>
</ul>
<h2 id="1-3-高速缓冲存储器"><a href="#1-3-高速缓冲存储器" class="headerlink" title="1-3 高速缓冲存储器"></a>1-3 高速缓冲存储器</h2><h3 id="1-3-1-为什么用-Cache"><a href="#1-3-1-为什么用-Cache" class="headerlink" title="1-3-1 为什么用 Cache"></a>1-3-1 为什么用 Cache</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622193350801.png"
                      alt="image-20240622193350801"
                ></li>
</ul>
<h3 id="1-3-2-Cache-的工作原理"><a href="#1-3-2-Cache-的工作原理" class="headerlink" title="1-3-2 Cache 的工作原理"></a>1-3-2 Cache 的工作原理</h3><h4 id="1-3-2-1-主存和缓存的编址"><a href="#1-3-2-1-主存和缓存的编址" class="headerlink" title="1-3-2-1 主存和缓存的编址"></a>1-3-2-1 主存和缓存的编址</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622194750156.png"
                      alt="image-20240622194750156"
                ></li>
</ul>
<h4 id="1-3-2-2-命中与未命中"><a href="#1-3-2-2-命中与未命中" class="headerlink" title="1-3-2-2 命中与未命中"></a>1-3-2-2 命中与未命中</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622195632743.png"
                      alt="image-20240622195632743"
                ></li>
</ul>
<h4 id="1-3-2-3-Cache-的命中率"><a href="#1-3-2-3-Cache-的命中率" class="headerlink" title="1-3-2-3 Cache 的命中率"></a>1-3-2-3 Cache 的命中率</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622200233409.png"
                      alt="image-20240622200233409"
                ></li>
</ul>
<h4 id="1-3-2-4-Cache-主存系统的效率"><a href="#1-3-2-4-Cache-主存系统的效率" class="headerlink" title="1-3-2-4 Cache-主存系统的效率"></a>1-3-2-4 Cache-主存系统的效率</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622200719486.png"
                      alt="image-20240622200719486"
                ></li>
</ul>
<h3 id="1-3-3-Cache-的基本结构"><a href="#1-3-3-Cache-的基本结构" class="headerlink" title="1-3-3 Cache 的基本结构"></a>1-3-3 Cache 的基本结构</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622201346286.png"
                      alt="image-20240622201346286"
                ></li>
</ul>
<h3 id="1-3-4-Cache-的读写操作"><a href="#1-3-4-Cache-的读写操作" class="headerlink" title="1-3-4 Cache 的读写操作"></a>1-3-4 Cache 的读写操作</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622201546727.png"
                      alt="image-20240622201546727"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622201946504.png"
                      alt="image-20240622201946504"
                ></p>
</li>
</ul>
<h3 id="1-3-5-Cache-的改进"><a href="#1-3-5-Cache-的改进" class="headerlink" title="1-3-5 Cache 的改进"></a>1-3-5 Cache 的改进</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622202222588.png"
                      alt="image-20240622202222588"
                ></li>
</ul>
<h3 id="1-3-6-Cache-主存的地址映射【重点】"><a href="#1-3-6-Cache-主存的地址映射【重点】" class="headerlink" title="1-3-6 Cache-主存的地址映射【重点】"></a>1-3-6 Cache-主存的地址映射【重点】</h3><h4 id="1-3-6-1-直接映射"><a href="#1-3-6-1-直接映射" class="headerlink" title="1-3-6-1 直接映射"></a>1-3-6-1 直接映射</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622202903536.png"
                      alt="image-20240622202903536"
                ></li>
</ul>
<h4 id="1-3-6-2-全相联映射"><a href="#1-3-6-2-全相联映射" class="headerlink" title="1-3-6-2 全相联映射"></a>1-3-6-2 全相联映射</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622203149537.png"
                      alt="image-20240622203149537"
                ></li>
</ul>
<h4 id="1-3-6-3-组相联映射"><a href="#1-3-6-3-组相联映射" class="headerlink" title="1-3-6-3 组相联映射"></a>1-3-6-3 组相联映射</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622203432068.png"
                      alt="image-20240622203432068"
                ></li>
</ul>
<h3 id="1-3-7-替换算法"><a href="#1-3-7-替换算法" class="headerlink" title="1-3-7 替换算法"></a>1-3-7 替换算法</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622203524920.png"
                      alt="image-20240622203524920"
                ></li>
</ul>
<h2 id="1-4-辅助存储器"><a href="#1-4-辅助存储器" class="headerlink" title="1-4 辅助存储器"></a>1-4 辅助存储器</h2><h3 id="1-4-1-概述"><a href="#1-4-1-概述" class="headerlink" title="1-4-1 概述"></a>1-4-1 概述</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622203735872.png"
                      alt="image-20240622203735872"
                ></li>
</ul>
<h3 id="1-4-2-磁记录原理"><a href="#1-4-2-磁记录原理" class="headerlink" title="1-4-2 磁记录原理"></a>1-4-2 磁记录原理</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622203841845.png"
                      alt="image-20240622203841845"
                ></li>
</ul>
<h3 id="1-4-3-硬磁盘存储器"><a href="#1-4-3-硬磁盘存储器" class="headerlink" title="1-4-3 硬磁盘存储器"></a>1-4-3 硬磁盘存储器</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622203928787.png"
                      alt="image-20240622203928787"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622204121313.png"
                      alt="image-20240622204121313"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622204139199.png"
                      alt="image-20240622204139199"
                ></p>
</li>
</ul>
<h3 id="1-4-4-软磁盘存储器"><a href="#1-4-4-软磁盘存储器" class="headerlink" title="1-4-4 软磁盘存储器"></a>1-4-4 软磁盘存储器</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622204225934.png"
                      alt="image-20240622204225934"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622204250839.png"
                      alt="image-20240622204250839"
                ></p>
</li>
</ul>
<h3 id="1-4-5-光盘存储器"><a href="#1-4-5-光盘存储器" class="headerlink" title="1-4-5 光盘存储器"></a>1-4-5 光盘存储器</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240622204333945.png"
                      alt="image-20240622204333945"
                ></li>
</ul>
]]></content>
      <categories>
        <category>计组计网</category>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb（含SSM框架）系统速学</title>
    <url>/2024/02/27/JavaWeb%EF%BC%88%E5%90%ABSSM%E6%A1%86%E6%9E%B6%EF%BC%89%E7%B3%BB%E7%BB%9F%E9%80%9F%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>全球广域网，也称为万维网 ( www world Wide Web )，能够通过浏览器访问的网站。如：京东、淘宝。</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240228115425165.png"
                      alt="image-20240228115425165"
                ></li>
</ul>
<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="1-参考手册"><a href="#1-参考手册" class="headerlink" title="1- 参考手册"></a>1- 参考手册</h2><ul>
<li><a class="link"   href="http://w3school.com.cn/" >w3school.com.cn&#x2F; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2- HTML"></a>2- HTML</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>HTML ( Hyper Text Markup Language )：超文本标记语言。</p>
<ul>
<li><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p>
</li>
<li><p>标记语言：由标签构成的语言</p>
<p>HTML标签都是预定义好的。例如：使用&lt; a &gt;展示超链接，使用&lt; img &gt;展示图片，&lt; video &gt;展示视频。</p>
<p>HTML代码直接在浏览器中运行，HTML标签由浏览器解析。</p>
</li>
</ul>
<h3 id="标题标签-h1-h6"><a href="#标题标签-h1-h6" class="headerlink" title="标题标签&lt; h1 &gt;-&lt; h6 &gt;"></a>标题标签&lt; h1 &gt;-&lt; h6 &gt;</h3><p>h1最大，h6最小</p>
<h3 id="图片标签-img-src-””"><a href="#图片标签-img-src-””" class="headerlink" title="图片标签 &lt; img src&#x3D;”” &gt;"></a>图片标签 &lt; img src&#x3D;”” &gt;</h3><p>src：指定图像的url(绝对路径 &#x2F;相对路径)。</p>
<ul>
<li><p>绝对路径：绝对磁盘路径、绝对网络路径。</p>
</li>
<li><p>相对路径：.&#x2F;：当前目录，可省略；..&#x2F;：上一级目录。</p>
</li>
</ul>
<p>width：图像的宽度(像素 &#x2F;相对于父元素的百分比)。</p>
<p>height：图像的高度(像素 &#x2F;相对于父元素的百分比)。</p>
<h3 id="超链接标签-a-href-””-target-””"><a href="#超链接标签-a-href-””-target-””" class="headerlink" title="超链接标签 &lt; a href&#x3D;”” target&#x3D;”” &gt;"></a>超链接标签 &lt; a href&#x3D;”” target&#x3D;”” &gt;</h3><p>href：指定资源访问的url。</p>
<p>target：指定在何处打开资源链接。</p>
<ul>
<li>_self：默认值，在当前页面打开。</li>
<li>_blank：在空白页面打开。</li>
</ul>
<h3 id="视频标签-video-src-””-controls"><a href="#视频标签-video-src-””-controls" class="headerlink" title="视频标签 &lt; video src&#x3D;”” controls &gt;"></a>视频标签 &lt; video src&#x3D;”” controls &gt;</h3><p>src：规定视频的url。</p>
<p>controls：显示播放控件。</p>
<p>width：播放器的宽度。</p>
<p>height：播放器的高度。</p>
<h3 id="音频标签-audio-src-””-controls"><a href="#音频标签-audio-src-””-controls" class="headerlink" title="音频标签 &lt; audio src&#x3D;”” controls &gt;"></a>音频标签 &lt; audio src&#x3D;”” controls &gt;</h3><p>src：规定音频的url。</p>
<p>controls：显示播放控件。</p>
<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p>&lt; th &gt; ：表示表头单元格，具有加粗居中效果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240228170546475.png"
                      alt="image-20240228170546475"
                ></p>
<h3 id="表单标签-form-action-””-method-””"><a href="#表单标签-form-action-””-method-””" class="headerlink" title="表单标签 &lt; form action&#x3D;”” method&#x3D;”” &gt;"></a>表单标签 &lt; form action&#x3D;”” method&#x3D;”” &gt;</h3><p>action：表单提交的url，往何处提交数据 。 如果不指定，默认提交到当前页面。</p>
<p>method: 表单的提交方式。</p>
<ul>
<li>get：在url后面拼接表单数据，url长度有限制，是默认值。</li>
<li>post：在消息体(请求体) 中传递的，参数大小无限制的。</li>
</ul>
<h4 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h4><p>&lt; input &gt;：表单项，通过type属性控制输入形式</p>
<p>&lt; select &gt;：定义下拉列表</p>
<p>&lt; option &gt; ：定义列表项</p>
<p>&lt; textarea &gt;：定义文本域</p>
<p>表单项必须有name属性才可以提交。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240228170609448.png"
                      alt="image-20240228170609448"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240228170617774.png"
                      alt="image-20240228170617774"
                ></p>
<h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><p>&lt; hr &gt;：水平分割线</p>
<p>&lt; br &gt;：换行</p>
<p>&lt; p &gt;：段落</p>
<p>&lt; b &gt; &#x2F;&lt; strong &gt;：文本加粗</p>
<p>&lt; span &gt;：一个在开发网页时大量会用到的没有语义的布局标签；一行可以显示多个(组合行内元素)，宽度和高度默认由内容撑开；不可以设置宽高 (width、height)</p>
<p>&lt; div &gt;：一行只显示一个(独占一行)；宽度默认是父元素的宽度，高度默认由内容撑开；可以设置宽高 (width、height)</p>
<h2 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3- CSS"></a>3- CSS</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>CSS ( Cascading Style Sheet )：层叠样式表，用于控制页面的样式 ( 表现 )。</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a408199c-4141-4844-8f67-e68fa3dfcac6-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>优先级：id &gt; 类 &gt; 元素</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/633d1731-b21d-499c-ab9b-fc974b8180ff-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>页面中所有的元素(标签)，都可以看做是一个盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局。</p>
<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e0e9d03d-25f9-45d7-9d6c-80e0b51de009-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>width：设置宽度</p>
<p>height：设置高度</p>
<p>padding、margin：上、右、下、左</p>
<p>border：宽度、线条类型、颜色</p>
<p>background：背景</p>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><p>颜色：color</p>
<table>
<thead>
<tr>
<th>表示方式</th>
<th>表示含义</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>关键字</td>
<td>预定义的颜色名</td>
<td>red、green、blue</td>
</tr>
<tr>
<td>rgb表示法</td>
<td>红绿蓝三原色，每项取值范围：0-255</td>
<td>rgb(0,0,0)、rgb(255,255,255)、rgb(255,0,0)</td>
</tr>
<tr>
<td>十六进制表示法</td>
<td>#开头，将数字转换成十六进制表示</td>
<td>#ff0000、#cccccc，简写：#ccc</td>
</tr>
</tbody></table>
<p>字体大小：font-size</p>
<p>规定添加到文本的修饰：text-decoration，其中none表示定义标准的文本</p>
<p>设置行高：line-height</p>
<p>定义第一个行内容的缩进：text-indent</p>
<p>规定元素中的文本的水平对齐方式：text-align</p>
<h2 id="4-JavaScript"><a href="#4-JavaScript" class="headerlink" title="4- JavaScript"></a>4- JavaScript</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>JavaScript ( 简称：JS )是一门跨平台、面向对象的脚本语言。是用来控制网页行为的，它能使网页可交互。</p>
<p>JavaScript 和 Java 是完全不同的语言，不论是概念还是设计。但是基础语法类似。</p>
<h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/675a0f0f-716a-4e94-9132-f8ac779098ac-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2582d6db-e4af-427d-9c09-17022702f111-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>区分大小写：与Java 一样，变量名、函数名以及其他一切东西都是区分大小写的。</p>
<p>注释：单行注释：&#x2F;&#x2F; 注释内容；多行注释：&#x2F;* 注释内容 *&#x2F;</p>
<p>每行结尾的分号可有可无。</p>
<p>大括号表示代码块。</p>
<h4 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2891e753-e511-4814-aef4-52e24395ee90-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>命名规则：</p>
<ul>
<li><p>组成字符可以是任何字母、数字、下划线 (_) 或美元符号 ($) 。</p>
</li>
<li><p>数字不能开头。</p>
</li>
<li><p>建议使用驼峰命名。</p>
</li>
</ul>
<p>定义：</p>
<ul>
<li><p>用var关键字 ( variable 的缩写 ) 来声明。</p>
</li>
<li><p>同一变量可以存放不同类型的值。</p>
</li>
</ul>
<p>特点：</p>
<ul>
<li><p>作用域比较大，全局变量。</p>
</li>
<li><p>可以重复定义的，但后面的覆盖前面的</p>
</li>
</ul>
<p>注意：</p>
<ul>
<li><p>ECMAScript6 新增了 let 关键字来定义变量。它的用法类似于 var，但是所声明的变量，只在 let 关键字所在的代码块内有效，且不允许重复声明。</p>
</li>
<li><p>ECMAScript6 新增了 const 关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变。</p>
</li>
</ul>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>引用类型</p>
<p>原始类型：</p>
<ul>
<li>number：数字 ( 整数、小数、NaN ( Not a Number ) )</li>
<li>string：字符串，单双引皆可</li>
<li>boolean：布尔</li>
<li>null：对象为空</li>
<li>undefined：当声明的变量未初始化时，该变量的默认值是undefined</li>
</ul>
<p>使用 typeof 运算符可以获取数据类型。</p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>字符串类型转为数字：</p>
<ul>
<li>将字符串字面值转为数字。 如果字面值不是数字，则转为NaN。</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;12&quot;</span>)); <span class="comment">//12</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;12A45&quot;</span>)); <span class="comment">//12</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;A45&quot;</span>)); <span class="comment">//NaN ( not a number )</span></span><br></pre></td></tr></table></figure></div>



<p>其他类型转为boolean：</p>
<ul>
<li>Number：0和NaN为false，其他均转为true。</li>
<li>String：空字符串为false，其他均转为true。</li>
<li>Null和 undefined：均转为false。</li>
</ul>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/47ac47da-f475-419f-93eb-1bba0a1af413-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>&#x3D;&#x3D;与&#x3D;&#x3D;&#x3D;的区别：</p>
<ul>
<li>&#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换。</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> _age = <span class="string">&quot;20&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> $age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(age == _age); <span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>(age === _age); <span class="comment">//flase</span></span><br><span class="line"><span class="title function_">alert</span>(age === $age); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>

<h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4><p>if…else if …else…</p>
<p>switch</p>
<p>for</p>
<p>while</p>
<p>do…while</p>
<h3 id="函数（即方法）"><a href="#函数（即方法）" class="headerlink" title="函数（即方法）"></a>函数（即方法）</h3><h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><p>函数(方法)是被设计为执行特定任务的代码块。</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>avaScript 函数通过 function 关键字进行定义。</p>
<p>语法：</p>
<ul>
<li>1、function 函数名 （形参1，形参2……）{ 函数体 }</li>
<li>2、var 函数名 &#x3D; function(形参1,形参2…..) { 函数体 }</li>
</ul>
<p>注意：</p>
<ul>
<li><p>形式参数不需要类型。因为JavaScript是弱类型语言。</p>
</li>
<li><p>返回值也不需要定义类型，可以在函数内部直接使用return返回即可。</p>
</li>
</ul>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>函数名 (实际参数列表)</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="Array（数组）"><a href="#Array（数组）" class="headerlink" title="Array（数组）"></a>Array（数组）</h4><p>定义：</p>
<ul>
<li><p>var 变量名 &#x3D; new Array ( 元素列表 )；</p>
</li>
<li><p>var 变量名 &#x3D; [ 元素列表 ]；</p>
</li>
<li><p>变量名 [ 索引 ] &#x3D; 值；</p>
</li>
</ul>
<p>属性：</p>
<ul>
<li>length：设置或返回数组中元素的数量。</li>
</ul>
<p>特点：</p>
<ul>
<li>长度可变、类型可变。</li>
</ul>
<p>方法：</p>
<ul>
<li>forEach ( )<ul>
<li>遍历数组中的每个有值的元素，并调用一次传入的函数。</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arr是数组</span></span><br><span class="line">arr.<span class="title function_">forEash</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 箭头函数:(...) =&gt; &#123;...&#125; -- 简化函数定义</span></span><br><span class="line">arr.<span class="title function_">forEash</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>push ( )</p>
<ul>
<li>将新元素添加到数组的末尾，并返回新的数组。</li>
</ul>
</li>
<li><p>splice ( )</p>
<ul>
<li>从数组中删除元素。第一个参数是从什么位置开始删，第二个参数是删几个。</li>
</ul>
</li>
</ul>
<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p>定义：</p>
<ul>
<li>var 变量名 &#x3D; new String ( “……” ) ;</li>
<li>var 变量名 &#x3D; “……”；</li>
</ul>
<p>属性：</p>
<ul>
<li>length：字符串的长度。</li>
</ul>
<p>方法：</p>
<ul>
<li><p>charAt ( )</p>
<ul>
<li>返回在指定位置的字符。</li>
</ul>
</li>
<li><p>indexOf ( )</p>
<ul>
<li>检索字符串位置。</li>
</ul>
</li>
<li><p>trim ( )</p>
<ul>
<li>去除字符串两边的空格。</li>
</ul>
</li>
<li><p>substring ( )</p>
<ul>
<li>提取字符串中两个指定的索引号之间的字符。左闭右开。</li>
</ul>
</li>
</ul>
<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>自定义对象:</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/6b283f80-7343-45d7-a66c-c088a526c04f-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>介绍:</p>
<ul>
<li>JavaScript Object Notation，JavaScript对象标记法。JSON是通过JavaScript对象标记法书写的文本。由于其语法简单，层次结构鲜明，现多用于作为数据载体，在网络中进行数据传输。</li>
</ul>
<p>定义：</p>
<ul>
<li>var 变量名 &#x3D; { “key1” : value1，”key2” : value2 …..}；</li>
<li>value的数据类型：<ul>
<li>数字 ( 整数或浮点数 )</li>
<li>字符串 ( 在双引号中 )</li>
<li>逻辑值 ( true 或 false )</li>
<li>数组 ( 在方括号中 )</li>
<li>对象 ( 在花括号中 )</li>
<li>null</li>
</ul>
</li>
</ul>
<p>转换：</p>
<ul>
<li>JSON字符串转为JS对象：</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>JS对象转为JSON字符串：</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsObject);</span><br></pre></td></tr></table></figure></div>

<h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>介绍：</p>
<ul>
<li>Browser Obiect Model 浏览器对象模型，允许JavaScript 与浏览器对话，Javacript 将浏览器的各个组成部分封装为对象。</li>
</ul>
<p>组成：</p>
<ul>
<li>Window：浏览器窗口对象</li>
<li>Navigator：浏览器对象</li>
<li>Screen：屏幕对象</li>
<li>History：历史记录对象</li>
<li>Location：地址栏对象</li>
</ul>
<p>Window：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8a5db09e-cb86-4001-bb0a-1b0f863edf58-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定时器-setInterval -- 周期性的执行某一个函数</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	i++;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器执行了&quot;</span>+ i +<span class="string">&quot;次&quot;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器-setTimeout -- 延迟指定时间执行一次</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;JS&quot;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></div>

<p>Location：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/17a8a14b-2c53-4ea7-a988-75efd626ee30-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">location.<span class="property">href</span>; <span class="comment">//返回本地地址。</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;https://www.itcast.cn&quot;</span>; <span class="comment">//自动跳转到该地址。</span></span><br></pre></td></tr></table></figure></div>

<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>介绍：</p>
<ul>
<li>Document object Model，文档对象模型。</li>
</ul>
<p>组成：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/77403e16-9cff-461a-9bdd-0e3c092a527c-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>JavaScript 通过DOM，能够对HTML进行操作：</p>
<ul>
<li>改变HTML元素的内容。</li>
<li>改变HTML元素的样式(CSS)。</li>
<li>对HTML DOM 事件作出反应。</li>
<li>添加和删除HTML元素。</li>
</ul>
<p>方法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9cde866d-df6b-4c9b-bff2-78ed287881da-25143160.jpg"
                      alt="img"
                ><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b2f93c99-f5ae-42ae-a0ee-a927e2a59407-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
</ul>
<h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><p>事件：</p>
<ul>
<li>HTML事件是发生在HTML元素上的“事情”。比如：按钮被点击、鼠标移动到元素上、按下键盘按键。</li>
</ul>
<p>事件监听：</p>
<ul>
<li>JavaScript可以在事件被侦测到时执行代码。</li>
</ul>
<p>事件绑定：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/584141c9-8ba6-4f8f-94fa-4a47eee9f9f4-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>常见事件：</p>
<ul>
<li><table>
<thead>
<tr>
<th>事件名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>鼠标单击事件</td>
</tr>
<tr>
<td>onblur</td>
<td>元素失去焦点</td>
</tr>
<tr>
<td>onfocus</td>
<td>元素获得焦点</td>
</tr>
<tr>
<td>onload</td>
<td>某个页面或图像被完成加载</td>
</tr>
<tr>
<td>onsubmit</td>
<td>当表单提交时触发该事件</td>
</tr>
<tr>
<td>onkeydown</td>
<td>某个键盘的键被按下</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标被移到某元素之上</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标从某元素移开</td>
</tr>
</tbody></table>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入框聚焦后，展示小写; 输入框离焦后，展示大写; -- onfocus，onblur</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lower</span>(<span class="params"></span>)&#123; <span class="comment">//小写</span></span><br><span class="line">	<span class="comment">//获取输入框元素对象</span></span><br><span class="line">	<span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">	<span class="comment">//将值转为小写</span></span><br><span class="line">	input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">upper</span>(<span class="params"></span>)&#123; <span class="comment">//大写</span></span><br><span class="line">	<span class="comment">//获取输入框元素对象</span></span><br><span class="line">	<span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">	<span class="comment">//将值转为小写</span></span><br><span class="line">	input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-VUE"><a href="#5-VUE" class="headerlink" title="5- VUE"></a>5- VUE</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/23f9b571-0ed1-4fcc-a20e-390275a36021-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/49554752-9b28-47bf-9126-650c12ca840a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>介绍：</p>
<ul>
<li>HTML 标签上带有 V-前缀 的特殊属性，不同指令具有不同含义。例如：v-if，v-for…</li>
</ul>
<p>常用指令：</p>
<ul>
<li><table>
<thead>
<tr>
<th>指令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>v-bind</td>
<td>为HTML标签绑定属性值，如设置 href，css样式等</td>
</tr>
<tr>
<td>v-model</td>
<td>在表单元素上创建双向数据绑定</td>
</tr>
<tr>
<td>v-on</td>
<td>为HTML标签绑定事件</td>
</tr>
<tr>
<td>v-if</td>
<td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td>
</tr>
<tr>
<td>v-else-if</td>
<td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td>
</tr>
<tr>
<td>v-else</td>
<td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td>
</tr>
<tr>
<td>v-show</td>
<td>根据条件展示某元素，区别在于切换的是display属性的值</td>
</tr>
<tr>
<td>v-for</td>
<td>列表渲染，遍历容器的元素或者对象的属性</td>
</tr>
</tbody></table>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/7fce8c79-9f78-4632-b7ca-9903f30593af-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/346bd930-c4b0-480a-bd26-5087756b0639-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/34e3adee-0ed8-4de1-96ad-07dcd93a436e-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d48312ed-475d-4b9e-b4d6-e966f25768e0-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
</ul>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>介绍：</p>
<ul>
<li>指一个对象从创建到销毁的整个过程。</li>
</ul>
<p>生命周期的八个阶段：</p>
<ul>
<li><p>每触发一个生命周期事件，会自动执行一个生命周期方法 ( 钩子 )。</p>
</li>
<li><table>
<thead>
<tr>
<th>状态</th>
<th>阶段周期</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>创建前</td>
</tr>
<tr>
<td>created</td>
<td>创建后</td>
</tr>
<tr>
<td>beforeMount</td>
<td>挂载前</td>
</tr>
<tr>
<td>mounted</td>
<td>挂载完成</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>更新前</td>
</tr>
<tr>
<td>updated</td>
<td>更新后</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>销毁前</td>
</tr>
<tr>
<td>destroyed</td>
<td>销毁后</td>
</tr>
</tbody></table>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5904f391-b232-4840-a5a8-f16fba37ff46-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<p>mounted：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。(发送请求到服务端，加载数据)</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Vue挂载完毕,发送请求获取数据&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>	</span><br></pre></td></tr></table></figure></div>

<h2 id="6-AJAX"><a href="#6-AJAX" class="headerlink" title="6- AJAX"></a>6- AJAX</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>Asynchronous JavaScript And XML，异步的 JavaScript 和 XML 。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。</p>
<p>异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。如：搜索联想、用户名是否可用的校验等。</p>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b68f86d7-8b35-4640-be06-92da8350689e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="XMLHttpRequest-对象属性"><a href="#XMLHttpRequest-对象属性" class="headerlink" title="XMLHttpRequest 对象属性"></a>XMLHttpRequest 对象属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>onreadystatechange</td>
<td>定义当 readyState 属性发生变化时被调用的函数。</td>
</tr>
<tr>
<td>readyState</td>
<td>保存 XMLHttpRequest 的状态。0：请求未初始化；1：服务器连接已建立；2：请求已收到；                   3：正在处理请求；4：请求已完成且响应已就绪。</td>
</tr>
<tr>
<td>responseTest</td>
<td>以字符串返回响应数据。</td>
</tr>
<tr>
<td>responseXML</td>
<td>以 XML 数据返回响应数据。</td>
</tr>
<tr>
<td>status</td>
<td>返回请求的状态号。200：”OK” ；403：”Forbidden” ；404：”Not Found” 。</td>
</tr>
<tr>
<td>statusText</td>
<td>返回状态文本 ( 比如 “OK” 或 “Not Found” )</td>
</tr>
</tbody></table>
<h3 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3d20750f-26d6-4927-acee-2ee6317810fb-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>请求方式别名：</p>
<ul>
<li>axios . get (url [ , config])</li>
<li>axios . delete (url [ , config])</li>
<li>axios . post (url [ , data[config]])</li>
<li>axios . put (url [ , data[config]])</li>
</ul>
<p>实例：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;#app&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>入职日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>最后操作时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(emp,index) in emps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;emp.image&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;emp.gender == 1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;emp.gender == 2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.job&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.entrydate&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.updatetime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">emps</span>:[]</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="comment">//发送异步请求,加载数据</span></span></span><br><span class="line"><span class="language-javascript">        	axois.<span class="title function_">get</span>(<span class="string">&quot;http://......&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        		<span class="variable language_">this</span>.<span class="property">emps</span> = result.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        	&#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//数据</span><br><span class="line">&#123;</span><br><span class="line">	&quot;code&quot;: 1,</span><br><span class="line">	&quot;message&quot;: &quot;success&quot;,</span><br><span class="line">	&quot;data&quot;: [</span><br><span class="line">		&#123;</span><br><span class="line">			&quot;id&quot;: 1,</span><br><span class="line">			&quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">			&quot;image&quot;: &quot;http://......&quot;,</span><br><span class="line">			&quot;gender&quot;: 1,</span><br><span class="line">			&quot;job&quot;: &quot;班主任&quot;,</span><br><span class="line">			&quot;entrydate&quot;: &quot;2023-01-01&quot;,</span><br><span class="line">			&quot;updatetime&quot;: &quot;2023-01-01 12:00:00&quot;	</span><br><span class="line">        &#125;,</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="7-前端工程化"><a href="#7-前端工程化" class="headerlink" title="7- 前端工程化"></a>7- 前端工程化</h2><h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><p>产品经理通过页面原型和需求文档分析得到接口文档。</p>
<h3 id="Vue项目创建"><a href="#Vue项目创建" class="headerlink" title="Vue项目创建"></a>Vue项目创建</h3><h4 id="命令创建"><a href="#命令创建" class="headerlink" title="命令创建"></a>命令创建</h4><p>命令：vue create 项目名</p>
<h4 id="图形化创建"><a href="#图形化创建" class="headerlink" title="图形化创建"></a>图形化创建</h4><p>命令：vue ui</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240604112907161.png"
                      alt="image-20240604112907161"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240604112953395.png"
                      alt="image-20240604112953395"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240604113029049.png"
                      alt="image-20240604113029049"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240604113115268.png"
                      alt="image-20240604113115268"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240604113159083.png"
                      alt="image-20240604113159083"
                ></p>
<h3 id="Vue项目"><a href="#Vue项目" class="headerlink" title="Vue项目"></a>Vue项目</h3><p>目录结构：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ed4f161e-c20a-47c4-91ee-b2ab50bcffc4-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>配置端口：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9fd1553a-9a5d-4d0e-8802-91bfe9483783-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>启动：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/67a0876d-b993-4aa3-9533-2face7ed39a0-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>开发流程：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/238d7865-1deb-48db-89b7-1242d49cf6ae-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/bb0cce68-d233-4e45-953f-48f62fc35f90-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="8-Element"><a href="#8-Element" class="headerlink" title="8- Element"></a>8- Element</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a class="link"   href="https://element.eleme.cn/#/zh-CN" >Element - 网站快速成型工具 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>安装：</p>
<ul>
<li>npm i element-ui -S</li>
</ul>
<p>导包：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240301175049772.png"
                      alt="image-20240301175049772"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240301175137931.png"
                      alt="image-20240301175137931"
                ></li>
</ul>
<p>使用组件：</p>
<ul>
<li>官网搜索，然后复制并改动。</li>
</ul>
<h2 id="9-Vue路由"><a href="#9-Vue路由" class="headerlink" title="9- Vue路由"></a>9- Vue路由</h2><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p>URL 中的 hash(#号) 与组件之间的对应关系。</p>
<h3 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h3><p>介绍：</p>
<ul>
<li>Vue Router 是 Vue 的官方路由。</li>
</ul>
<p>组成：</p>
<ul>
<li>VueRouter：路由器类，根据路由请求在路由视图中动态渲染选中的组件。</li>
<li>&lt; router-link &gt;：请求链接组件，浏览器会解析成&lt; a &gt;。</li>
<li>&lt; router-view &gt;：动态视图组件，用来渲染展示与路由路径对应的组件。</li>
</ul>
<p>作用：</p>
<ul>
<li>路由链接组件 router-link —&gt; 路由请求 —&gt; 路由器 VueRouter (路由表) —&gt; 更新 —&gt; 路由展示组件 router-view 。</li>
</ul>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240302195904255.png"
                      alt="image-20240302195904255"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240302200239694.png"
                      alt="image-20240302200239694"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240302200654028.png"
                      alt="image-20240302200654028"
                ></p>
</li>
</ul>
<h2 id="10-打包部署"><a href="#10-打包部署" class="headerlink" title="10- 打包部署"></a>10- 打包部署</h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8e7d3169-ac00-4b10-bf52-34216d50111f-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="部署（Nginx）"><a href="#部署（Nginx）" class="headerlink" title="部署（Nginx）"></a>部署（Nginx）</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f4ff2e85-bc8c-43e6-91d6-73d6c45f5927-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>Nginx默认占用80端口号，如果80端口号被占用，可以在nginx.conf中修改端口号。</p>
<p>查看80端口谁占用：netstat -ano|findStr 80 。</p>
<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240302201812625.png"
                      alt="image-20240302201812625"
                ></li>
</ul>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h3><p>Maven 是 apache（ 世界上最大、最受欢迎、非盈利性、开源软件基金会） 旗下的一个开源项目，是一款用于管理和构建java项目的工具。它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/502264aa-0a13-4a25-91a2-93c4cf3ef874-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>方便快捷的管理项目依赖的资源 ( jar包 )，避免版本冲突问题。</p>
<ul>
<li>在 pom.xml 中。</li>
</ul>
<p>标准跨平台 (Linux、Windows、Macos)的自动化项目构建方式。</p>
<ul>
<li>右侧Maven命令，然后再target包下实现。</li>
</ul>
<p>提供标准、统一的项目结构。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/60de190d-c354-4567-ab0a-61e7ee3ee4c7-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h3><p>介绍：</p>
<ul>
<li>使用坐标来定义项目或引入项目中需要的依赖。</li>
<li>Maven 的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置。</li>
</ul>
<p>组成：</p>
<ul>
<li><p>groupld：定义当前Maven项目隶属组织名称 (通常是域名反写，例如：com.itheima)。</p>
</li>
<li><p>artifactld：定义当前Maven项目名称 (通常是模块名称，例如：order-service、goods-service)。</p>
</li>
<li><p>version：定义当前项目版本号。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="IDEA-导入-Maven-项目"><a href="#IDEA-导入-Maven-项目" class="headerlink" title="IDEA 导入 Maven 项目"></a>IDEA 导入 Maven 项目</h3><p>方法1：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/12712607-75d4-4c9b-ba6b-f615566a922d-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>方法2：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3d8978d7-f382-4659-af0b-ad3d543e893e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><p>依赖：</p>
<ul>
<li>指当前项目运行所需要的jar包，一个项目中可以引入多个依赖。</li>
</ul>
<p>配置：</p>
<ul>
<li><p>如果引入的依赖，在本地仓库不存在，将会连接远程仓库&#x2F;中央仓库，然后下载依赖。</p>
</li>
<li><p>如果不知道依赖的坐标信息，可以到 <a class="link"   href="https://mvnrepository.com/" >https://mvnrepository.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 搜索。</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b868d8ae-7c7a-431f-a685-e3886732ed38-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><p>直接依赖：</p>
<ul>
<li>在当前项目中通过依赖配置建立的依赖关系。</li>
</ul>
<p>间接依赖：</p>
<ul>
<li>被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源。</li>
</ul>
<p>排除依赖：</p>
<ul>
<li>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>将传递依赖图表化：</p>
<ul>
<li>在pom.xml右击</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5a8117bb-10c6-496a-bf8f-f902af30e3b7-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c28442eb-fc1f-430d-a9e9-d14cb41fe036-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><p>介绍：</p>
<ul>
<li>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一。</li>
</ul>
<p>3套相互独立的生命周期：</p>
<ul>
<li>clean：清理工作。</li>
<li>default：核心工作，如：编译、测试、打包、安装、部署等。</li>
<li>site：生成报告、发布站点等。</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/707d7b00-abfa-4766-b7dc-5c381d8af21c-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e34e8ced-316d-4faf-90dd-b15d1f117797-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>执行指定生命周期的两种方式：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5815c5d7-804f-4195-96fb-977ba127a80e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h2><h3 id="分模块设计与开发"><a href="#分模块设计与开发" class="headerlink" title="分模块设计与开发"></a>分模块设计与开发</h3><p>介绍：</p>
<ul>
<li>将项目按照功能拆分成若干个子模块。</li>
<li>方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享。</li>
<li>分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。</li>
</ul>
<p>实例：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b8be78b8-a461-4423-830c-000234825c07-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/aac32427-91b3-49ae-94d1-acdd3d48e958-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/059ee1ab-720b-48ff-9936-721317f4c56d-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="继承与聚合"><a href="#继承与聚合" class="headerlink" title="继承与聚合"></a>继承与聚合</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>介绍：</p>
<ul>
<li>继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</li>
<li>简化依赖配置、统一管理依赖。</li>
</ul>
<p>实现 (pom.xml)：</p>
<ul>
<li>&lt; parent &gt; …… &lt; &#x2F;parent &gt;</li>
</ul>
<p>&lt; dependencyManagement &gt;与&lt; dependencies &gt;的区别：</p>
<ul>
<li>&lt; dependencies &gt;是直接依赖，在父工程配置了依赖，子工程会直接继承下来。</li>
<li>&lt; dependencyManagement &gt;是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖 (无需指定版本)。</li>
</ul>
<h4 id="继承实现"><a href="#继承实现" class="headerlink" title="继承实现"></a>继承实现</h4><p>注意：</p>
<ul>
<li>在子工程中，配置了继承关系之后，坐标中的 &lt; groupId &gt; 是可以省略的，因为会自动继承父工程的。</li>
<li>&lt; relativePath &gt; 指定父工程的 pom.xml 文件的相对位置 (如果不指定，将从本地仓库 &#x2F; 远程仓库查找该工程)。</li>
<li>若父子工程都配置了同一个依赖的不同版本，以子工程的为准。</li>
</ul>
<p>实现：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9752e41b-e0d6-4b7e-a2d2-dd747b1e81c0-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/13b99c46-b96c-4719-bba5-e6262e2cce71-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/691d2268-1a15-46e8-9a82-5c1451838efc-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h4><p>介绍：</p>
<ul>
<li>在maven中，可以在父工程的 pom文件中通过&lt; dependencyManagement &gt;来统一管理依赖版本。</li>
<li>子工程引入依赖时，无需指定&lt; version &gt;版本号，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</li>
</ul>
<p>实现：</p>
<ul>
<li>方法1：<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c541f307-b3f4-4f89-991c-e44048298b25-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
<li>方法2：<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/dfea8567-9505-4125-98d2-14184c914f8a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
</ul>
<h4 id="聚合实现"><a href="#聚合实现" class="headerlink" title="聚合实现"></a>聚合实现</h4><p>介绍：</p>
<ul>
<li>聚合：将多个模块组织成一个整体，同时进行项目的构建。</li>
<li>聚合工程：一个不具有业务功能的“空”工程 (有且仅有一个 pom.xml 文件)。</li>
<li>一般来说，父工程也是聚合工程。</li>
<li>聚合工程中所包含的模块，在构建时，会自动根据模块间的依赖关系设置构建顺序，与聚合工程中模块的配置书写位置无关。</li>
</ul>
<p>实现：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f4d84dfd-7148-4233-b136-4e5d83ff6577-25143160.jpg"
                      alt="img"
                ></li>
<li>然后再聚合工程中执行打包操作。</li>
</ul>
<h4 id="继承与聚合的差异"><a href="#继承与聚合的差异" class="headerlink" title="继承与聚合的差异"></a>继承与聚合的差异</h4><p>作用：</p>
<ul>
<li>继承用于简化依赖配置、统一管理依赖。</li>
<li>聚合用于快速构建项目。</li>
</ul>
<p>相同点：</p>
<ul>
<li>聚合与继承的 pom.xml 文件打包方式均为pom，可以将两种关系制作到同一个pom文件中。</li>
<li>聚合与继承均属于设计型模块，并无实际的模块内容。</li>
</ul>
<p>不同点：</p>
<ul>
<li><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己。</p>
</li>
<li><p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些。</p>
</li>
</ul>
<h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><h4 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h4><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</p>
<p>私服在企业项目开发中，一个项目&#x2F;公司，只需要一台即可 (无需我们自己搭建，会使用即可)。</p>
<p>依赖查找顺序：</p>
<ul>
<li>本地仓库、私服、中央仓库 (从前到后)。</li>
</ul>
<p>项目版本：</p>
<ul>
<li>RELEASE(发行版本):功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li>
<li>SNAPSHOT(快照版本):功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li>
</ul>
<h4 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f39c4c4d-9871-43ad-a71b-05fe8904b3c7-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>第一步的&lt; id &gt;要和第二步的&lt; id &gt;对应。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/24fcca49-47a9-4390-88de-42618628f830-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/1670214e-81b4-403d-8c8b-e11a5074882f-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/aa31e951-c8a1-497a-a51e-ca4a1c4bec6f-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/b773e8d3-c3c4-4dc0-a544-32e98b942879-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5275ed71-8dbf-452c-b922-09134cae8258-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>在 pom.xml 文件中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/baca0177-644d-44de-a1d8-37b1b059e021-25143160.jpg"
                      alt="img"
                ></p>
<h2 id="SpringBoot-Web入门"><a href="#SpringBoot-Web入门" class="headerlink" title="SpringBoot Web入门"></a>SpringBoot Web入门</h2><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/17afca6d-5110-47fc-8133-106a36acb7ad-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/33efaa01-1a4d-4bba-b64f-c0aa1a1ca52c-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a872536a-77b2-4790-b60e-bfcab3b3ca95-25143160.jpg"
                      alt="img"
                ></li>
<li></li>
</ul>
<h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><h4 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h4><p>概念：</p>
<ul>
<li>HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则。</li>
</ul>
<p>特点：</p>
<ul>
<li>基于TCP协议：面向连接，安全。</li>
<li>基于请求-响应模型的：一次请求对应一次响应。</li>
<li>HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。<ul>
<li>缺点：多次请求间不能共享数据。</li>
<li>优点：速度快。</li>
</ul>
</li>
</ul>
<h4 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/05482e19-dcf7-41c6-b950-1429662f8cc2-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>请求头：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/41616e37-7792-476b-8a3b-563f14e89862-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/1cab31d2-95b8-4986-9152-abdd3ecf8df4-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>状态码：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/defb7db1-398b-445c-abc5-508897fb5364-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d471a499-446e-4358-820d-62c7426922a8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>响应头：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2913802f-2faa-4fcb-b171-489dfd67349d-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h4><p>介绍：</p>
<ul>
<li>Web服务器是一个软件程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷，主要功能是“提供网上信息浏览服务”。</li>
</ul>
<p>Tomcat：</p>
<ul>
<li>一个轻量级的web服务器，支持servlet、jsp等少量javaEE规范，也被称为web容器、servlet容器。</li>
<li>基于Springboot开发的web应用程序，内置了tomcat服务器，当启动类运行时，会自动启动内嵌的tomcat服务器。默认端口8080。</li>
<li>起步依赖：spring-boot-starter-web；spring-boot-starter-test。</li>
</ul>
<h2 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h2><h3 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9c9b7907-8f98-4d02-bd27-428ac896cae8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h4><p>get样式 (SpringBoot方式)：</p>
<ul>
<li>基本：<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9431bbe1-79f4-4bf1-9e7a-fb340dbe4ebd-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
<li>@ RequestParam注解 &#x2F; 映射<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3de87bcd-ec96-4985-a635-7c4cbc1324a0-25143160.jpg"
                      alt="img"
                ></li>
</ul>
</li>
</ul>
<p>post样式：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8441816a-af26-46a9-878d-e708346510aa-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h4><p>简单：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/715af525-45a1-4b05-a937-309b81d20d09-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>复杂：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/75a9310f-f5b0-4593-8365-caafc84f38d4-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a387e584-0c12-431c-b78c-3113dd483c47-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/5bf27d72-3b8d-444c-853d-58559f05975c-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c28937ee-e3a0-43fc-bb96-3f64d76ab2c8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="json参数"><a href="#json参数" class="headerlink" title="json参数"></a>json参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/6a8bafef-4342-4a1e-8d2c-690c186e032c-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e49f8bd9-8def-4b1b-9593-f212676b68c8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ ResponseBody"></a>@ ResponseBody</h4><p>类型：方法注解、类注解。</p>
<p>位置：Controller方法上&#x2F;类上。</p>
<p>作用：将方法返回值直接响应，如果返回值类型是 实体对象&#x2F;集合，将会转换为JSON格式响应。</p>
<p>说明：@ RestController &#x3D; @ Controller + @ ResponseBody</p>
<h4 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建pojo.Result</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，200 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//响应信息，描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;<span class="comment">//增删改 成功响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;<span class="comment">//查询 成功响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;<span class="comment">//失败响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller应用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">    addr.setcity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr2.setProvince(<span class="string">&quot;陝西”);</span></span><br><span class="line"><span class="string">    addr2.setcity(&quot;</span>西安”)</span><br><span class="line">                      </span><br><span class="line">    list.add(addr);</span><br><span class="line">    list.add(addr2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h3><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f759338d-a379-4e43-ada4-d4d09f3fa282-25143160.jpg"
                      alt="img"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/901156b2-f7f9-47e3-9f53-a730814a17aa-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h4><p>内聚：软件中各个功能模块内部的功能联系。</p>
<p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p>
<p>软件设计原则：高内聚、低耦合。</p>
<p>控制反转：lnversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部(容器)，这种思想称为控制反转。</p>
<p>依赖注入：Dependency lnjection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p>
<p>Bean对象：IOC容器中创建、管理的对象，称之为bean。</p>
<h4 id="IOC-DI-入门"><a href="#IOC-DI-入门" class="headerlink" title="IOC &amp; DI 入门"></a>IOC &amp; DI 入门</h4><p>@ Component：将当前类交给IOC容器管理，成为IOC容器中的bean。</p>
<p>@ Autowired：运行时，IOC容器会提俱该类型的bean对象，并赋值给该变量 - 依赖注入。</p>
<p>如果想用不同的bean，只需要保留你需要的类的@ Component。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/7701847f-c8cb-4dcd-a3ec-f7c7781f7653-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h4><p>Bean的声明：</p>
<ul>
<li><table>
<thead>
<tr>
<th>注解</th>
<th>声明</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>@ Component</td>
<td>声明bean的基础注解</td>
<td>不属于以下三类时，用此注解</td>
</tr>
<tr>
<td>@ Controller</td>
<td>@ Component的衍生注解</td>
<td>标注在控制器类上</td>
</tr>
<tr>
<td>@ Service</td>
<td>@ Component的衍生注解</td>
<td>标注在业务类上</td>
</tr>
<tr>
<td>@ Repository</td>
<td>@ Component的衍生注解</td>
<td>标注在数据访问类上 (由于与mybatis整合，用的少)</td>
</tr>
</tbody></table>
</li>
<li><p>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</p>
</li>
<li><p>使用以上四个注解都可以声明bean，但是在spring boot集成web开发中，声明控制器bean只能用@ Controller。</p>
</li>
</ul>
<p>Bean组件扫描：</p>
<ul>
<li>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ ComponentScan 扫描。</li>
<li>@ ComponentScan 注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解 @ SpringBootApplication 中，默认扫描的范围是启动类所在包及其子包。</li>
</ul>
<h4 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h4><p>Bean注入：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2ef3236c-8172-4622-b370-acef5b5c3565-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h4><p>添加配制</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/154b72b8-53f1-43a9-a8cb-dfc4ab32f8c3-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>左侧结构（SpringBoot、Maven）</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ef6669ff-be91-4924-9c00-4e96d7f4431a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>数据库</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/52baab48-68af-4a26-9c3c-43eed34436b1-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>配置SQL提示</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/37753771-2a63-4f0d-b083-e21b3f045a59-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line"></span><br><span class="line">spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url = jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = <span class="number">690609</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Userss 变量、构造器、getset方法、toString方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Userss</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//用户密码    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UserssMapper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> <span class="comment">//在运行时，会自动生成该接口的实现类对象(代理对象)，并且将该对象交给IOC容器管理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserssMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select(&quot;select * from test.userss&quot;)</span> <span class="comment">//查询全部用户信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Userss&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SpringBootMyBatisApplicationTests</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span> <span class="comment">//springboot整合单元测试的注解</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootMyBatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserssMapper userssMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListUserss</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Userss&gt; usersslist = userssMapper.list();</span><br><span class="line">        usersslist.stream().forEach(userss -&gt; &#123;</span><br><span class="line">            System.out.println(userss);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="lombok工具包"><a href="#lombok工具包" class="headerlink" title="lombok工具包"></a>lombok工具包</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/db7e5834-d9c0-4b0f-a32d-811d5f1eba93-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定mybatis输出日志的位置，输出控制台</span></span><br><span class="line">mybatis.configuration.log-impl = org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller应用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@Slf4j</span><span class="comment">//日志记录框架注解</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XinxiController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line">    <span class="keyword">private</span> XinxiService xinxiService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//private static Logger log = LoggerFactory.getLogger(XinxiController.class);//日志记录框架</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/studentx&quot;,method = RequestMethod.POST)//指定请求方式为 POST</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//添加信息</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/studentx&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">insert</span><span class="params">(<span class="meta">@RequestBody</span> Xinxi xinxi)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;添加学生信息&quot;</span>,xinxi);<span class="comment">//日志</span></span><br><span class="line">        <span class="comment">//调用service添加信息</span></span><br><span class="line">        xinxiService.insert(xinxi);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p>sun公司提供的一套操作关系型数据库的API(规范)。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/7a178f3f-7fa0-4439-bef8-bff5c08faca8-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><p>介绍：数据库连接池是个容器，负责分配、管理数据库连接 (Connection)。</p>
<p>优势：资源重用、提升系统响应速度、避免数据库连接遗漏。</p>
<p>标准接口：DataSource；</p>
<p>获取连接：Connection getConnection( ) throws SQLException；</p>
<p>产品：Druid (德鲁伊，阿里)、Hikari (SpringBoot默认)。</p>
<h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>性能更高（SQL语句只需要编译一次，再调用直接在缓存里）。</p>
<p>更安全（防止SQL注入）。</p>
<p>SQL注入：通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法。如：password &#x3D; ‘’or ‘1’&#x3D; ‘1’ ;</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/31de6117-f65b-4b85-925b-90c068fa9734-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符"></a>参数占位符</h4><table>
<thead>
<tr>
<th>#{……}</th>
<th>${……}</th>
</tr>
</thead>
<tbody><tr>
<td>执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值。</td>
<td>拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题。</td>
</tr>
<tr>
<td>使用时机：参数传递，都使用#{…}</td>
<td>使用时机：如果对表名、列表进行动态设置时使用。</td>
</tr>
</tbody></table>
<h4 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h4><p>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</p>
<p>解决方案：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启mybatis的驼峰命名自动映射开关</span></span><br><span class="line">mybatis.configuration.map-underscore-to-camel-<span class="keyword">case</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方案一：给字段起别名，让别名与实体类属性一致</span></span><br><span class="line">	<span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, &quot; + </span></span><br><span class="line"><span class="meta">		&quot;dept_id deptId, create_time createTime, update_time updateTime from emp where id = #&#123;id)</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">	public Emp getById(Integer id);</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">//方案二:通过@Results，@Result注解手动映射封装</span></span><br><span class="line"><span class="string">    @Results(&#123;</span></span><br><span class="line"><span class="string">        @Result(column =&quot;</span>dept_id<span class="string">&quot;, property = &quot;</span>deptId<span class="string">&quot;),</span></span><br><span class="line"><span class="string">        @Result(column=&quot;</span>create_time<span class="string">&quot;, property = &quot;</span>createTime<span class="string">&quot;)</span></span><br><span class="line"><span class="string">        @Result(column =&quot;</span>update_time<span class="string">&quot;, property = &quot;</span>updateTime<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    @Select(&quot;</span>select * from emp <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public Emp getById(Integer id);</span></span><br></pre></td></tr></table></figure></div>

<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>如果mapper接口方法形参只有一个普通类型的参数，# {…}里面的属性名可以随便写，如: # {id}、# {value}。</p>
<p>添加</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> 	<span class="meta">@Insert(&quot;insert into student.xinxi(stuname, id, gender, job, phone) values (#&#123;stuname&#125;,#&#123;id&#125;,#&#123;gender&#125;,#		&#123;job&#125;,#&#123;phone&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Xinxi xinxi)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主键返回</span></span><br><span class="line">	<span class="meta">@Options(keyProperty=&quot;id&quot;,useGeneratedKeys = true)</span> 会自动将生成的主键值，赋值给emp对象的id属性</span><br></pre></td></tr></table></figure></div>

<p>删除</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from student.xinxi where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">deleteByid</span><span class="params">(String id)</span>;</span><br></pre></td></tr></table></figure></div>

<p>修改</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update student.xinxi set stuname = #&#123;stuname&#125;,gender = #&#123;gender&#125;,job = #&#123;job&#125;,phone = #&#123;phone&#125; 		where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Xinxi xinxi)</span>;</span><br></pre></td></tr></table></figure></div>

<p>查询</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询</span></span><br><span class="line">	<span class="meta">@Select(&quot;select * from student.xinxi where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">	Xinxi <span class="title function_">select</span><span class="params">(string id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件查询(姓名模糊查询)</span></span><br><span class="line">	<span class="meta">@Select(&quot;select * from student.xinxi where stuname like concat(&#x27;%&#x27;, #&#123;stuname&#125;, &#x27;%&#x27;) and gender = #				&#123;gender&#125; and id = #&#123;id&#125;&quot;)</span></span><br><span class="line">	List&lt;Xinxi&gt; <span class="title function_">selectpro</span><span class="params">(String stuname, String gender, String id)</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h3><p>使用Mybatis的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/27c9ba2e-f793-4c0d-bb82-f39803c4bc51-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>介绍：随着用户的输入或外部条件的变化而变化的 SQL 语句，我们称为 动态SQL。</p>
<h4 id="sql-与-include"><a href="#sql-与-include" class="headerlink" title="&lt; sql &gt;与&lt; include &gt;"></a>&lt; sql &gt;与&lt; include &gt;</h4><p>&lt; sql &gt;：定义可重用的SQL片段。</p>
<p>&lt; include &gt;：通过属性refid，指定包含的SQL片段。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8fa1aaae-9a3e-4b47-8fba-a5542b952981-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="if-与-where-与-set"><a href="#if-与-where-与-set" class="headerlink" title="&lt; if 与&lt; where &gt;与&lt; set &gt;"></a>&lt; if 与&lt; where &gt;与&lt; set &gt;</h4><p>&lt; if &gt;：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。</p>
<p>&lt; where &gt;：where 元素只会在子元素有内容的情况下才插入where子句。而且会自动去除子句的开头的AND 或OR。</p>
<p>&lt; set &gt;：动态地在行首插入 SET 关键字，并会删掉额外的逗号。 (用在update语句中)。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lrq.mapper.XinxiMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;commonSelect&quot;</span>&gt;</span></span><br><span class="line">        select stuname, id, gender, job, phone</span><br><span class="line">        from student.xinxi</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update student.xinxi</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuname != null&quot;</span>&gt;</span></span><br><span class="line">                stuname = #&#123;stuname&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                gender  = #&#123;gender&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span></span><br><span class="line">                job = #&#123;job&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span></span><br><span class="line">                phone = #&#123;phone&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- resultType: 单条记录所封装的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listpro&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lrq.pojo.Xinxi&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonSelect&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuname != null and stuname != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                stuname like concat(&#x27;%&#x27;, #&#123;stuname&#125;, &#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND gender = #&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null and id != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="foreach"><a href="#foreach" class="headerlink" title="&lt; foreach &gt;"></a>&lt; foreach &gt;</h4><p>collection: 遍历的集合。</p>
<p>item: 遍历出来的元素。</p>
<p>separator: 分隔符。</p>
<p>open: 遍历开始前拼接的SQL片段。</p>
<p>close: 遍历结束后拼接的SQL片段。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testdeletepro</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;string&gt; ids = Arrays.asList(<span class="string">&quot;20221303033&quot;</span>,<span class="string">&quot;20221304044&quot;</span>);</span><br><span class="line">    xinxiMapper.deletepro(ids);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mapper</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deletepro</span><span class="params">(List&lt;String&gt; ids)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//Mapper.xml</span></span><br><span class="line">&lt;delete id=<span class="string">&quot;deletepro&quot;</span>&gt;</span><br><span class="line">    delete</span><br><span class="line">    from student.xinxi</span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach collection=<span class="string">&quot;ids&quot;</span> item=<span class="string">&quot;id&quot;</span> separator=<span class="string">&quot;,&quot;</span> open=<span class="string">&quot;(&quot;</span> close=<span class="string">&quot;)&quot;</span>&gt;</span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">	&lt;/foreach&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h2><h3 id="快速入门-3"><a href="#快速入门-3" class="headerlink" title="快速入门"></a>快速入门</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240310190417556.png"
                      alt="image-20240310190417556"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240310190504183.png"
                      alt="image-20240310190504183"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240310190557178.png"
                      alt="image-20240310190557178"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240310190625160.png"
                      alt="image-20240310190625160"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240310190655453.png"
                      alt="image-20240310190655453"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240310190726664.png"
                      alt="image-20240310190726664"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240310191000560.png"
                      alt="image-20240310191000560"
                ></p>
</li>
</ul>
<h3 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h3><p>MyBatisPlus (简称MP) 是基于MyBatis框架基础上开发的增强型工具，旨在简化开发、提高效率。</p>
<p>官网：<a class="link"   href="https://mybatis.plus/%E3%80%81https://mp.baomidou.com/" >https://mybatis.plus/、https://mp.baomidou.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>特性：</p>
<ul>
<li>无侵入：只做增强不做改变，不会对现有工程产生影响</li>
<li>强大的 CRUD 操作：内置通用 Mapper，少量配置即可实现单表CRUD 操作</li>
<li>支持 Lambda：编写查询条件无需担心字段写错</li>
<li>支持主键自动生成</li>
<li>内置分页插件</li>
<li>……</li>
</ul>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">	<span class="attr">configuration:</span></span><br><span class="line">		<span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.stdoutImp1</span></span><br></pre></td></tr></table></figure></div>

<h3 id="CRUD功能"><a href="#CRUD功能" class="headerlink" title="CRUD功能"></a>CRUD功能</h3><table>
<thead>
<tr>
<th>功能</th>
<th>自定义接口</th>
<th>MP接口</th>
</tr>
</thead>
<tbody><tr>
<td>新增</td>
<td>boolean save (T t)</td>
<td>int insert (T t)</td>
</tr>
<tr>
<td>删除</td>
<td>boolean delete (int id)</td>
<td>int deleteById (Serializable id)</td>
</tr>
<tr>
<td>修改</td>
<td>boolean update (T t)</td>
<td>int updateById (T t)</td>
</tr>
<tr>
<td>根据id查询</td>
<td>T getById (int id)</td>
<td>T selectById (Serializable id)</td>
</tr>
<tr>
<td>查询全部</td>
<td>List&lt; T &gt; getAll ( )</td>
<td>List&lt; T &gt; selectList ( )</td>
</tr>
<tr>
<td>分页查询</td>
<td>PageInfo&lt; T &gt; getAll (int page, int size)</td>
<td>IPage&lt; T &gt; selectPage (IPage&lt; T &gt; page)</td>
</tr>
<tr>
<td>按条件查询</td>
<td>List&lt; T &gt; getAll (Condition condition)</td>
<td>IPage&lt; T &gt; selectPage (Wrapper&lt; T &gt; queryWrapper)</td>
</tr>
</tbody></table>
<h3 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h3><p>1、设置分页拦截器作为Spring管理的bean</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpCongfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">pageInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加具体的拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2、执行分页查询</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetByPage</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//当前页码，每页数据总量</span></span><br><span class="line">    userDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页码:&quot;</span>+page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页数据总量:&quot;</span>+page.getsize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数:&quot;</span>+page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;数据总量:&quot;</span>+page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页数据:&quot;</span>+page.getRecords());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="条件查询功能"><a href="#条件查询功能" class="headerlink" title="条件查询功能"></a>条件查询功能</h3><h4 id="条件查询的三种格式"><a href="#条件查询的三种格式" class="headerlink" title="条件查询的三种格式"></a>条件查询的三种格式</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一:常规格式</span></span><br><span class="line"><span class="type">QueryWrapper</span> <span class="variable">qw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>); <span class="comment">//age小于10的</span></span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二:lambda格式按条件查询</span></span><br><span class="line">QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">qw.lambda().lt(User::getAge,<span class="number">10</span>); <span class="comment">//age小于10的</span></span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三:lambda格式按条件查询</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.lt(User::getAge,<span class="number">10</span>); <span class="comment">//age小于10的</span></span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条件(链式编程)</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line"></span><br><span class="line">lqw.lt(User::getAge,<span class="number">30</span>).ge(User::getAge,<span class="number">10</span>); <span class="comment">//10到30岁之间</span></span><br><span class="line">lqw.lt(User::getAge,<span class="number">10</span>).or().ge(User::getAge,<span class="number">30</span>); <span class="comment">//小于10岁或者大于30岁</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure></div>

<h4 id="条件查询null判定"><a href="#条件查询null判定" class="headerlink" title="条件查询null判定"></a>条件查询null判定</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建UserQuery</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟页面传递过来的查询数据</span></span><br><span class="line"><span class="type">UserQuery</span> <span class="variable">userQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">userQuery.getAge(<span class="number">10</span>);</span><br><span class="line">userQuery.getAge2(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件查询null判定</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line"><span class="comment">//先判定第一个参数是否为true，如果为true连接当前条件</span></span><br><span class="line">lqw.ge(<span class="literal">null</span> != userQuery.getAge() ,User::getAge, userQuery.getAge())</span><br><span class="line">   .lt(<span class="literal">null</span> != userQuery.getAge2() ,User::getAge, userQuery.getAge2());   </span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure></div>

<h4 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询结果包含模型类中部分属性</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(User::getId, User::getName, User::getAge);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询结果包含模型类中未定义的属性</span></span><br><span class="line">QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">qw.select(<span class="string">&quot;count(*) as nums, gender&quot;</span>); <span class="comment">//查询数据数 并取别名，显示分组名</span></span><br><span class="line">qw.groupBy(<span class="string">&quot;gender&quot;</span>); <span class="comment">//分组</span></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; maps = userDao.selectMaps(qw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure></div>

<h4 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录操作 等同于&quot;=&quot;</span></span><br><span class="line">lqw.eq(User::getName,<span class="string">&quot;root&quot;</span>).eq(User::getPassword,<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userDao.selectOne(lqw); <span class="comment">//只查询一个</span></span><br><span class="line">System.out.println(loginUser);</span><br><span class="line"></span><br><span class="line"><span class="comment">//范围查询 lt、le、gt、ge、eq、between</span></span><br><span class="line">lqw.between(User::getAge,<span class="number">10</span>,<span class="number">30</span>); <span class="comment">//age在10到30之间 前小后大</span></span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//模糊匹配 like</span></span><br><span class="line">lqw.like(User::getName,<span class="string">&quot;r&quot;</span>); <span class="comment">//%r%</span></span><br><span class="line">lqw.likeRight(User::getName,<span class="string">&quot;r&quot;</span>); <span class="comment">//r%</span></span><br><span class="line">lqw.likeLeft(User::getName,<span class="string">&quot;r&quot;</span>); <span class="comment">//%r</span></span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure></div>

<p>更多查询条件设置参看：<a class="link"   href="https://mybatis.plus/guide/wrapper.html#abstractwrapper" >https://mybatis.plus/guide/wrapper.html#abstractwrapper <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="字段映射与表名映射"><a href="#字段映射与表名映射" class="headerlink" title="字段映射与表名映射"></a>字段映射与表名映射</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\31518\AppData\Roaming\Typora\typora-user-images\image-20240312212827779.png"
                      alt="image-20240312212827779"
                ></li>
</ul>
<h4 id="TableField"><a href="#TableField" class="headerlink" title="@ TableField"></a>@ TableField</h4><p>问题一：表字段与编码属性设计不同步</p>
<p>​		value (默认)：设置数据库表字段名称。</p>
<p>问题二：编码中添加了数据库中未定义的属性</p>
<p>​		exist：设置属性在数据库表字段中是否存在，默认为true。此属性无法与value合并使用。</p>
<p>问题三：采用默认查询开放了更多的字段查看权限</p>
<p>​		select：设置属性是否参与查询，此属性与select ( )映射配置不冲突。</p>
<h4 id="TableName"><a href="#TableName" class="headerlink" title="@ TableName"></a>@ TableName</h4><p>问题四：表名与编码开发设计不同步</p>
<p>​		value：设置数据库表名称</p>
<p>全局配置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">	<span class="attr">global-config:</span></span><br><span class="line">		<span class="attr">db-config:</span></span><br><span class="line">			<span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br></pre></td></tr></table></figure></div>

<h3 id="ID生成策略"><a href="#ID生成策略" class="headerlink" title="ID生成策略"></a>ID生成策略</h3><h4 id="TableId"><a href="#TableId" class="headerlink" title="@ TableId"></a>@ TableId</h4><p>属性：</p>
<ul>
<li>value：设置数据库主键名称</li>
<li>type：设置主键属性的生成策略，值参照IdType枚举值</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>AUTO</td>
<td>使用数据库id自增策略，控制id生成</td>
</tr>
<tr>
<td>NONE</td>
<td>不设置id生成策略</td>
</tr>
<tr>
<td>INPUT</td>
<td>用户手工输入id</td>
</tr>
<tr>
<td>ASSIGN_ID</td>
<td>雪花算法生成id (可兼容数值型与字符串型)</td>
</tr>
<tr>
<td>ASSIGN_UUID</td>
<td>以UUID生成算法作为id生成策略</td>
</tr>
</tbody></table>
<p>雪花算法：</p>
<p>0 | 00100110111011010101100001101010011000110 | 10000 | 10001 | 000000000010 </p>
<p>占位符：0； 					时间戳（41）；								机器码（5+5）； 序列号（12）</p>
<p>实例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>全局配置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">	<span class="attr">global-config:</span></span><br><span class="line">		<span class="attr">db-config:</span></span><br><span class="line">			<span class="attr">id_type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure></div>

<h3 id="多数据操作"><a href="#多数据操作" class="headerlink" title="多数据操作"></a>多数据操作</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line">List&lt;Long&gt; list = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Long</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line">userDao.deleteBatchIds(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">List&lt;Long&gt; list = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Long</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line">userDao.selectBatchIds(list);</span><br></pre></td></tr></table></figure></div>

<h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p>介绍：为数据设置是否可用状态字段，删除时设置状态字段为不可用状态，数据保留在数据库中。</p>
<p>使用：</p>
<p>在数据库中添加字段 deleted</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//逻辑删除字段，标记当前记录是否被删除</span></span><br><span class="line">	<span class="meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">userDao.deleteById(<span class="number">1L</span>); <span class="comment">//实际变成update</span></span><br><span class="line">userDao.selectList(<span class="literal">null</span>); <span class="comment">//实际变成where deleted = 0</span></span><br></pre></td></tr></table></figure></div>

<p>全局配置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">	<span class="attr">global-config:</span></span><br><span class="line">		<span class="attr">db-config:</span></span><br><span class="line">			<span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="string">//逻辑删除字段</span></span><br><span class="line">			<span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="string">//没删除</span></span><br><span class="line">			<span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="string">//删除</span></span><br></pre></td></tr></table></figure></div>

<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>解决：业务并发现象带来的问题–秒杀</p>
<p>使用：</p>
<p>在数据库中添加字段 version</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Version</span></span><br><span class="line">	<span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置乐观锁拦截器实现锁机制对应的动态SOL语句拼装</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpCongfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mpinterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加具体的拦截器</span></span><br><span class="line">        mpinterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用乐观锁机制在修改前必须先获取到对应数据的verion方可正常进行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">//先查询数据，获取到version数据</span></span><br><span class="line">	User user=userDao.selectById(<span class="number">1L</span>);</span><br><span class="line">	<span class="comment">//执行数据修改操作</span></span><br><span class="line">	user.setName(<span class="string">&quot;Tom and Jerry&quot;</span>);</span><br><span class="line">	userDao.updateById(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行修改前先执行查询语句</span></span><br><span class="line">SELECT id, name, age, tel, deleted, version FRoM tbl_user <span class="type">WHERE</span> <span class="variable">id</span> <span class="operator">=</span> ?</span><br><span class="line">    </span><br><span class="line"><span class="comment">//执行修改时使用version字段作为乐观锁检查依据</span></span><br><span class="line">UPDATE tbl_user <span class="type">SET</span> <span class="variable">name</span> <span class="operator">=</span> ?, age = ?, tel = ?, version = ? <span class="type">WHERE</span> <span class="variable">id</span> <span class="operator">=</span> ? <span class="type">AND</span> <span class="variable">version</span> <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure></div>

<h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">//引入依赖在pom.xml</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--velocity模板引擎--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建执行类 com.lrq.CodeGenerator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="comment">//1.获取代码生成器的对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置数据库相关配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        </span><br><span class="line">        dataSource.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>); </span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;690609&quot;</span>); </span><br><span class="line">            </span><br><span class="line">        autoGenerator.setDataSource(dataSource);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalconfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置代码输出位置，默认生成文件夹src/main/java/baomidou</span></span><br><span class="line">        globalconfig.setOutputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>).<span class="string">&quot;/项目名/src/main/java&quot;</span>); </span><br><span class="line">        globalconfig.setOpen(<span class="literal">false</span>); <span class="comment">//设置生成完毕后是否打开生成代码所在的目录</span></span><br><span class="line">        globalconfig.setAuthor(<span class="string">&quot;lrq&quot;</span>); <span class="comment">//设置作者    </span></span><br><span class="line">        globalconfig.setFileOverride(<span class="literal">true</span>); <span class="comment">//设置是否覆盖原始生成的文件</span></span><br><span class="line">        globalconfig.setMapperName(<span class="string">&quot;%sDao&quot;</span>); <span class="comment">//设置数据层接口名，%s为占位符，指代模块名称，默认是&quot;%Mapper&quot;</span></span><br><span class="line">        globalconfig.setIdType(IdTyPe.ASSIGN_ID); <span class="comment">//设置Id生成策略    </span></span><br><span class="line">        </span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置包名相关配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置生成的包名，与代码所在位置不冲突，二者叠加组成完整路径，生成文件夹src/main/java/com.lrq</span></span><br><span class="line">        packageInfo.setParent(<span class="string">&quot;com.lrq&quot;</span>);</span><br><span class="line">        packageInfo.setEntity(<span class="string">&quot;domain&quot;</span>); <span class="comment">//设置实体类包名，默认是entity</span></span><br><span class="line">        packageInfo.setMapper(<span class="string">&quot;dao&quot;</span>); <span class="comment">//设置数据层包名，默认是mapper</span></span><br><span class="line">        </span><br><span class="line">        autoGenerator.setPackageInfo(packageInfo);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//策略设置 </span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        </span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;tbl_user&quot;</span>,<span class="string">&quot;tbl_house&quot;</span>); <span class="comment">//设置当前参与生成的表名，参数为可变参数</span></span><br><span class="line">        <span class="comment">//设置数据库表的前缀名称，模块名 = 数据库表名 - 前缀名，例如：User = tbl_user - tbl_  </span></span><br><span class="line">        strategyConfig.setTablePrefix(<span class="string">&quot;tbl_&quot;</span>);</span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="literal">true</span>); <span class="comment">//设置是否启用Rest风格</span></span><br><span class="line">        strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>); <span class="comment">//设置乐观锁字段名</span></span><br><span class="line">        strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>); <span class="comment">//设置逻辑删除字段名    </span></span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">//设置是否启用lombok</span></span><br><span class="line">        </span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.执行生成操作    </span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/00cc078c-248c-4202-81b7-6df0b22c773d-25143160.jpg"
                      alt="img"
                ></p>
<h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h3 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h3><p>REST (REpresentational State Transfer)，表述性状态转换，它是一种软件架构风格。</p>
<p>REST是风格，是约定方式，约定不是规定，可以打破。</p>
<p>描述模块的功能通常使用复数，也就是加s的格式来描述，表示此类资源，而非单个资源。如：uers、emps、books…</p>
<table>
<thead>
<tr>
<th>URL定位资源HTTP动词描述操作</th>
<th>REST风格</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td><a class="link"   href="http://localhost:8080/users/1" >http://localhost:8080/users/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>GET：查询id为1的用户</td>
<td>@GetMapping</td>
</tr>
<tr>
<td><a class="link"   href="http://localhost:8080/users" >http://localhost:8080/users <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>POST：新增用户</td>
<td>@PostMapping</td>
</tr>
<tr>
<td><a class="link"   href="http://localhost:8080/users" >http://localhost:8080/users <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>PUT：修改用户</td>
<td>@PutMapping</td>
</tr>
<tr>
<td><a class="link"   href="http://localhost:8080/users/1" >http://localhost:8080/users/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>DELETE：删除id为1的用户</td>
<td>@DeleteMapping(</td>
</tr>
</tbody></table>
<h3 id="统一响应结果-1"><a href="#统一响应结果-1" class="headerlink" title="统一响应结果"></a>统一响应结果</h3><p>请求响应 –&gt; 响应 –&gt; 统一响应结果</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建pojo.Result</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，200 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//响应信息，描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;<span class="comment">//增删改 成功响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;<span class="comment">//查询 成功响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;<span class="comment">//失败响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">200</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="日志输出-1"><a href="#日志输出-1" class="headerlink" title="日志输出"></a>日志输出</h3><p>Mybatis –&gt; 入门 –&gt; 日志输出</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller应用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@Slf4j</span><span class="comment">//日志记录框架注解</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XinxiController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line">    <span class="keyword">private</span> XinxiService xinxiService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//private static Logger log = LoggerFactory.getLogger(XinxiController.class);//日志记录框架</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/studentx&quot;,method = RequestMethod.POST)//指定请求方式为 POST</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//添加信息</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/studentx&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">insert</span><span class="params">(<span class="meta">@RequestBody</span> Xinxi xinxi)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;添加学生信息&quot;</span>,xinxi);<span class="comment">//日志</span></span><br><span class="line">        <span class="comment">//调用service添加信息</span></span><br><span class="line">        xinxiService.insert(xinxi);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@ RequestMapping"></a>@ RequestMapping</h3><p>请求路径url有相同处，可以简写。</p>
<p>一个完整的请求路径，应该是类上的 @RequestMapping 的value属性+方法上的 @RequestMapping 的value属性。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a7bb151b-1fad-4f0d-a436-2a7c3e10795a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1:起始索引 = (页码-1)*每页展示记录数</span></span><br><span class="line"><span class="comment">// 参数2:查询返回记录数 = 每页展示记录数</span></span><br><span class="line">select * from emp limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取总记录数</span></span><br><span class="line">select <span class="title function_">count</span><span class="params">(*)</span> from emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求参数默认值</span></span><br><span class="line"><span class="meta">@RequestParam</span> (defaultValue = <span class="string">&quot;1&quot;</span>) </span><br></pre></td></tr></table></figure></div>

<h3 id="原始方式"><a href="#原始方式" class="headerlink" title="原始方式"></a>原始方式</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建pojo.PageBean</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> List rows;<span class="comment">//数据列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller应用、分页查询</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> XinxiService xinxiService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/studentfs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">                   <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;分页查询，参数: &#123;&#125;,&#123;&#125;&quot;</span>,page,pageSize);</span><br><span class="line">    <span class="comment">//调用service分页查询</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> xinxiService.page(page,pageSize);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageBean);s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Service impl应用、分页查询</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line"><span class="keyword">private</span> XinxiMapper xinxiMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize)</span> &#123;</span><br><span class="line">	<span class="comment">//1. 获取总记录数</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> xinxiMapper.count();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 获取分页查询结果列表</span></span><br><span class="line">	<span class="type">Integer</span> <span class="variable">start</span> <span class="operator">=</span> (page - <span class="number">1</span>) * pageSize;</span><br><span class="line">    List&lt;Xinxi&gt; xinxiList = xinxiMapper.page(start,pageSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3，封装PageBean对象</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(count,xinxiList);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Mapper应用、分页查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询总记录</span></span><br><span class="line"><span class="meta">@Select(&quot;select count(*) from student.xinxi&quot;)</span></span><br><span class="line">Long <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分页 与 每页多少数据</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from student.xinxi limit #&#123;start&#125;,#&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Xinxi&gt; <span class="title function_">page</span><span class="params">(Integer start, Integer pageSize)</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="pagehelper插件"><a href="#pagehelper插件" class="headerlink" title="pagehelper插件"></a>pagehelper插件</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/3f7729d5-f9ca-41aa-adb3-84f0057503fa-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="分页条件查询"><a href="#分页条件查询" class="headerlink" title="分页条件查询"></a>分页条件查询</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpController</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/emps&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">                   <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                   String name,Short gender,</span></span><br><span class="line"><span class="params">                   <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin</span></span><br><span class="line"><span class="params">				   <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span> &#123;</span><br><span class="line">	log.info(<span class="string">&quot;分页查询，参数: &#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,page, pageSize, name, gender, begin, end);</span><br><span class="line">    <span class="comment">//调用service分页查询</span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> empService.page(page, pageSize, name, ender, begin, end);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpService impl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page,Integer pageSize,String name,Short gender,LocalDate begin,LocalDate end)</span> &#123;</span><br><span class="line">	<span class="comment">//1.设置分页参数</span></span><br><span class="line">	PageHelper.startPage(page,pageSize);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2、执行查询</span></span><br><span class="line">	List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);</span><br><span class="line">	Page&lt;Emp&gt; p = (Page&lt;Emp&gt;)empList;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.封装PageBean对象</span></span><br><span class="line">	<span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(p.getTotal(),p.getResult());</span><br><span class="line">	<span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpMapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">//EmpMapper.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">		select * </span><br><span class="line">		from emp</span><br><span class="line">		<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">text</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">				name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">text</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">				and gender = #&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">text</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">            	and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span>    </span><br></pre></td></tr></table></figure></div>

<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/8d4c2382-49d4-4cbc-b6d7-1388cf917ace-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="修改前查询回显"><a href="#修改前查询回显" class="headerlink" title="修改前查询回显"></a>修改前查询回显</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d2d6d6c9-47d1-481e-aacd-15554b059f98-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h3><p>是指将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程。</p>
<h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>文件名必须是唯一的，不然后面的文件会覆盖前面的文件。</p>
<p>在SpringBoot中，文件上传，默认单个文件允许最大大小为 1M。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>String   <strong>getOriginalFilename</strong> ( ) ;</td>
<td>获取原始文件名</td>
</tr>
<tr>
<td>void   <strong>transferTo</strong> (File dest) ;</td>
<td>将接收的文件转存到磁盘文件中</td>
</tr>
<tr>
<td>long   <strong>getSize</strong> ( ) ;</td>
<td>获取文件的大小，单位：字节</td>
</tr>
<tr>
<td>byte[ ]   <strong>getBytes</strong> ( ) ;</td>
<td>获取文件内容的字节数组</td>
</tr>
<tr>
<td>InputStream   <strong>getInputStream</strong> ( ) ;</td>
<td>获取接收到的文件内容的输入流</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(String username, Integer age, MultipartFile image)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	log.info(<span class="string">&quot;文件上传:&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,username, age, image);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取原始文件名-1.jPg123.0.0.jPg</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造唯一的文件名(不能重复) - uuid(通用唯一识别码) de49685b-61c0-4b11-80fa-c71e95924018</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">extname</span> <span class="operator">=</span> originalFilename.substring(index);</span><br><span class="line">	<span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().tostring() + extname;</span><br><span class="line">	log.info(<span class="string">&quot;新的文件名:&#123;&#125;&quot;</span>,newFileName);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将文件存储在服务器的磁盘目录中 E:\images</span></span><br><span class="line">	image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\images\\&quot;</span> + newFileName));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> Result.success();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上传大文件，进行如下配置</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置单个文件最大上传大小</span></span><br><span class="line">spring.servlet.multipart.max-file-size = 10MB</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置单个请求最大上传大小(一次请求可以上传多个文件)</span></span><br><span class="line">spring.servlet.multipart.max-request-size = 100MB</span><br></pre></td></tr></table></figure></div>

<h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>注册阿里云(实名认证) –&gt; 开通对象存储服务(oss) –&gt; 创建bucket –&gt; 获取AccessKey (秘钥) 。</p>
<ul>
<li>Bucket：存储空间是用户用于存储对象 (Object，就是文件)的容器，所有的对象都必须隶属于某个存储空间。</li>
<li>创建bucket：必须动 名称、地域、读写权限</li>
</ul>
<h4 id="参照官方SDK编写入门程序"><a href="#参照官方SDK编写入门程序" class="headerlink" title="参照官方SDK编写入门程序"></a>参照官方SDK编写入门程序</h4><p>只需要用的时候复制并修改官方案例。</p>
<ul>
<li>SDK：Sofware Development Kit 的缩写，软件开发工具包，包括辅助软件开发的依赖 (iar包)、代码示例等，都可以叫做SDK。</li>
</ul>
<h4 id="案例集成OSS"><a href="#案例集成OSS" class="headerlink" title="案例集成OSS"></a>案例集成OSS</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建阿里云OSS工具类（utils.AliossUtils）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliossUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>; <span class="comment">//地址</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;LTAI4GCHlvX6DKqJWxd6nEuw&quot;</span>; <span class="comment">//秘钥</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;yBshYweHOpqDuhCArrVHwIiBKpyqSL&quot;</span>; <span class="comment">//秘钥</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;web-tlias&quot;</span>; <span class="comment">//Bucke名称</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="comment">// 获取上传的文件的输入流</span></span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 避免文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() +</span><br><span class="line">        	originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        	</span><br><span class="line">        <span class="comment">//上传文件到 OSS</span></span><br><span class="line">		<span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">		ossClient.putObject(bucketName, fileName, inputStream);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//文件访问路径</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭ossClient</span></span><br><span class="line">		ossClient.shutdown();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//把上传到oss的路径返回</span></span><br><span class="line">		<span class="keyword">return</span> url;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建控制层（UploadController）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOSSUtils aliOSSUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload”)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(MultipartFile image)</span> <span class="keyword">throws</span> lOException &#123;</span><br><span class="line">    	String url= aliOSSUtils.upload(image);<span class="comment">//调用阿里云OSS工具类，将上传上来的文件存入阿里云</span></span><br><span class="line">    	<span class="keyword">return</span> Result.success(url);<span class="comment">//将图片上传完成后的url返回，用于浏览器回显展示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="OSS配置"><a href="#OSS配置" class="headerlink" title="OSS配置"></a>OSS配置</h3><p>@ Value ：通常用于外部配置的属性注入，具体用法为：@Value(“${配置文件中的key}”)</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-07%20220644.jpeg"
                      alt="img"
                ></li>
</ul>
<h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><p>语法：</p>
<ul>
<li>大小写敏感</li>
<li>数值前边必须有空格，作为分隔符</li>
<li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格(idea中会自动将Tab转换为空格)</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
<li>#表示注释，从这个字符一直到行尾，都会被解析器忽略</li>
</ul>
<p>对比：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//XML</span></span><br><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;port&gt;<span class="number">8080</span>&lt;/port&gt;</span><br><span class="line">    &lt;address&gt;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&lt;/address&gt;</span><br><span class="line">&lt;/server&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//properties</span></span><br><span class="line">server.port=<span class="number">8080</span></span><br><span class="line">server.address=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//yml/yaml</span></span><br><span class="line">server:</span><br><span class="line">	port:<span class="number">8080</span></span><br><span class="line">	address:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></div>

<p>数据格式：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象/Map集合:</span></span><br><span class="line">user:</span><br><span class="line">	name:zhangsan</span><br><span class="line">	age:<span class="number">18</span></span><br><span class="line">	password:<span class="number">123456</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">// 数组/List/Set集合:</span></span><br><span class="line">hobby:</span><br><span class="line">	-java</span><br><span class="line">	-game</span><br><span class="line">	-sport</span><br></pre></td></tr></table></figure></div>

<h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ ConfigurationProperties"></a>@ ConfigurationProperties</h3><p>引入 与 案例：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">//pom.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">	<span class="attr">oss:</span></span><br><span class="line">		<span class="attr">endpoint:</span> <span class="string">https://oss-cn-hangzhou.aliyuncs.com</span></span><br><span class="line">		<span class="attr">accessKeyId:</span> <span class="string">LTAI4GCHlvX6DKqJWxd6nEuw</span></span><br><span class="line">		<span class="attr">accessKeySecret:</span> <span class="string">yBshYweHOpqDuhCArrVHwIiBKpyqSL</span></span><br><span class="line">		<span class="attr">bucketName:</span> <span class="string">web-tlias</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建阿里云OSS工具类（utils.AliOSSProperties）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String endpoint; <span class="comment">//地址</span></span><br><span class="line">	<span class="keyword">private</span> String accessKeyId; <span class="comment">//秘钥</span></span><br><span class="line">	<span class="keyword">private</span> String accessKeySecret; <span class="comment">//秘钥</span></span><br><span class="line">	<span class="keyword">private</span> String bucketName; <span class="comment">//Bucke名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建阿里云OSS工具类（utils.AliossUtils）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliossUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> AliOSSProperties aliOSSProperties;	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//获取阿里云OSS参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> aliOSSProperties.getEndpoint; <span class="comment">//地址</span></span><br><span class="line">       	<span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> aliOSSProperties.getAccessKeyId; <span class="comment">//秘钥</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> aliOSSProperties.getAccessKeySecret; <span class="comment">//秘钥</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> aliOSSProperties.getBucketName; <span class="comment">//Bucke名称</span></span><br><span class="line">		<span class="comment">// 获取上传的文件的输入流</span></span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 避免文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() +</span><br><span class="line">        	originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        	</span><br><span class="line">        <span class="comment">//上传文件到 OSS</span></span><br><span class="line">		<span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">		ossClient.putObject(bucketName, fileName, inputStream);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//文件访问路径</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭ossClient</span></span><br><span class="line">		ossClient.shutdown();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//把上传到oss的路径返回</span></span><br><span class="line">		<span class="keyword">return</span> url;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>与@ Value差别：</p>
<p>相同点：</p>
<ul>
<li>都是用来注入外部配置的属性的。</li>
</ul>
<p>不同点：</p>
<ul>
<li>@ Value注解只能一个一个的进行外部属性的注入。</li>
<li>@ ConfigurationProperties可以批量的将外部的属性配置注入到bean对象的属性中。</li>
</ul>
<h2 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h2><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><h4 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h4><p>会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应。</p>
<p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p>
<p>跨域：跨域区分三个维度，即协议、IP&#x2F;域名、端口，只要三个有一个不一样，就是跨域。</p>
<h4 id="会话跟踪方案"><a href="#会话跟踪方案" class="headerlink" title="会话跟踪方案"></a>会话跟踪方案</h4><p>客户端会话跟踪技术：Cookie</p>
<p>存在客户端</p>
<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/97c53656-7555-4f69-aef3-07e37980f1d0-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ff9957b4-e5f1-417e-adc2-adc06f524a36-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<p>服务端会话跟踪技术：Session</p>
<p>存在服务端</p>
<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/16b49e84-8227-4bfc-babd-4cc158ad49a4-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/4b2d2275-e563-429f-98c6-e919324937e1-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<p>JWT令牌技术</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e3f5aa25-d98d-4b5b-8dba-983afed1a1e5-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h3><h4 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h4><p>header、payload用的是 Base64编码，Signature不是。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2242d46a-7383-4cbf-8d97-debb4c3c9b16-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>JWT校验时使用的签名秘钥，必须和生成IWT令牌时使用的秘钥是配套的。</p>
<p>如果JWT令牌解析校验时报错，则说明JWT令牌被篡改 或 失效了，令牌非法。</p>
<h4 id="应用场景：登录认证"><a href="#应用场景：登录认证" class="headerlink" title="应用场景：登录认证"></a>应用场景：登录认证</h4><p>1、登录成功后，生成令牌</p>
<p>2、将令牌存储到客户端（不一定存在Cookie中）</p>
<p>3、后续每个请求，都要携带JWT令牌，系统在每次请求处理之前，先校验令牌，通过后，再处理</p>
<h4 id="快速入门-4"><a href="#快速入门-4" class="headerlink" title="快速入门"></a>快速入门</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pom.xml</span></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupld&gt;io.jsonwebtoken&lt;/groupld&gt;</span><br><span class="line">    &lt;artifactld&gt;jjwt&lt;/artifactld&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.9</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生成JWT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenJwt</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    claims.put(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    claims.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lrq&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            .signWith(SignatureAlgorithm.HS256,<span class="string">&quot;lrq&quot;</span>)<span class="comment">//签名算法</span></span><br><span class="line">            .setClaims(claims)<span class="comment">//自定义内容(载荷)</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">3600</span> * <span class="number">1000</span>))<span class="comment">//设置有效期为1小时</span></span><br><span class="line">            .compact();</span><br><span class="line"></span><br><span class="line">    System.out.println(jwt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析JWT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParseJwt</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">            .setSigningKey(<span class="string">&quot;lrq&quot;</span>)</span><br><span class="line">            .parseClaimsJws(jwt)</span><br><span class="line">            .getBody();</span><br><span class="line">            </span><br><span class="line">    System.out.println(claims);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建JWT工具类(utils.JWTUtils)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signKey</span> <span class="operator">=</span> <span class="string">&quot;lrq&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Long</span> <span class="variable">expire</span> <span class="operator">=</span><span class="number">43200000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成Jwt</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateJwt</span><span class="params">(Map&lt;String,Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .addClaims(claims)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,signKey)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expire))</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> jwt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析Jwt</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJwt</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(signKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建控制层(LoginController)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Login login)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户登录：&#123;&#125;&quot;</span>,login);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Login</span> <span class="variable">log</span> <span class="operator">=</span> loginService.login(login);</span><br><span class="line">        <span class="keyword">if</span>(log != <span class="literal">null</span>)&#123; <span class="comment">//用户名密码正确</span></span><br><span class="line">            Map&lt;String,Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            claims.put(<span class="string">&quot;username&quot;</span>,log.getUsername());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成JWT令牌</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtils.generateJwt(claims);</span><br><span class="line">            <span class="keyword">return</span> Result.success(jwt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;用户名或用户密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h3><h4 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h4><p>Filter 过滤器，是JavaWeb 三大组件(Servlet、Filter、Listener)之一。</p>
<p>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。</p>
<p>过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等。</p>
<h4 id="快速入门-5"><a href="#快速入门-5" class="headerlink" title="快速入门"></a>快速入门</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f11fd6f1-007b-43fe-bd01-589fbb01e05e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>请求 –&gt; 放行前逻辑 –&gt; 放行 –&gt; 获取web资源 –&gt; 放行后逻辑</p>
<p>放行后访问对应资源，资源访问完成后，还会回到Filter中。</p>
<p>如果回到Filter中，是执行放行后的逻辑。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/4c69af2c-8925-4f4a-9b3e-46a96d8f5e7a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/7ad02009-9324-49cf-b434-3072f7c3af49-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><p>一个web应用中，可以配置多个过滤器，这多个过滤器就形成了一个过滤器链。</p>
<p>注解配置的Filter，优先级是按照过滤器类名 (字符串) 的自然排序。</p>
<h4 id="登录校验Filter"><a href="#登录校验Filter" class="headerlink" title="登录校验Filter"></a>登录校验Filter</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/837b124c-7f82-4d8b-a89b-10ca82a87347-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">//pom.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建过滤器(filter.LoginCheckFilter)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ...&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">HttpServletRequest</span> <span class="variable">reg</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">		<span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServetResponse) response;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//流程步骤</span></span><br><span class="line">		<span class="comment">//1.获取请求url</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURL().toString();</span><br><span class="line">		log.info(<span class="string">&quot;请求的url:&#123;&#125;&quot;</span>,url);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.判断请求ur1中是否包含1ogin，如果包含，说明是登录操作，放行</span></span><br><span class="line">		<span class="keyword">if</span>(url.contains(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">			log.info(<span class="string">&quot;登录操作，放行...&quot;</span>);</span><br><span class="line">			chain.doFilter(request,response);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.获取请求头中的令牌(token)</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4.判断令牌是否存在、如果不存在、返回错误结果(未登录)</span></span><br><span class="line">		<span class="keyword">if</span>(!StringUtils.hasLength(jwt))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求头token为空,返回未登录的信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//手动转换 对象--json ----&gt; 阿里巴巴 fastJSON</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            resp.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//5.解析token，如果解析失败，返回错误结果(未登录)</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">         	JwtUtils.parseJWT(jwt);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">//jwt解折失败</span></span><br><span class="line">         	e.printStackTrace();</span><br><span class="line">         	log.info(<span class="string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);</span><br><span class="line">         	<span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">         	<span class="comment">//手动转换 对象--json ----&gt; 阿里巴巴 fastJSON</span></span><br><span class="line">         	<span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">         	resp.getwriter().write(notLogin);</span><br><span class="line">         	<span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//6.放行。</span></span><br><span class="line">		log.info(<span class="string">&quot;令牌合法，放行&quot;</span>);</span><br><span class="line">		chain.doFilter(request,response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h3><h4 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h4><p>是一种动态拦截方法调用的机制，类似于过滤器。Spring框架中提供的，用来动态拦截控制器方法的执行。</p>
<p>作用是拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码。</p>
<h4 id="快速入门-6"><a href="#快速入门-6" class="headerlink" title="快速入门"></a>快速入门</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/c174b4f1-66ec-47ce-893d-ab0a0bb1d7df-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/6b6ca0d3-2479-46d2-ad3e-1bf4ddf604af-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="拦截路径-1"><a href="#拦截路径-1" class="headerlink" title="拦截路径"></a>拦截路径</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e20dd429-edd4-4b7c-bb1a-7b60fe33f968-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="登录校验Interceptor"><a href="#登录校验Interceptor" class="headerlink" title="登录校验Interceptor"></a>登录校验Interceptor</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/37844238-5a37-4169-a9dc-8bf20c4ada65-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h4 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建拦截器(config.WebConfig)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckinterceptor loginCheckinterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginCheckinterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建拦截器(interceptor.LoginCheckinterceptor)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckinterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//目标资源方法运行前运行，返回 true:放行，返回false:不放行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取请求 url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line">        log.info(<span class="string">&quot;请求的url&quot;</span>,url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断请求 url 中是否包含 login，如果包含，说明是登录操作，放行</span></span><br><span class="line">        <span class="keyword">if</span>(url.contains(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;登录操作，放行...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取请求头中的令牌(token)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断令牌是否存在，如果不存在，返回错误结果(未登录)</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasLength(jwt))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求头token为空,返回未登录的信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//手动转换对象--json-&gt;阿里巴巴fastJSON</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            response.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.解析token，如果解析失败，返回错误结果(未登录)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJwt(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;<span class="comment">//jwt解折失败</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.info(<span class="string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//手动转换对象--json -----&gt;阿里巴巴fastJSON</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            response.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        log.info(<span class="string">&quot;令牌合法，放行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Filter-与-Interceptor-区别"><a href="#Filter-与-Interceptor-区别" class="headerlink" title="Filter 与 Interceptor 区别"></a>Filter 与 Interceptor 区别</h3><p>接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandlerInterceptor接口。</p>
<p>拦截范围不同：过滤器Filter会拦截所有的资源，而拦截器Interceptor只会拦截Spring环境中的资源。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建全局异常处理器(exception.GlobalExceptionHandler)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局异常处理</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//捕获所有异常</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ex</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;对不起,操作失败,请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><h3 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h3><p>事务 是一组操作的集合，它是一个不可分割的工作单位，这些操作 要么同时成功，要么同时失败。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>开启事务(一组操作开始前，开启事务) : start transaction &#x2F; begin ;</p>
<p>提交事务(这组操作全部成功后，提交事务) : commit ;</p>
<p>回滚事务(中间任何一个操作出现异常，回滚事务) : rollback ;</p>
<h3 id="开启事务管理日志"><a href="#开启事务管理日志" class="headerlink" title="开启事务管理日志"></a>开启事务管理日志</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">	<span class="attr">level:</span></span><br><span class="line">		<span class="string">org.springframework.jdbc.support,jdbcTransactionManager:debug</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@ Transactional"></a>@ Transactional</h3><p>位置：业务(service)层的方法上、类上、接口上。</p>
<p>作用：将当前方法交给spring进行事务管理，方法执行前，开启事务; 成功执行完毕，提交事务; 出现异常，回滚事务。</p>
<h3 id="rollbackFor属性"><a href="#rollbackFor属性" class="headerlink" title="rollbackFor属性"></a>rollbackFor属性</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/77f4b662-6bc2-48d5-b2df-0987bacac987-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="propagation属性"><a href="#propagation属性" class="headerlink" title="propagation属性"></a>propagation属性</h3><p>REQUIRED：大部分情况下都是用该传播行为即可。</p>
<p>REOUIRES_NEW：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与<br>否，都需要保证日志记录能够记录成功。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/41d20ee0-7fe4-45b6-8d78-ae3bcb108af1-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="介绍-20"><a href="#介绍-20" class="headerlink" title="介绍"></a>介绍</h3><p>Aspect Oriented Programming ( 面向切面编程、面向方面编程 ) 其实就是面向特定方法编程。</p>
<p>动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程。</p>
<h3 id="快速入门-7"><a href="#快速入门-7" class="headerlink" title="快速入门"></a>快速入门</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a8e479c5-7b93-41f6-bffe-65a72147e5df-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/a08e9362-76cc-4a5e-8d09-6c592934cf4d-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="执行流程-2"><a href="#执行流程-2" class="headerlink" title="执行流程"></a>执行流程</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/0d436b6b-ccfa-4cd9-9213-a3a3d11227c7-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@ Pointcut"></a>@ Pointcut</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ad1b5667-35d8-4448-9fb1-87baee1ef9f9-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><p>@ Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行。</p>
<p>@ Before：前置通知，此注解标注的通知方法在目标方法前被执行。</p>
<p>@ After：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行。</p>
<p>@ AfterReturning：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行。</p>
<p>@ AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行。</p>
<ul>
<li><p>@ Around环绕通知需要自己调用 ProceedingJoinPoint.proceed ( ) 来让原始方法执行，其他通知不需要考虑目标方法执行。</p>
</li>
<li><p>@ Around环绕通知方法的返回值，必须指定为0bject，来接收原始方法的返回值。</p>
</li>
</ul>
<h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/0b4e648a-6e1b-4288-b39c-45fc6f71c202-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>介绍：描述切入点方法的一种表达式。</p>
<p>作用：主要用来决定项目中的哪些方法需要加入通知。</p>
<p>常见形式：</p>
<ul>
<li>execution (……)：根据方法的签名来匹配。</li>
<li>@ annotation (……)：根据注解匹配。</li>
</ul>
<h3 id="切入点表达式-execution"><a href="#切入点表达式-execution" class="headerlink" title="切入点表达式-execution"></a>切入点表达式-execution</h3><p>语法：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/16e2c4d8-a11d-42db-8448-f7386e5b55ac-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>使用：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/e7527c65-156b-4dd4-849c-49c0438925de-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="切入点表达式-annotation"><a href="#切入点表达式-annotation" class="headerlink" title="切入点表达式-@ annotation"></a>切入点表达式-@ annotation</h3><p>语法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下创建(aop.MyLog)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy .RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType .METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.java.com.lrq下的Serviceimpl使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XinxiServiceimpl</span> <span class="keyword">implements</span> <span class="title class_">XinxiService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line">    <span class="keyword">private</span> XinxiMapper xinxiMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@MyLog</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//添加信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Xinxi xinxi)</span> &#123;</span><br><span class="line">        xinxiMapper.insert(xinxi);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@MyLog</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//显示全部信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Xinxi&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xinxiMapper.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/d186cba8-aad2-41ad-bda3-2c108355ca5e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f0f67219-cf6b-4bb9-90df-80170591e8c6-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/46dd89c7-d565-4ad6-bb9e-c30e2929b057-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/504ca202-32e5-4a91-afeb-d049d211e54f-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/4c42eab8-71a9-402d-bbfa-d8653da55b54-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/99260fd9-71bd-4acb-adfe-8e2d331bfa8a-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h2 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h2><h3 id="bean的获取"><a href="#bean的获取" class="headerlink" title="bean的获取"></a>bean的获取</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/71b7a89b-cbea-494b-a644-2bef5e091f13-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/31765a9f-eb09-47e5-b9e6-97ea7c19c444-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/f177cc0e-7322-410e-b421-67b39498d848-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<h3 id="第三方bean"><a href="#第三方bean" class="headerlink" title="第三方bean"></a>第三方bean</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/62f714d4-aea6-47d4-bf07-8947fa351f5a-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h2 id="SpringBoot原理"><a href="#SpringBoot原理" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h2><h3 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/9dd9ac26-c393-4b80-9f37-da04b0eac02e-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><h4 id="介绍-21"><a href="#介绍-21" class="headerlink" title="介绍"></a>介绍</h4><p>SpringBoot的自动配置就是当spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>启动类：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ba053a17-eccd-4c67-9be2-534e92b4e7f9-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>启动类：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/2d32d3f9-1ee2-41b2-889d-0b28d1f18302-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<p>源码跟踪：</p>
<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/ff098535-37bc-4dd2-829f-f9b4690d386b-25143160.jpg"
                      alt="img"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/feb7c20d-0e97-49c7-9e02-f7e71ff63a97-25143160.jpg"
                      alt="img"
                ></p>
</li>
</ul>
<p>@ conditional：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/81e5d8cd-5ea3-4dfb-a65c-6b2f1c0ee6ef-25143160.jpg"
                      alt="img"
                ></li>
</ul>
<h3 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h3><p>在实际开发中，经常会定义一些公共组件，提供给各个项目团队使用。而在SpringBoot的项目中，一般会将这些公共组件封装为SpringBoot 的 starter。</p>
<p>SpringBoot官方的starter以spring-boot开头，其它技术提供的starter以功能开头。</p>
]]></content>
      <categories>
        <category>Web</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2024/06/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1- 概述"></a>1- 概述</h1><h2 id="1-1-因特网的概述"><a href="#1-1-因特网的概述" class="headerlink" title="1-1 因特网的概述"></a>1-1 因特网的概述</h2><h3 id="1-1-1-网络、互联网和因特网"><a href="#1-1-1-网络、互联网和因特网" class="headerlink" title="1-1-1 网络、互联网和因特网"></a>1-1-1 网络、互联网和因特网</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623154313650.png"
                      alt="image-20240623154313650"
                ></li>
</ul>
<h3 id="1-1-2-因特网发展的三个阶段"><a href="#1-1-2-因特网发展的三个阶段" class="headerlink" title="1-1-2 因特网发展的三个阶段"></a>1-1-2 因特网发展的三个阶段</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623154513929.png"
                      alt="image-20240623154513929"
                ></li>
</ul>
<h3 id="1-1-3-因特网的标准化工作"><a href="#1-1-3-因特网的标准化工作" class="headerlink" title="1-1-3 因特网的标准化工作"></a>1-1-3 因特网的标准化工作</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623154922111.png"
                      alt="image-20240623154922111"
                ></li>
</ul>
<h3 id="1-3-4-因特网的组成"><a href="#1-3-4-因特网的组成" class="headerlink" title="1-3-4 因特网的组成"></a>1-3-4 因特网的组成</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623155102672.png"
                      alt="image-20240623155102672"
                ></li>
</ul>
<h2 id="1-2-三种交换方式"><a href="#1-2-三种交换方式" class="headerlink" title="1-2- 三种交换方式"></a>1-2- 三种交换方式</h2><h3 id="1-2-1-电路交换"><a href="#1-2-1-电路交换" class="headerlink" title="1-2-1 电路交换"></a>1-2-1 电路交换</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623155553848.png"
                      alt="image-20240623155553848"
                ></li>
</ul>
<h3 id="1-2-2-分组交换"><a href="#1-2-2-分组交换" class="headerlink" title="1-2-2 分组交换"></a>1-2-2 分组交换</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623160104789.png"
                      alt="image-20240623160104789"
                ></li>
</ul>
<h3 id="1-2-3-电路交换、报文交换、分组交换的对比"><a href="#1-2-3-电路交换、报文交换、分组交换的对比" class="headerlink" title="1-2-3 电路交换、报文交换、分组交换的对比"></a>1-2-3 电路交换、报文交换、分组交换的对比</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623160550729.png"
                      alt="image-20240623160550729"
                ></li>
</ul>
<h2 id="1-3-计算机网络的定义和分类"><a href="#1-3-计算机网络的定义和分类" class="headerlink" title="1-3 计算机网络的定义和分类"></a>1-3 计算机网络的定义和分类</h2><h3 id="1-3-1-定义"><a href="#1-3-1-定义" class="headerlink" title="1-3-1 定义"></a>1-3-1 定义</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623160837159.png"
                      alt="image-20240623160837159"
                ></li>
</ul>
<h3 id="1-3-2-分类"><a href="#1-3-2-分类" class="headerlink" title="1-3-2 分类"></a>1-3-2 分类</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623161211808.png"
                      alt="image-20240623161211808"
                ></li>
</ul>
<h2 id="1-4-计算机网络的性能指标"><a href="#1-4-计算机网络的性能指标" class="headerlink" title="1-4 计算机网络的性能指标"></a>1-4 计算机网络的性能指标</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623161947115.png"
                      alt="image-20240623161947115"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623162217046.png"
                      alt="image-20240623162217046"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623162444594.png"
                      alt="image-20240623162444594"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623162950356.png"
                      alt="image-20240623162950356"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623163214547.png"
                      alt="image-20240623163214547"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623163322940.png"
                      alt="image-20240623163322940"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623163549988.png"
                      alt="image-20240623163549988"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623163731182.png"
                      alt="image-20240623163731182"
                ></p>
</li>
</ul>
<h2 id="1-5-计算机网络体系结构"><a href="#1-5-计算机网络体系结构" class="headerlink" title="1-5 计算机网络体系结构"></a>1-5 计算机网络体系结构</h2><h3 id="1-5-1-常见的计算机网络体系结构"><a href="#1-5-1-常见的计算机网络体系结构" class="headerlink" title="1-5-1 常见的计算机网络体系结构"></a>1-5-1 常见的计算机网络体系结构</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623164032233.png"
                      alt="image-20240623164032233"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623164318159.png"
                      alt="image-20240623164318159"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623164339238.png"
                      alt="image-20240623164339238"
                ></p>
</li>
</ul>
<h3 id="1-5-2-计算机网络体系结构分层的必要性"><a href="#1-5-2-计算机网络体系结构分层的必要性" class="headerlink" title="1-5-2 计算机网络体系结构分层的必要性"></a>1-5-2 计算机网络体系结构分层的必要性</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623164902318.png"
                      alt="image-20240623164902318"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623164933343.png"
                      alt="image-20240623164933343"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623165005243.png"
                      alt="image-20240623165005243"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623165035247.png"
                      alt="image-20240623165035247"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623165100538.png"
                      alt="image-20240623165100538"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623165151818.png"
                      alt="image-20240623165151818"
                ></p>
</li>
</ul>
<h3 id="1-5-3-计算机网络体系结构分层思想举例"><a href="#1-5-3-计算机网络体系结构分层思想举例" class="headerlink" title="1-5-3 计算机网络体系结构分层思想举例"></a>1-5-3 计算机网络体系结构分层思想举例</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623165529381.png"
                      alt="image-20240623165529381"
                ></li>
</ul>
<h3 id="1-5-4-计算机网络体系结构中的专用术语"><a href="#1-5-4-计算机网络体系结构中的专用术语" class="headerlink" title="1-5-4 计算机网络体系结构中的专用术语"></a>1-5-4 计算机网络体系结构中的专用术语</h3><ul>
<li><p>实体</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623165801734.png"
                      alt="image-20240623165801734"
                ></p>
</li>
<li><p>协议</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623170635537.png"
                      alt="image-20240623170635537"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623170754118.png"
                      alt="image-20240623170754118"
                ></p>
</li>
<li><p>服务</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623170158203.png"
                      alt="image-20240623170158203"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623170404386.png"
                      alt="image-20240623170404386"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623170454549.png"
                      alt="image-20240623170454549"
                ></p>
</li>
</ul>
<h1 id="2-物理层"><a href="#2-物理层" class="headerlink" title="2- 物理层"></a>2- 物理层</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2-1 概述"></a>2-1 概述</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623171654653.png"
                      alt="image-20240623171654653"
                ></li>
</ul>
<h2 id="2-2-物理层下面的传输媒体"><a href="#2-2-物理层下面的传输媒体" class="headerlink" title="2-2 物理层下面的传输媒体"></a>2-2 物理层下面的传输媒体</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623182613312.png"
                      alt="image-20240623182613312"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623184933641.png"
                      alt="image-20240623184933641"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623184656173.png"
                      alt="image-20240623184656173"
                ></li>
</ul>
<h2 id="2-3-传输方式"><a href="#2-3-传输方式" class="headerlink" title="2-3 传输方式"></a>2-3 传输方式</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623183007249.png"
                      alt="image-20240623183007249"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623183150971.png"
                      alt="image-20240623183150971"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-23%20183252.png"
                      alt="屏幕截图 2024-06-23 183252"
                ></p>
</li>
</ul>
<h2 id="2-4-编码与调制"><a href="#2-4-编码与调制" class="headerlink" title="2-4 编码与调制"></a>2-4 编码与调制</h2><h3 id="2-4-1-概述"><a href="#2-4-1-概述" class="headerlink" title="2-4-1 概述"></a>2-4-1 概述</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623183559066.png"
                      alt="image-20240623183559066"
                ></li>
</ul>
<h3 id="2-4-2-编码"><a href="#2-4-2-编码" class="headerlink" title="2-4-2 编码"></a>2-4-2 编码</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623194307576.png"
                      alt="image-20240623194307576"
                ></li>
</ul>
<h3 id="2-4-3-调制"><a href="#2-4-3-调制" class="headerlink" title="2-4-3 调制"></a>2-4-3 调制</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623194442148.png"
                      alt="image-20240623194442148"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623212503544.png"
                      alt="image-20240623212503544"
                ></p>
</li>
</ul>
<h2 id="2-5-信道的极限容量"><a href="#2-5-信道的极限容量" class="headerlink" title="2-5 信道的极限容量"></a>2-5 信道的极限容量</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623195042558.png"
                      alt="image-20240623195042558"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623195137807.png"
                      alt="image-20240623195137807"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623195213928.png"
                      alt="image-20240623195213928"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623195238893.png"
                      alt="image-20240623195238893"
                ></li>
</ul>
<h1 id="3-数据链路层"><a href="#3-数据链路层" class="headerlink" title="3- 数据链路层"></a>3- 数据链路层</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3-1 概述"></a>3-1 概述</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623185341248.png"
                      alt="image-20240623185341248"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623185758675.png"
                      alt="image-20240623185758675"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623190148282.png"
                      alt="image-20240623190148282"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623190635242.png"
                      alt="image-20240623190635242"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623191604298.png"
                      alt="image-20240623191604298"
                ></p>
</li>
</ul>
<h2 id="3-2-封装成帧"><a href="#3-2-封装成帧" class="headerlink" title="3-2 封装成帧"></a>3-2 封装成帧</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623192504307.png"
                      alt="image-20240623192504307"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623192537504.png"
                      alt="image-20240623192537504"
                ></p>
</li>
</ul>
<h2 id="3-3-差错检测"><a href="#3-3-差错检测" class="headerlink" title="3-3 差错检测"></a>3-3 差错检测</h2><h3 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3-3-1 概述"></a>3-3-1 概述</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623192712329.png"
                      alt="image-20240623192712329"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623194050867.png"
                      alt="image-20240623194050867"
                ></li>
</ul>
<h3 id="3-3-2-奇偶校验"><a href="#3-3-2-奇偶校验" class="headerlink" title="3-3-2 奇偶校验"></a>3-3-2 奇偶校验</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623193052601.png"
                      alt="image-20240623193052601"
                ></li>
</ul>
<h3 id="3-3-3-CRC校验"><a href="#3-3-3-CRC校验" class="headerlink" title="3-3-3 CRC校验"></a>3-3-3 CRC校验</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623193535453.png"
                      alt="image-20240623193535453"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623193739163.png"
                      alt="image-20240623193739163"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623193822424.png"
                      alt="image-20240623193822424"
                ></p>
</li>
</ul>
<h2 id="3-4-可靠传输"><a href="#3-4-可靠传输" class="headerlink" title="3-4 可靠传输"></a>3-4 可靠传输</h2><h3 id="3-4-1-概述"><a href="#3-4-1-概述" class="headerlink" title="3-4-1 概述"></a>3-4-1 概述</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623195551571.png"
                      alt="image-20240623195551571"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623195642624.png"
                      alt="image-20240623195642624"
                ></p>
</li>
</ul>
<h3 id="3-4-2-停止-等待协议SW"><a href="#3-4-2-停止-等待协议SW" class="headerlink" title="3-4-2 停止-等待协议SW"></a>3-4-2 停止-等待协议SW</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623204742143.png"
                      alt="image-20240623204742143"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623205121697.png"
                      alt="image-20240623205121697"
                ></p>
</li>
</ul>
<h3 id="3-4-3-回退N帧协议GBN"><a href="#3-4-3-回退N帧协议GBN" class="headerlink" title="3-4-3 回退N帧协议GBN"></a>3-4-3 回退N帧协议GBN</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623211106118.png"
                      alt="image-20240623211106118"
                ></li>
</ul>
<h3 id="3-4-4-选择重传协议SR"><a href="#3-4-4-选择重传协议SR" class="headerlink" title="3-4-4 选择重传协议SR"></a>3-4-4 选择重传协议SR</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240623211915441.png"
                      alt="image-20240623211915441"
                ></li>
</ul>
]]></content>
      <categories>
        <category>计组计网</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>RuoYi框架</title>
    <url>/2024/05/25/RuoYi%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1- 介绍"></a>1- 介绍</h1><p>1、开源项目</p>
<p>2、学习目标：</p>
<ul>
<li>使用，减少自己的工作量</li>
<li>学习优秀开源项目底层的编程思想，设计思路，提高自己的编程能力</li>
</ul>
<p>3、官网：</p>
<ul>
<li><a class="link"   href="https://doc.ruoyi.vip/ruoyi-vue/" >介绍 | RuoYi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>4、基础：</p>
<ul>
<li>Spring Boot + Vue</li>
</ul>
<p>5、环境：</p>
<ul>
<li>JDK 1.8</li>
<li>MySQL</li>
<li>Redis</li>
<li>Maven</li>
<li>Vue</li>
</ul>
<p>6、使用步骤</p>
<ul>
<li>下载并运行</li>
<li>看懂业务流程</li>
<li>进行二次开发</li>
</ul>
<h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2- 使用"></a>2- 使用</h1><h2 id="2-1-结构介绍"><a href="#2-1-结构介绍" class="headerlink" title="2-1 结构介绍"></a>2-1 结构介绍</h2><h3 id="2-1-1-后端结构"><a href="#2-1-1-后端结构" class="headerlink" title="2-1-1 后端结构"></a>2-1-1 后端结构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240528142439009.png"
                      alt="image-20240528142439009"
                ></p>
<h3 id="2-1-2-前端结构"><a href="#2-1-2-前端结构" class="headerlink" title="2-1-2 前端结构"></a>2-1-2 前端结构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240528142544193.png"
                      alt="image-20240528142544193"
                ></p>
<h2 id="2-2-下载"><a href="#2-2-下载" class="headerlink" title="2-2 下载"></a>2-2 下载</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/y_project/RuoYi-Vue.git</span><br></pre></td></tr></table></figure></div>

<h2 id="2-3-启动后端"><a href="#2-3-启动后端" class="headerlink" title="2-3 启动后端"></a>2-3 启动后端</h2><h3 id="2-3-1-配置MySQL"><a href="#2-3-1-配置MySQL" class="headerlink" title="2-3-1 配置MySQL"></a>2-3-1 配置MySQL</h3><ul>
<li>1、执行 sql 文件夹下的 sql脚本</li>
<li>2、修改数据库连接（application-druid.yml）</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240525222739816.png"
                      alt="image-20240525222739816"
                ></li>
</ul>
<h3 id="2-3-2-配置Redis"><a href="#2-3-2-配置Redis" class="headerlink" title="2-3-2 配置Redis"></a>2-3-2 配置Redis</h3><ul>
<li><p>修改Redis连接（application.yml）</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240525222917137.png"
                      alt="image-20240525222917137"
                ></p>
</li>
</ul>
<h2 id="2-4-启动前端"><a href="#2-4-启动前端" class="headerlink" title="2-4 启动前端"></a>2-4 启动前端</h2><p>安装依赖：</p>
<ul>
<li>npm install</li>
</ul>
<p>启动服务：</p>
<ul>
<li>npm run dev</li>
</ul>
<p>浏览器访问：</p>
<ul>
<li><a class="link"   href="http://localhost/" >http://localhost:80 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h1 id="3-登录"><a href="#3-登录" class="headerlink" title="3- 登录"></a>3- 登录</h1><h2 id="3-1-验证码"><a href="#3-1-验证码" class="headerlink" title="3-1 验证码"></a>3-1 验证码</h2><h3 id="3-1-1-思路"><a href="#3-1-1-思路" class="headerlink" title="3-1-1 思路"></a>3-1-1 思路</h3><p>后端生成一个表达式，1+1&#x3D;2</p>
<p>1+1&#x3D;?@2</p>
<p>1+1&#x3D;? 转成图片，传到前端进行展示</p>
<p>2 存入 Redis</p>
<p>前端提交登录表单，把表单的 2 和 Redis 的 2 比较</p>
<h3 id="3-1-2-前端实现"><a href="#3-1-2-前端实现" class="headerlink" title="3-1-2 前端实现"></a>3-1-2 前端实现</h3><ul>
<li>login.vue</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240526090733159.png"
                      alt="image-20240526090733159"
                ></p>
<ul>
<li>ruoyi-ui.src.api.login.js</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240526090814027.png"
                      alt="image-20240526090814027"
                ></p>
<ul>
<li>ruoyi-ui.src.utils.request.js</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240526090932731.png"
                      alt="image-20240526090932731"
                ></p>
<ul>
<li>.env.development</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240526091141931.png"
                      alt="image-20240526091141931"
                ></p>
<ul>
<li>http: &#x2F;&#x2F;localhost&#x2F;dev-api&#x2F;captchalmage</li>
</ul>
<p>是前端请求，但Vue是从后端获取图片，为什么：</p>
<p>反向代理，url请求前端，进行代理，映射到后端，解决跨越问题。</p>
<ul>
<li>vue.config.js</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240526092508638.png"
                      alt="image-20240526092508638"
                ></p>
<p>pathRewrite：路径重写，将 &#x2F;dev-api 替换为 ‘ ‘。</p>
<p>然后再映射到 http: &#x2F;&#x2F;localhost:8080 。</p>
<h3 id="3-1-3-后端实现"><a href="#3-1-3-后端实现" class="headerlink" title="3-1-3 后端实现"></a>3-1-3 后端实现</h3><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.common.CaptchaController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码操作处理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Producer captchaProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;captchaProducerMath&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Producer captchaProducerMath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISysConfigService configService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/captchaImage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> AjaxResult <span class="title function_">getCode</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">AjaxResult</span> <span class="variable">ajax</span> <span class="operator">=</span> AjaxResult.success();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">captchaEnabled</span> <span class="operator">=</span> configService.selectCaptchaEnabled(); <span class="comment">//检验是否开启验证码</span></span><br><span class="line">        ajax.put(<span class="string">&quot;captchaEnabled&quot;</span>, captchaEnabled);</span><br><span class="line">        <span class="keyword">if</span> (!captchaEnabled)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ajax;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存验证码信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> IdUtils.simpleUUID(); <span class="comment">//获取uuid</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyKey</span> <span class="operator">=</span> CacheConstants.CAPTCHA_CODE_KEY + uuid; <span class="comment">//将uuid与前缀拼接，变成key值</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">capStr</span> <span class="operator">=</span> <span class="literal">null</span>, code = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">captchaType</span> <span class="operator">=</span> RuoYiConfig.getCaptchaType();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;math&quot;</span>.equals(captchaType))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">capText</span> <span class="operator">=</span> captchaProducerMath.createText(); <span class="comment">//获取验证码</span></span><br><span class="line">            capStr = capText.substring(<span class="number">0</span>, capText.lastIndexOf(<span class="string">&quot;@&quot;</span>)); <span class="comment">//@分割，@前的表达式 </span></span><br><span class="line">            code = capText.substring(capText.lastIndexOf(<span class="string">&quot;@&quot;</span>) + <span class="number">1</span>); <span class="comment">//@后的答案</span></span><br><span class="line">            image = captchaProducerMath.createImage(capStr); <span class="comment">//生成图片</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;char&quot;</span>.equals(captchaType))</span><br><span class="line">        &#123;</span><br><span class="line">            capStr = code = captchaProducer.createText();</span><br><span class="line">            image = captchaProducer.createImage(capStr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将key值，答案，有效期，分钟一起存入Redis</span></span><br><span class="line">        redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 转换流信息写出</span></span><br><span class="line">        <span class="type">FastByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, os);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ajax.put(<span class="string">&quot;uuid&quot;</span>, uuid);</span><br><span class="line">        ajax.put(<span class="string">&quot;img&quot;</span>, Base64.encode(os.toByteArray()));</span><br><span class="line">        <span class="keyword">return</span> ajax; <span class="comment">//将uuid和验证码图片返回前端</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-2-登录"><a href="#3-2-登录" class="headerlink" title="3-2 登录"></a>3-2 登录</h2><h3 id="3-2-1-后端思路"><a href="#3-2-1-后端思路" class="headerlink" title="3-2-1 后端思路"></a>3-2-1 后端思路</h3><ul>
<li>1、校验验证码</li>
<li>2、校验用户名和密码</li>
<li>3、生成 Token</li>
<li>使用异步任务管理器，结合线程池，实现了异步的操作日志记录，和业务逻辑实现异步解耦合。</li>
</ul>
<h3 id="3-2-2-后端实现"><a href="#3-2-2-后端实现" class="headerlink" title="3-2-2 后端实现"></a>3-2-2 后端实现</h3><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysLoginController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SysLoginService loginService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginBody 登录信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginBody loginBody)</span> <span class="comment">//前端提交的登录表单内容</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">AjaxResult</span> <span class="variable">ajax</span> <span class="operator">=</span> AjaxResult.success();</span><br><span class="line">    <span class="comment">// 生成令牌</span></span><br><span class="line">    <span class="comment">//得到用户名、密码、验证码答案、uuid</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> loginService.login(loginBody.getUsername(), loginBody.getPassword(), 				                    loginBody.getCode(),loginBody.getUuid()); <span class="comment">//调用login</span></span><br><span class="line">    ajax.put(Constants.TOKEN, token);</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-framework.com.ruoyi.framework.web.service.SysLoginService</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录校验方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenService tokenService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISysUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISysConfigService configService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录验证</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uuid 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, String code, String uuid)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 验证码校验</span></span><br><span class="line">        validateCaptcha(username, code, uuid);</span><br><span class="line">        <span class="comment">// 登录前置校验</span></span><br><span class="line">        loginPreCheck(username, password);</span><br><span class="line">        <span class="comment">// 用户验证</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span>                             <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, password);</span><br><span class="line">            AuthenticationContextHolder.setContext(authenticationToken);</span><br><span class="line">            <span class="comment">// 该方法会去调用UserDetailsServiceImpl.loadUserByUsername</span></span><br><span class="line">            authentication = authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException)</span><br><span class="line">            &#123;</span><br><span class="line">                AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL,   MessageUtils.message(<span class="string">&quot;user.password.not.match&quot;</span>)));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserPasswordNotMatchException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL,   e.getMessage()));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            AuthenticationContextHolder.clearContext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录操作日志</span></span><br><span class="line">        AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_SUCCESS, MessageUtils.message(<span class="string">&quot;user.login.success&quot;</span>)));</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        <span class="comment">//记录用户最新的登录信息</span></span><br><span class="line">        recordLoginInfo(loginUser.getUserId());</span><br><span class="line">        <span class="comment">// 生成token</span></span><br><span class="line">        <span class="keyword">return</span> tokenService.createToken(loginUser); <span class="comment">//调用createToken</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验验证码</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uuid 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validateCaptcha</span><span class="params">(String username, String code, String uuid)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">captchaEnabled</span> <span class="operator">=</span> configService.selectCaptchaEnabled();</span><br><span class="line">        <span class="keyword">if</span> (captchaEnabled)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">verifyKey</span> <span class="operator">=</span> CacheConstants.CAPTCHA_CODE_KEY + StringUtils.nvl(uuid, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">captcha</span> <span class="operator">=</span> redisCache.getCacheObject(verifyKey); <span class="comment">//从Redis里面获取key值对应的答案  </span></span><br><span class="line">            redisCache.deleteObject(verifyKey); <span class="comment">//从Redis里面删除key值</span></span><br><span class="line">            <span class="keyword">if</span> (captcha == <span class="literal">null</span>) <span class="comment">//如果Redis答案不存在</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//异步日志</span></span><br><span class="line">                AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="string">&quot;user.jcaptcha.expire&quot;</span>)));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CaptchaExpireException</span>(); <span class="comment">//抛出过期异常</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!code.equalsIgnoreCase(captcha)) <span class="comment">//如果验证码答案和Redis答案不一致</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//异步日志</span></span><br><span class="line">                AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="string">&quot;user.jcaptcha.error&quot;</span>)));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CaptchaException</span>(); <span class="comment">//抛出错误异常</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录前置校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 用户密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loginPreCheck</span><span class="params">(String username, String password)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用户名或密码为空 错误</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(username) || StringUtils.isEmpty(password))</span><br><span class="line">        &#123;</span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="string">&quot;not.null&quot;</span>)));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotExistsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 密码如果不在指定范围内 错误</span></span><br><span class="line">        <span class="keyword">if</span> (password.length() &lt; UserConstants.PASSWORD_MIN_LENGTH</span><br><span class="line">                || password.length() &gt; UserConstants.PASSWORD_MAX_LENGTH)</span><br><span class="line">        &#123;</span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="string">&quot;user.password.not.match&quot;</span>)));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserPasswordNotMatchException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用户名不在指定范围内 错误</span></span><br><span class="line">        <span class="keyword">if</span> (username.length() &lt; UserConstants.USERNAME_MIN_LENGTH</span><br><span class="line">                || username.length() &gt; UserConstants.USERNAME_MAX_LENGTH)</span><br><span class="line">        &#123;</span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="string">&quot;user.password.not.match&quot;</span>)));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserPasswordNotMatchException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// IP黑名单校验</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">blackStr</span> <span class="operator">=</span> configService.selectConfigByKey(<span class="string">&quot;sys.login.blackIPList&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (IpUtils.isMatchedIp(blackStr, IpUtils.getIpAddr()))</span><br><span class="line">        &#123;</span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="string">&quot;login.blocked&quot;</span>)));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BlackListException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录登录信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordLoginInfo</span><span class="params">(Long userId)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysUser</span>();</span><br><span class="line">        sysUser.setUserId(userId);</span><br><span class="line">        sysUser.setLoginIp(IpUtils.getIpAddr());</span><br><span class="line">        sysUser.setLoginDate(DateUtils.getNowDate());</span><br><span class="line">        userService.updateUserProfile(sysUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-framework.com.ruoyi.framework.web.service.TokenService</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token验证处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(TokenService.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 令牌自定义标识</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;token.header&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String header;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 令牌秘钥</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;token.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 令牌有效期（默认30分钟）</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;token.expireTime&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MILLIS_SECOND</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MILLIS_MINUTE</span> <span class="operator">=</span> <span class="number">60</span> * MILLIS_SECOND;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">MILLIS_MINUTE_TEN</span> <span class="operator">=</span> <span class="number">20</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户身份信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LoginUser <span class="title function_">getLoginUser</span><span class="params">(HttpServletRequest request)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取请求携带的令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getToken(request);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(token))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> parseToken(token);</span><br><span class="line">                <span class="comment">// 解析对应的权限以及用户信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> (String) claims.get(Constants.LOGIN_USER_KEY);</span><br><span class="line">                <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> getTokenKey(uuid);</span><br><span class="line">                <span class="type">LoginUser</span> <span class="variable">user</span> <span class="operator">=</span> redisCache.getCacheObject(userKey);</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                log.error(<span class="string">&quot;获取用户信息异常&#x27;&#123;&#125;&#x27;&quot;</span>, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用户身份信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginUser</span><span class="params">(LoginUser loginUser)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotNull(loginUser) &amp;&amp; StringUtils.isNotEmpty(loginUser.getToken()))</span><br><span class="line">        &#123;</span><br><span class="line">            refreshToken(loginUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户身份信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delLoginUser</span><span class="params">(String token)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(token))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> getTokenKey(token);</span><br><span class="line">            redisCache.deleteObject(userKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createToken</span><span class="params">(LoginUser loginUser)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> IdUtils.fastUUID();</span><br><span class="line">        loginUser.setToken(token);</span><br><span class="line">        setUserAgent(loginUser);</span><br><span class="line">        refreshToken(loginUser);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(Constants.LOGIN_USER_KEY, token);</span><br><span class="line">        <span class="keyword">return</span> createToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证令牌有效期，相差不足20分钟，自动刷新缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verifyToken</span><span class="params">(LoginUser loginUser)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">expireTime</span> <span class="operator">=</span> loginUser.getExpireTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (expireTime - currentTime &lt;= MILLIS_MINUTE_TEN)</span><br><span class="line">        &#123;</span><br><span class="line">            refreshToken(loginUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新令牌有效期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser 登录信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refreshToken</span><span class="params">(LoginUser loginUser)</span></span><br><span class="line">    &#123;</span><br><span class="line">        loginUser.setLoginTime(System.currentTimeMillis());</span><br><span class="line">        loginUser.setExpireTime(loginUser.getLoginTime() + expireTime * MILLIS_MINUTE);</span><br><span class="line">        <span class="comment">// 根据uuid将loginUser缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> getTokenKey(loginUser.getToken());</span><br><span class="line">        redisCache.setCacheObject(userKey, loginUser, expireTime, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用户代理信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser 登录信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserAgent</span><span class="params">(LoginUser loginUser)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">UserAgent</span> <span class="variable">userAgent</span> <span class="operator">=</span> UserAgent.parseUserAgentString(ServletUtils.getRequest().getHeader(<span class="string">&quot;User-Agent&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> IpUtils.getIpAddr();</span><br><span class="line">        loginUser.setIpaddr(ip);</span><br><span class="line">        loginUser.setLoginLocation(AddressUtils.getRealAddressByIP(ip));</span><br><span class="line">        loginUser.setBrowser(userAgent.getBrowser().getName());</span><br><span class="line">        loginUser.setOs(userAgent.getOperatingSystem().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据声明生成令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims 数据声明</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">createToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret).compact();</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从令牌中获取数据声明</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据声明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Claims <span class="title function_">parseToken</span><span class="params">(String token)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secret)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从令牌中获取用户名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsernameFromToken</span><span class="params">(String token)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> parseToken(token);</span><br><span class="line">        <span class="keyword">return</span> claims.getSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getToken</span><span class="params">(HttpServletRequest request)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(header);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(token) &amp;&amp; token.startsWith(Constants.TOKEN_PREFIX))</span><br><span class="line">        &#123;</span><br><span class="line">            token = token.replace(Constants.TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getTokenKey</span><span class="params">(String uuid)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> CacheConstants.LOGIN_TOKEN_KEY + uuid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-3-前端实现"><a href="#3-2-3-前端实现" class="headerlink" title="3-2-3 前端实现"></a>3-2-3 前端实现</h3><ul>
<li>login.vue</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">loginForm</span>.<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">rememberMe</span>) &#123; <span class="comment">//检验是否保存密码</span></span><br><span class="line">                <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;username&quot;</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span>, &#123; <span class="attr">expires</span>: <span class="number">30</span> &#125;);</span><br><span class="line">                <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;password&quot;</span>, <span class="title function_">encrypt</span>(<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">password</span>), &#123; <span class="attr">expires</span>: <span class="number">30</span> &#125;);</span><br><span class="line">                <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;rememberMe&#x27;</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">rememberMe</span>, &#123; <span class="attr">expires</span>: <span class="number">30</span> &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;rememberMe&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;Login&quot;</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">//调用Login</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="variable language_">this</span>.<span class="property">redirect</span> || <span class="string">&quot;/&quot;</span> &#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;&#125;);</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">captchaEnabled</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">getCode</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.store.modules.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="title class_">Login</span>(&#123; commit &#125;, userInfo) &#123;</span><br><span class="line">    <span class="keyword">const</span> username = userInfo.<span class="property">username</span>.<span class="title function_">trim</span>()</span><br><span class="line">    <span class="keyword">const</span> password = userInfo.<span class="property">password</span></span><br><span class="line">    <span class="keyword">const</span> code = userInfo.<span class="property">code</span></span><br><span class="line">    <span class="keyword">const</span> uuid = userInfo.<span class="property">uuid</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">login</span>(username, password, code, uuid).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">//调用login</span></span><br><span class="line">            <span class="title function_">setToken</span>(res.<span class="property">token</span>)</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, res.<span class="property">token</span>)</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.login.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">username, password, code, uuid</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    username,</span><br><span class="line">    password,</span><br><span class="line">    code,</span><br><span class="line">    uuid</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="attr">isToken</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">repeatSubmit</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="4-获取用户角色和权限"><a href="#4-获取用户角色和权限" class="headerlink" title="4- 获取用户角色和权限"></a>4- 获取用户角色和权限</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>获取当前用户的角色和权限信息，存储到 vuex 中。</p>
<h2 id="4-1-前端实现"><a href="#4-1-前端实现" class="headerlink" title="4-1 前端实现"></a>4-1 前端实现</h2><ul>
<li>permission.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局路由管理器，前端每个页面跳转都要进入他</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getToken</span>()) &#123;</span><br><span class="line">    to.<span class="property">meta</span>.<span class="property">title</span> &amp;&amp; store.<span class="title function_">dispatch</span>(<span class="string">&#x27;settings/setTitle&#x27;</span>, to.<span class="property">meta</span>.<span class="property">title</span>)</span><br><span class="line">    <span class="comment">/* has token*/</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">roles</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        isRelogin.<span class="property">show</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GetInfo&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">//调用GetInfo</span></span><br><span class="line">          isRelogin.<span class="property">show</span> = <span class="literal">false</span></span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GenerateRoutes&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">accessRoutes</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            router.<span class="title function_">addRoutes</span>(accessRoutes) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">            <span class="title function_">next</span>(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            store.<span class="title function_">dispatch</span>(<span class="string">&#x27;LogOut&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="title class_">Message</span>.<span class="title function_">error</span>(err)</span><br><span class="line">              <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(to.fullPath)&#125;</span>`</span>) <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.store.modules.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取用户信息</span></span><br><span class="line"><span class="title class_">GetInfo</span>(&#123; commit, state &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">getInfo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">//调用getInfo</span></span><br><span class="line">            <span class="keyword">const</span> user = res.<span class="property">user</span></span><br><span class="line">            <span class="keyword">const</span> avatar = (user.<span class="property">avatar</span> == <span class="string">&quot;&quot;</span> || user.<span class="property">avatar</span> == <span class="literal">null</span>) ? <span class="built_in">require</span>(<span class="string">&quot;@/assets/images/profile.jpg&quot;</span>) : process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span> + user.<span class="property">avatar</span>;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">roles</span> &amp;&amp; res.<span class="property">roles</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123; <span class="comment">// 验证返回的roles是否是一个非空数组</span></span><br><span class="line">                <span class="comment">//如果存在，将角色与权限存到vuex里面，做全局存储</span></span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, res.<span class="property">roles</span>)</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;SET_PERMISSIONS&#x27;</span>, res.<span class="property">permissions</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, [<span class="string">&#x27;ROLE_DEFAULT&#x27;</span>])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_ID&#x27;</span>, user.<span class="property">userId</span>)</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_NAME&#x27;</span>, user.<span class="property">userName</span>)</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_AVATAR&#x27;</span>, avatar)</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.login.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/getInfo&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-2-后端实现"><a href="#4-2-后端实现" class="headerlink" title="4-2 后端实现"></a>4-2 后端实现</h2><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysLoginController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SysPermissionService permissionService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取用户信息</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;getInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">getInfo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> SecurityUtils.getLoginUser().getUser(); <span class="comment">//获取用户信息</span></span><br><span class="line">    <span class="comment">// 角色集合</span></span><br><span class="line">    Set&lt;String&gt; roles = permissionService.getRolePermission(user);</span><br><span class="line">    <span class="comment">// 权限集合</span></span><br><span class="line">    Set&lt;String&gt; permissions = permissionService.getMenuPermission(user);</span><br><span class="line">    <span class="type">AjaxResult</span> <span class="variable">ajax</span> <span class="operator">=</span> AjaxResult.success();</span><br><span class="line">    ajax.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    ajax.put(<span class="string">&quot;roles&quot;</span>, roles);</span><br><span class="line">    ajax.put(<span class="string">&quot;permissions&quot;</span>, permissions);</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-framework.com.ruoyi.framework.web.service.SysPermissionService</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取角色数据权限</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 角色权限信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getRolePermission</span><span class="params">(SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">    Set&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">    <span class="comment">// 管理员拥有所有权限</span></span><br><span class="line">    <span class="keyword">if</span> (user.isAdmin()) <span class="comment">//判断是否为超级管理员</span></span><br><span class="line">    &#123;</span><br><span class="line">        roles.add(<span class="string">&quot;admin&quot;</span>); <span class="comment">//&quot;admin&quot;代表超级管理员</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        roles.addAll(roleService.selectRolePermissionByUserId(user.getUserId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> roles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取菜单数据权限</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 菜单权限信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getMenuPermission</span><span class="params">(SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">    Set&lt;String&gt; perms = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">    <span class="comment">// 管理员拥有所有权限</span></span><br><span class="line">    <span class="keyword">if</span> (user.isAdmin()) <span class="comment">//判断是否为超级管理员</span></span><br><span class="line">    &#123;</span><br><span class="line">        perms.add(<span class="string">&quot;*:*:*&quot;</span>); <span class="comment">//&quot;*:*:*&quot;代表有所有权限</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;SysRole&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(roles))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 多角色设置permissions属性，以便数据权限匹配权限</span></span><br><span class="line">            <span class="keyword">for</span> (SysRole role : roles)</span><br><span class="line">            &#123;</span><br><span class="line">                Set&lt;String&gt; rolePerms = menuService.selectMenuPermsByRoleId(role.getRoleId());</span><br><span class="line">                role.setPermissions(rolePerms);</span><br><span class="line">                perms.addAll(rolePerms);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            perms.addAll(menuService.selectMenuPermsByUserId(user.getUserId()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> perms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-3-数据库"><a href="#4-3-数据库" class="headerlink" title="4-3 数据库"></a>4-3 数据库</h2><ul>
<li>sys-role（角色表）</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240528154630969.png"
                      alt="image-20240528154630969"
                ></p>
<ul>
<li>sys-user（用户表）</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240528154657836.png"
                      alt="image-20240528154657836"
                ></p>
<ul>
<li>sys-user-role（中间链接表）</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240528154809411.png"
                      alt="image-20240528154809411"
                ></p>
<h1 id="5-获取动态菜单路由"><a href="#5-获取动态菜单路由" class="headerlink" title="5- 获取动态菜单路由"></a>5- 获取动态菜单路由</h1><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>根据当前用户的权限获取动态路由。</p>
<h2 id="5-1-前端实现"><a href="#5-1-前端实现" class="headerlink" title="5-1 前端实现"></a>5-1 前端实现</h2><ul>
<li>permission.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局路由管理器，前端每个页面跳转都要进入他</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getToken</span>()) &#123;</span><br><span class="line">    to.<span class="property">meta</span>.<span class="property">title</span> &amp;&amp; store.<span class="title function_">dispatch</span>(<span class="string">&#x27;settings/setTitle&#x27;</span>, to.<span class="property">meta</span>.<span class="property">title</span>)</span><br><span class="line">    <span class="comment">/* has token*/</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">roles</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        isRelogin.<span class="property">show</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GetInfo&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          isRelogin.<span class="property">show</span> = <span class="literal">false</span></span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GenerateRoutes&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">accessRoutes</span> =&gt;</span> &#123; <span class="comment">//调用GenerateRoutes</span></span><br><span class="line">            <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            router.<span class="title function_">addRoutes</span>(accessRoutes) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">            <span class="title function_">next</span>(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            store.<span class="title function_">dispatch</span>(<span class="string">&#x27;LogOut&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="title class_">Message</span>.<span class="title function_">error</span>(err)</span><br><span class="line">              <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(to.fullPath)&#125;</span>`</span>) <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.store.modules.permission.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="comment">// 生成路由</span></span><br><span class="line">  <span class="title class_">GenerateRoutes</span>(&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 向后端请求路由数据</span></span><br><span class="line">      <span class="title function_">getRouters</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">//调用getRouters</span></span><br><span class="line">        <span class="keyword">const</span> sdata = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))</span><br><span class="line">        <span class="keyword">const</span> rdata = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))</span><br><span class="line">        <span class="keyword">const</span> sidebarRoutes = <span class="title function_">filterAsyncRouter</span>(sdata)</span><br><span class="line">        <span class="keyword">const</span> rewriteRoutes = <span class="title function_">filterAsyncRouter</span>(rdata, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">const</span> asyncRoutes = <span class="title function_">filterDynamicRoutes</span>(dynamicRoutes);</span><br><span class="line">        rewriteRoutes.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        router.<span class="title function_">addRoutes</span>(asyncRoutes);</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROUTES&#x27;</span>, rewriteRoutes)</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_SIDEBAR_ROUTERS&#x27;</span>, constantRoutes.<span class="title function_">concat</span>(sidebarRoutes))</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_DEFAULT_ROUTES&#x27;</span>, sidebarRoutes)</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOPBAR_ROUTES&#x27;</span>, sidebarRoutes)</span><br><span class="line">        <span class="title function_">resolve</span>(rewriteRoutes)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.menu.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getRouters</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/getRouters&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-2-后端实现"><a href="#5-2-后端实现" class="headerlink" title="5-2 后端实现"></a>5-2 后端实现</h2><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysLoginController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ISysMenuService menuService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取路由信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 路由信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;getRouters&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">getRouters</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId(); <span class="comment">//获取用户id</span></span><br><span class="line">    List&lt;SysMenu&gt; menus = menuService.selectMenuTreeByUserId(userId); <span class="comment">//获取对应的分级菜单列表</span></span><br><span class="line">    <span class="keyword">return</span> AjaxResult.success(menuService.buildMenus(menus)); <span class="comment">//构建前端路由所需要的菜单，返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysMenuServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户ID查询菜单</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 用户名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 菜单列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SysMenu&gt; <span class="title function_">selectMenuTreeByUserId</span><span class="params">(Long userId)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;SysMenu&gt; menus = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (SecurityUtils.isAdmin(userId)) <span class="comment">//判断是否为超级管理员</span></span><br><span class="line">    &#123;</span><br><span class="line">    	menus = menuMapper.selectMenuTreeAll(); <span class="comment">//调用selectMenuTreeAll，根据用户ID查询菜单树信息（所有）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    	menus = menuMapper.selectMenuTreeByUserId(userId); <span class="comment">//调用selectMenuTreeByUserId，根据用户ID查询菜单树信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getChildPerms(menus, <span class="number">0</span>); <span class="comment">//调用getChildPerms，把菜单树信息转换成分级菜单列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysMenuServiceImpl</li>
</ul>
<p>本代码是先得到上面（数据库的24条数据和parentId为0），然后找到 parentId为0 的4条数据；</p>
<p>然后从4条数据中的 ”系统管理“ 的menuId和24条数据的 parentId 比较，得到  parentId为1 的9条数据；</p>
<p>然后判断这9条数据是否还有子节点，如果有，则递归，将 “日志管理” 的menuId和24条数据的 parentId 比较，得到 parentId为108 的2条数据。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据父节点的ID获取所有子节点</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 分类表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentId 传入的父节点ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SysMenu&gt; <span class="title function_">getChildPerms</span><span class="params">(List&lt;SysMenu&gt; list, <span class="type">int</span> parentId)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;SysMenu&gt; returnList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;SysMenu&gt;(); </span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;SysMenu&gt; iterator = list.iterator(); iterator.hasNext();) <span class="comment">//遍历每个节点  </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SysMenu</span> <span class="variable">t</span> <span class="operator">=</span> (SysMenu) iterator.next();</span><br><span class="line">        <span class="comment">// 一、根据传入的某个父节点ID,遍历该父节点的所有子节点</span></span><br><span class="line">        <span class="keyword">if</span> (t.getParentId() == parentId)</span><br><span class="line">        &#123;</span><br><span class="line">            recursionFn(list, t); <span class="comment">//调用recursionFn，为每个节点设置子节点（如果有） </span></span><br><span class="line">            returnList.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> returnList; <span class="comment">//返回分级菜单列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归列表</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 分类表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t 子节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recursionFn</span><span class="params">(List&lt;SysMenu&gt; list, SysMenu t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 得到子节点列表</span></span><br><span class="line">    List&lt;SysMenu&gt; childList = getChildList(list, t); <span class="comment">//调用getChildList，得到子节点列表</span></span><br><span class="line">    t.setChildren(childList); <span class="comment">//设置子节点</span></span><br><span class="line">    <span class="keyword">for</span> (SysMenu tChild : childList) <span class="comment">//遍历子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasChild(list, tChild))  <span class="comment">//调用hasChild，判断是否子节点还有子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            recursionFn(list, tChild); <span class="comment">//递归处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到子节点列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;SysMenu&gt; <span class="title function_">getChildList</span><span class="params">(List&lt;SysMenu&gt; list, SysMenu t)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;SysMenu&gt; tlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;SysMenu&gt;();</span><br><span class="line">    Iterator&lt;SysMenu&gt; it = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SysMenu</span> <span class="variable">n</span> <span class="operator">=</span> (SysMenu) it.next();</span><br><span class="line">        <span class="keyword">if</span> (n.getParentId().longValue() == t.getMenuId().longValue())</span><br><span class="line">        &#123;</span><br><span class="line">            tlist.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tlist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否有子节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasChild</span><span class="params">(List&lt;SysMenu&gt; list, SysMenu t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> getChildList(list, t).size() &gt; <span class="number">0</span>; <span class="comment">//调用getChildList</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-3-数据库"><a href="#5-3-数据库" class="headerlink" title="5-3 数据库"></a>5-3 数据库</h2><ul>
<li>sys-menu</li>
</ul>
<p>菜单表是通过 menu-id 与 parent-id 来形成分级菜单的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240528164545407.png"
                      alt="image-20240528164545407"
                ></p>
<h1 id="6-首页数据加载"><a href="#6-首页数据加载" class="headerlink" title="6- 首页数据加载"></a>6- 首页数据加载</h1><h2 id="6-1-侧边栏菜单"><a href="#6-1-侧边栏菜单" class="headerlink" title="6-1 侧边栏菜单"></a>6-1 侧边栏菜单</h2><ul>
<li>ruoyi-ui.src.layout.components.Sidebar.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sidebar-item       </span><br><span class="line">    v-for=&quot;(route, index) in sidebarRouters&quot;  //通过遍历，实现侧边栏菜单。   </span><br><span class="line">    :key=&quot;route.path  + index&quot;</span><br><span class="line">    :item=&quot;route&quot;</span><br><span class="line">    :base-path=&quot;route.path&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="6-2-主页面"><a href="#6-2-主页面" class="headerlink" title="6-2 主页面"></a>6-2 主页面</h2><ul>
<li>ruoyi-ui.src.router.index.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Layout</span>, <span class="comment">//登录后跳向 layout.index.vue </span></span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;index&#x27;</span>, <span class="comment">//重定向，从 layout.index.vue 自动跳向 views/index.vue</span></span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/index&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span>, <span class="attr">affix</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.layout.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :class=&quot;classObj&quot; class=&quot;app-wrapper&quot; :style=&quot;&#123;&#x27;--current-color&#x27;: theme&#125;&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;device===&#x27;mobile&#x27;&amp;&amp;sidebar.opened&quot; class=&quot;drawer-bg&quot; @click=&quot;handleClickOutside&quot;/&gt;</span><br><span class="line">    &lt;sidebar v-if=&quot;!sidebar.hide&quot; class=&quot;sidebar-container&quot;/&gt; //侧边栏</span><br><span class="line">    &lt;div :class=&quot;&#123;hasTagsView:needTagsView,sidebarHide:sidebar.hide&#125;&quot; class=&quot;main-container&quot;&gt;</span><br><span class="line">      &lt;div :class=&quot;&#123;&#x27;fixed-header&#x27;:fixedHeader&#125;&quot;&gt;</span><br><span class="line">        &lt;navbar/&gt;</span><br><span class="line">        &lt;tags-view v-if=&quot;needTagsView&quot;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;app-main/&gt; //主页面</span><br><span class="line">      &lt;right-panel&gt;</span><br><span class="line">        &lt;settings/&gt;</span><br><span class="line">      &lt;/right-panel&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.views.index.vue</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240529200143986.png"
                      alt="image-20240529200143986"
                ></p>
<h2 id="6-3-页面跳转"><a href="#6-3-页面跳转" class="headerlink" title="6-3 页面跳转"></a>6-3 页面跳转</h2><p>从数据库 sys-menu 表中的 component 得到对应功能的 前端页面路径，默认是其下面的 index.vue。</p>
<h1 id="7-用户管理-分页查询"><a href="#7-用户管理-分页查询" class="headerlink" title="7- 用户管理-分页查询"></a>7- 用户管理-分页查询</h1><h2 id="7-1-前端实现"><a href="#7-1-前端实现" class="headerlink" title="7-1 前端实现"></a>7-1 前端实现</h2><ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 查询用户列表 */</span></span><br><span class="line"><span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>; <span class="comment">//是否开启加载效果</span></span><br><span class="line">    <span class="comment">//调用listUser，携带参数 页数和每页条数</span></span><br><span class="line">    <span class="title function_">listUser</span>(<span class="variable language_">this</span>.<span class="title function_">addDateRange</span>(<span class="variable language_">this</span>.<span class="property">queryParams</span>, <span class="variable language_">this</span>.<span class="property">dateRange</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userList</span> = response.<span class="property">rows</span>; <span class="comment">//所有的数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">total</span> = response.<span class="property">total</span>; <span class="comment">//数据总数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>; <span class="comment">//当加载完毕后，关闭加载效果</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.system.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询用户列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">listUser</span>(<span class="params">query</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/system/user/list&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: query</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="7-2-后端实现"><a href="#7-2-后端实现" class="headerlink" title="7-2 后端实现"></a>7-2 后端实现</h2><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysUserController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:list&#x27;)&quot;)</span> <span class="comment">//判断用户是否有权限</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> TableDataInfo <span class="title function_">list</span><span class="params">(SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">    startPage(); <span class="comment">// 调用startPage，此方法配合前端完成自动分页</span></span><br><span class="line">    List&lt;SysUser&gt; list = userService.selectUserList(user); <span class="comment">//调用selectUserList，从数据库查询数据</span></span><br><span class="line">    <span class="keyword">return</span> getDataTable(list); <span class="comment">//返回表格分页数据对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><ul>
<li>ruoyi-common.com.ruoyi.common.utils.PageUtils</li>
</ul>
<p>PageHelper 中的 reasonable 对参数进行逻辑处理，保证参数的正确性。</p>
<p>比如 pageNum &#x3D; 0、-1，那 pageNum 默认 &#x3D;1。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置请求分页数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startPage</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.创建一个PageDomain对象，用于接收前端分页的参数；</span></span><br><span class="line">    <span class="type">PageDomain</span> <span class="variable">pageDomain</span> <span class="operator">=</span> TableSupport.buildPageRequest(); <span class="comment">//调用buildPageRequest，获取分页参数</span></span><br><span class="line">    <span class="comment">//2.从PageDomain对象中提取出当前页码、每页大小、排序条件；</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageNum</span> <span class="operator">=</span> pageDomain.getPageNum(); <span class="comment">//获取当前页码</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> pageDomain.getPageSize(); <span class="comment">//获取每页大小</span></span><br><span class="line">    <span class="comment">//3.对排序条件进行转义处理，防止SQL注入；</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">orderBy</span> <span class="operator">=</span> SqlUtil.escapeOrderBySql(pageDomain.getOrderBy());</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">reasonable</span> <span class="operator">=</span> pageDomain.getReasonable(); <span class="comment">//获取是否合理分页</span></span><br><span class="line">    <span class="comment">//4.使用PageHelper开启分页，设置页码、每页大小、排序条件和是否合理分页。</span></span><br><span class="line">    PageHelper.startPage(pageNum, pageSize, orderBy).setReasonable(reasonable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-common.com.ruoyi.common.core.page.TableSupport</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前记录起始索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAGE_NUM</span> <span class="operator">=</span> <span class="string">&quot;pageNum&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每页显示记录数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAGE_SIZE</span> <span class="operator">=</span> <span class="string">&quot;pageSize&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_BY_COLUMN</span> <span class="operator">=</span> <span class="string">&quot;orderByColumn&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序的方向 &quot;desc&quot; 或者 &quot;asc&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IS_ASC</span> <span class="operator">=</span> <span class="string">&quot;isAsc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页参数合理化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REASONABLE</span> <span class="operator">=</span> <span class="string">&quot;reasonable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装分页对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PageDomain <span class="title function_">getPageDomain</span><span class="params">()</span> <span class="comment">//获取前端传入的分页参数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">PageDomain</span> <span class="variable">pageDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageDomain</span>();</span><br><span class="line">    pageDomain.setPageNum(Convert.toInt(ServletUtils.getParameter(PAGE_NUM), <span class="number">1</span>));</span><br><span class="line">    pageDomain.setPageSize(Convert.toInt(ServletUtils.getParameter(PAGE_SIZE), <span class="number">10</span>));</span><br><span class="line">    pageDomain.setOrderByColumn(ServletUtils.getParameter(ORDER_BY_COLUMN));</span><br><span class="line">    pageDomain.setIsAsc(ServletUtils.getParameter(IS_ASC));</span><br><span class="line">    pageDomain.setReasonable(ServletUtils.getParameterToBool(REASONABLE));</span><br><span class="line">    <span class="keyword">return</span> pageDomain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PageDomain <span class="title function_">buildPageRequest</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> getPageDomain(); <span class="comment">//调用getPageDomain</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysUserServiceImpl</li>
</ul>
<p>注解 @DataScope(deptAlias &#x3D; “d”, userAlias &#x3D; “u”)  作用：</p>
<p>给表设置别名的，sys_dept 是 d，sys_user 是 u。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件分页查询用户列表</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户信息集合信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@DataScope(deptAlias = &quot;d&quot;, userAlias = &quot;u&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title function_">selectUserList</span><span class="params">(SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> userMapper.selectUserList(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="8-用户管理-公司树状图"><a href="#8-用户管理-公司树状图" class="headerlink" title="8- 用户管理-公司树状图"></a>8- 用户管理-公司树状图</h1><h2 id="8-1-前端实现"><a href="#8-1-前端实现" class="headerlink" title="8-1 前端实现"></a>8-1 前端实现</h2><ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 查询部门下拉树结构 */</span></span><br><span class="line"><span class="title function_">getDeptTree</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">deptTreeSelect</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//调用deptTreeSelect</span></span><br><span class="line">    	<span class="variable language_">this</span>.<span class="property">deptOptions</span> = response.<span class="property">data</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.system.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询部门下拉树结构</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deptTreeSelect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/system/user/deptTree&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="8-2-后端实现"><a href="#8-2-后端实现" class="headerlink" title="8-2 后端实现"></a>8-2 后端实现</h2><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysUserController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取部门树列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:list&#x27;)&quot;)</span>  <span class="comment">//判断用户是否有权限</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/deptTree&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">deptTree</span><span class="params">(SysDept dept)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> success(deptService.selectDeptTreeList(dept)); <span class="comment">//调用selectDeptTreeList</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysDeptServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询部门树结构信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dept 部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 部门树信息集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;TreeSelect&gt; <span class="title function_">selectDeptTreeList</span><span class="params">(SysDept dept)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//调用selectDeptList，得到所有部门数据</span></span><br><span class="line">    List&lt;SysDept&gt; depts = SpringUtils.getAopProxy(<span class="built_in">this</span>).selectDeptList(dept); </span><br><span class="line">    <span class="keyword">return</span> buildDeptTreeSelect(depts); <span class="comment">//调用buildDeptTreeSelect，将得到的部门数据构造成树 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysDeptServiceImpl</li>
</ul>
<p>注解 @DataScope(deptAlias &#x3D; “d”)  作用：</p>
<p>给表设置别名的，sys_dept 是 d。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询部门管理数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dept 部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 部门信息集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@DataScope(deptAlias = &quot;d&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SysDept&gt; <span class="title function_">selectDeptList</span><span class="params">(SysDept dept)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> deptMapper.selectDeptList(dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="构造树"><a href="#构造树" class="headerlink" title="构造树"></a>构造树</h3><ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysDeptServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建前端所需要下拉树结构</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> depts 部门列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 下拉树结构列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;TreeSelect&gt; <span class="title function_">buildDeptTreeSelect</span><span class="params">(List&lt;SysDept&gt; depts)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;SysDept&gt; deptTrees = buildDeptTree(depts); <span class="comment">//调用buildDeptTree（核心方法），将传入的部门数据构造成树状图</span></span><br><span class="line">    <span class="comment">//将泛型 SysDept 转成 TreeSelect</span></span><br><span class="line">    <span class="keyword">return</span> deptTrees.stream().map(TreeSelect::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>构造树状图</p>
<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysDeptServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建前端所需要树结构</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> depts 部门列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 树结构列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SysDept&gt; <span class="title function_">buildDeptTree</span><span class="params">(List&lt;SysDept&gt; depts)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;SysDept&gt; returnList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;SysDept&gt;();</span><br><span class="line">    List&lt;Long&gt; tempList = depts.stream().map(SysDept::getDeptId).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">for</span> (SysDept dept : depts) <span class="comment">//遍历节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果是顶级节点, 遍历该父节点的所有子节点</span></span><br><span class="line">        <span class="keyword">if</span> (!tempList.contains(dept.getParentId()))</span><br><span class="line">        &#123;</span><br><span class="line">            recursionFn(depts, dept); <span class="comment">//调用recursionFn，为每个节点设置子节点（如果有） </span></span><br><span class="line">            returnList.add(dept);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (returnList.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        returnList = depts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> returnList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysMenuServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归列表</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 分类表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t 子节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recursionFn</span><span class="params">(List&lt;SysMenu&gt; list, SysMenu t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 得到子节点列表</span></span><br><span class="line">    List&lt;SysMenu&gt; childList = getChildList(list, t); <span class="comment">//调用getChildList，得到子节点列表</span></span><br><span class="line">    t.setChildren(childList); <span class="comment">//设置子节点</span></span><br><span class="line">    <span class="keyword">for</span> (SysMenu tChild : childList) <span class="comment">//遍历子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasChild(list, tChild))  <span class="comment">//调用hasChild，判断是否子节点还有子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            recursionFn(list, tChild); <span class="comment">//递归处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到子节点列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;SysMenu&gt; <span class="title function_">getChildList</span><span class="params">(List&lt;SysMenu&gt; list, SysMenu t)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;SysMenu&gt; tlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;SysMenu&gt;();</span><br><span class="line">    Iterator&lt;SysMenu&gt; it = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SysMenu</span> <span class="variable">n</span> <span class="operator">=</span> (SysMenu) it.next();</span><br><span class="line">        <span class="keyword">if</span> (n.getParentId().longValue() == t.getMenuId().longValue())</span><br><span class="line">        &#123;</span><br><span class="line">            tlist.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tlist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否有子节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasChild</span><span class="params">(List&lt;SysMenu&gt; list, SysMenu t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> getChildList(list, t).size() &gt; <span class="number">0</span>; <span class="comment">//调用getChildList</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>转换泛型</p>
<ul>
<li>ruoyi-common.com.ruoyi.common.core.domain.TreeSelect</li>
</ul>
<p>通过构造方法，将 数据库对应的部门树状图 转变为 前端对应的部门树状图</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 节点ID */</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 节点名称 */</span></span><br><span class="line"><span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 子节点 */</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;TreeSelect&gt; children;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSelect</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSelect</span><span class="params">(SysDept dept)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.id = dept.getDeptId();</span><br><span class="line">    <span class="built_in">this</span>.label = dept.getDeptName();</span><br><span class="line">    <span class="built_in">this</span>.children = dept.getChildren().stream().map(TreeSelect::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>数据库对应</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240530205740821.png"
                      alt="image-20240530205740821"
                ></p>
<ul>
<li>前端对应</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240530205811054.png"
                      alt="image-20240530205811054"
                ></p>
<h2 id="8-3-数据库"><a href="#8-3-数据库" class="headerlink" title="8-3 数据库"></a>8-3 数据库</h2><ul>
<li>sys-dept</li>
</ul>
<p>公司树是通过 dept-id 与 parent-id 来形成树状图的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240530170350824.png"
                      alt="image-20240530170350824"
                ></p>
<h1 id="9-用户管理-点击树状图查询"><a href="#9-用户管理-点击树状图查询" class="headerlink" title="9- 用户管理-点击树状图查询"></a>9- 用户管理-点击树状图查询</h1><h2 id="9-1-前端实现"><a href="#9-1-前端实现" class="headerlink" title="9-1 前端实现"></a>9-1 前端实现</h2><ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;head-container&quot;&gt;</span><br><span class="line">    &lt;el-tree</span><br><span class="line">         :data=&quot;deptOptions&quot;</span><br><span class="line">         :props=&quot;defaultProps&quot;</span><br><span class="line">         :expand-on-click-node=&quot;false&quot;</span><br><span class="line">         :filter-node-method=&quot;filterNode&quot;</span><br><span class="line">         ref=&quot;tree&quot;</span><br><span class="line">         node-key=&quot;id&quot;</span><br><span class="line">         default-expand-all</span><br><span class="line">         highlight-current</span><br><span class="line">         @node-click=&quot;handleNodeClick&quot; //点击方法</span><br><span class="line">         /&gt;</span><br><span class="line">&lt;/div&gt;        </span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节点单击事件</span></span><br><span class="line"><span class="title function_">handleNodeClick</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">deptId</span> = data.<span class="property">id</span>; <span class="comment">//得到点击的部门ID，作为参数传入后端</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>(); <span class="comment">//调用handleQuery</span></span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">/** 搜索按钮操作 */</span></span><br><span class="line"><span class="title function_">handleQuery</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">pageNum</span> = <span class="number">1</span>; <span class="comment">//将页数设置为1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getList</span>(); <span class="comment">//调用getList，获取用户</span></span><br><span class="line">&#125;,    </span><br></pre></td></tr></table></figure></div>

<h2 id="9-2-后端实现"><a href="#9-2-后端实现" class="headerlink" title="9-2 后端实现"></a>9-2 后端实现</h2><p>和 用户管理-分页查询 的后端流程一样，只是会多加一个参数 dept-id，参与查询。</p>
<h1 id="10-添加用户数据预加载（表单）"><a href="#10-添加用户数据预加载（表单）" class="headerlink" title="10- 添加用户数据预加载（表单）"></a>10- 添加用户数据预加载（表单）</h1><h2 id="10-1-前端实现"><a href="#10-1-前端实现" class="headerlink" title="10-1 前端实现"></a>10-1 前端实现</h2><ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 新增按钮 --&gt;</span><br><span class="line">&lt;el-col :span=&quot;1.5&quot;&gt;</span><br><span class="line">    &lt;el-button</span><br><span class="line">    	type=&quot;primary&quot;</span><br><span class="line">        plain</span><br><span class="line">        icon=&quot;el-icon-plus&quot;</span><br><span class="line">        size=&quot;mini&quot;</span><br><span class="line">        @click=&quot;handleAdd&quot;</span><br><span class="line">        v-hasPermi=&quot;[&#x27;system:user:add&#x27;]&quot;</span><br><span class="line">     &gt;新增&lt;/el-button&gt;</span><br><span class="line">&lt;/el-col&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 新增按钮操作 */</span></span><br><span class="line"><span class="title function_">handleAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reset</span>(); <span class="comment">//调用reset，表单重置</span></span><br><span class="line">    <span class="title function_">getUser</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//调用getUser，获取岗位和角色 </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">postOptions</span> = response.<span class="property">posts</span>; <span class="comment">//岗位</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">roleOptions</span> = response.<span class="property">roles</span>; <span class="comment">//角色</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">true</span>; <span class="comment">//打开用户表单</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;添加用户&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">password</span> = <span class="variable language_">this</span>.<span class="property">initPassword</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 表单重置</span></span><br><span class="line"><span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span> = &#123;</span><br><span class="line">        <span class="attr">userId</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">deptId</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">userName</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">nickName</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">phonenumber</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="attr">remark</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">postIds</span>: [],</span><br><span class="line">        <span class="attr">roleIds</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resetForm</span>(<span class="string">&quot;form&quot;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.system.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询用户详细</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/system/user/&#x27;</span> + <span class="title function_">parseStrEmpty</span>(userId),</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="10-2-后端实现"><a href="#10-2-后端实现" class="headerlink" title="10-2 后端实现"></a>10-2 后端实现</h2><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysUserController</li>
</ul>
<p>添加和修改使用同一个，有 userId 是修改，无 userId 是添加。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据用户编号获取详细信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:query&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(value = &#123; &quot;/&quot;, &quot;/&#123;userId&#125;&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = &quot;userId&quot;, required = false)</span> Long userId)</span></span><br><span class="line">&#123;</span><br><span class="line">    userService.checkUserDataScope(userId); <span class="comment">//调用checkUserDataScope，判断用户是否有数据权限，只有管理员可以</span></span><br><span class="line">    <span class="type">AjaxResult</span> <span class="variable">ajax</span> <span class="operator">=</span> AjaxResult.success();</span><br><span class="line">    List&lt;SysRole&gt; roles = roleService.selectRoleAll();</span><br><span class="line">    <span class="comment">//如果是管理员，获取所有角色；如果不是管理员，则排除管理员角色</span></span><br><span class="line">    ajax.put(<span class="string">&quot;roles&quot;</span>, SysUser.isAdmin(userId) ? roles : roles.stream().filter(r -&gt; !r.isAdmin()).collect(Collectors.toList()));</span><br><span class="line">    <span class="comment">//获取所有岗位</span></span><br><span class="line">    ajax.put(<span class="string">&quot;posts&quot;</span>, postService.selectPostAll());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否有userId，如果没有，直接返回；如果有，则获取他的用户信息、角色、岗位返回</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotNull(userId))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> userService.selectUserById(userId);</span><br><span class="line">        ajax.put(AjaxResult.DATA_TAG, sysUser);</span><br><span class="line">        ajax.put(<span class="string">&quot;postIds&quot;</span>, postService.selectPostListByUserId(userId));                                ajax.put(<span class="string">&quot;roleIds&quot;</span>,sysUser.getRoles().stream().map(SysRole::getRoleId).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysUserServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验用户是否有数据权限</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkUserDataScope</span><span class="params">(Long userId)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!SysUser.isAdmin(SecurityUtils.getUserId()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysUser</span>();</span><br><span class="line">        user.setUserId(userId);</span><br><span class="line">        List&lt;SysUser&gt; users = SpringUtils.getAopProxy(<span class="built_in">this</span>).selectUserList(user);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(users))</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;没有权限访问用户数据！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="10-3-数据库"><a href="#10-3-数据库" class="headerlink" title="10-3 数据库"></a>10-3 数据库</h2><ul>
<li>sys-post</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240531141555881.png"
                      alt="image-20240531141555881"
                ></p>
<h1 id="11-添加用户"><a href="#11-添加用户" class="headerlink" title="11- 添加用户"></a>11- 添加用户</h1><h2 id="11-1-前端实现"><a href="#11-1-前端实现" class="headerlink" title="11-1 前端实现"></a>11-1 前端实现</h2><ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<p>归属部门：deptOptions 是 公司树状图的 this.deptOptions &#x3D; response.data，得到树状图。</p>
<p>岗位：item in postOptions 是 this.postOptions &#x3D; response.posts，通过 添加预加载 得到的岗位数据，然后遍历显示。</p>
<p>角色：item in roleOptions 是 this.roleOptions &#x3D; response.roles，通过 添加预加载 得到的角色数据，然后遍历显示。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 添加或修改用户配置对话框 --&gt;</span><br><span class="line">    &lt;el-dialog :title=&quot;title&quot; :visible.sync=&quot;open&quot; width=&quot;600px&quot; append-to-body&gt;</span><br><span class="line">      &lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; :rules=&quot;rules&quot; label-width=&quot;80px&quot;&gt;</span><br><span class="line">        &lt;el-row&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;用户昵称&quot; prop=&quot;nickName&quot;&gt;</span><br><span class="line">              &lt;el-input v-model=&quot;form.nickName&quot; placeholder=&quot;请输入用户昵称&quot; maxlength=&quot;30&quot; /&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;归属部门&quot; prop=&quot;deptId&quot;&gt;</span><br><span class="line">              &lt;treeselect v-model=&quot;form.deptId&quot; :options=&quot;deptOptions&quot; :show-count=&quot;true&quot; placeholder=&quot;请选择归属部门&quot; /&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">        &lt;el-row&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;手机号码&quot; prop=&quot;phonenumber&quot;&gt;</span><br><span class="line">              &lt;el-input v-model=&quot;form.phonenumber&quot; placeholder=&quot;请输入手机号码&quot; maxlength=&quot;11&quot; /&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;邮箱&quot; prop=&quot;email&quot;&gt;</span><br><span class="line">              &lt;el-input v-model=&quot;form.email&quot; placeholder=&quot;请输入邮箱&quot; maxlength=&quot;50&quot; /&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">        &lt;el-row&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item v-if=&quot;form.userId == undefined&quot; label=&quot;用户名称&quot; prop=&quot;userName&quot;&gt;</span><br><span class="line">              &lt;el-input v-model=&quot;form.userName&quot; placeholder=&quot;请输入用户名称&quot; maxlength=&quot;30&quot; /&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item v-if=&quot;form.userId == undefined&quot; label=&quot;用户密码&quot; prop=&quot;password&quot;&gt;</span><br><span class="line">              &lt;el-input v-model=&quot;form.password&quot; placeholder=&quot;请输入用户密码&quot; type=&quot;password&quot; maxlength=&quot;20&quot; show-password/&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">        &lt;el-row&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;用户性别&quot;&gt;</span><br><span class="line">              &lt;el-select v-model=&quot;form.sex&quot; placeholder=&quot;请选择性别&quot;&gt;</span><br><span class="line">                &lt;el-option</span><br><span class="line">                  v-for=&quot;dict in dict.type.sys_user_sex&quot;</span><br><span class="line">                  :key=&quot;dict.value&quot;</span><br><span class="line">                  :label=&quot;dict.label&quot;</span><br><span class="line">                  :value=&quot;dict.value&quot;</span><br><span class="line">                &gt;&lt;/el-option&gt;</span><br><span class="line">              &lt;/el-select&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;状态&quot;&gt;</span><br><span class="line">              &lt;el-radio-group v-model=&quot;form.status&quot;&gt;</span><br><span class="line">                &lt;el-radio</span><br><span class="line">                  v-for=&quot;dict in dict.type.sys_normal_disable&quot;</span><br><span class="line">                  :key=&quot;dict.value&quot;</span><br><span class="line">                  :label=&quot;dict.value&quot;</span><br><span class="line">                &gt;&#123;&#123;dict.label&#125;&#125;&lt;/el-radio&gt;</span><br><span class="line">              &lt;/el-radio-group&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">        &lt;el-row&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;岗位&quot;&gt;</span><br><span class="line">              &lt;el-select v-model=&quot;form.postIds&quot; multiple placeholder=&quot;请选择岗位&quot;&gt;</span><br><span class="line">                &lt;el-option</span><br><span class="line">                  v-for=&quot;item in postOptions&quot;</span><br><span class="line">                  :key=&quot;item.postId&quot;</span><br><span class="line">                  :label=&quot;item.postName&quot;</span><br><span class="line">                  :value=&quot;item.postId&quot;</span><br><span class="line">                  :disabled=&quot;item.status == 1&quot;</span><br><span class="line">                &gt;&lt;/el-option&gt;</span><br><span class="line">              &lt;/el-select&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;角色&quot;&gt;</span><br><span class="line">              &lt;el-select v-model=&quot;form.roleIds&quot; multiple placeholder=&quot;请选择角色&quot;&gt;</span><br><span class="line">                &lt;el-option</span><br><span class="line">                  v-for=&quot;item in roleOptions&quot;</span><br><span class="line">                  :key=&quot;item.roleId&quot;</span><br><span class="line">                  :label=&quot;item.roleName&quot;</span><br><span class="line">                  :value=&quot;item.roleId&quot;</span><br><span class="line">                  :disabled=&quot;item.status == 1&quot;</span><br><span class="line">                &gt;&lt;/el-option&gt;</span><br><span class="line">              &lt;/el-select&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">        &lt;el-row&gt;</span><br><span class="line">          &lt;el-col :span=&quot;24&quot;&gt;</span><br><span class="line">            &lt;el-form-item label=&quot;备注&quot;&gt;</span><br><span class="line">              &lt;el-input v-model=&quot;form.remark&quot; type=&quot;textarea&quot; placeholder=&quot;请输入内容&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm&quot;&gt;确 定&lt;/el-button&gt; //点击确认，提交表单</span><br><span class="line">        &lt;el-button @click=&quot;cancel&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<p>在 数据库sys-user 的user-id，如果存在，是修改；如果不存在，是添加。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 提交按钮 */</span></span><br><span class="line"><span class="attr">submitForm</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;form&quot;</span>].<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">userId</span> != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">updateUser</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addUser</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//调用addUser，参数是整个表单</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.system.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addUser</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/system/user&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="11-2-后端实现"><a href="#11-2-后端实现" class="headerlink" title="11-2 后端实现"></a>11-2 后端实现</h2><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysUserController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:add&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;用户管理&quot;, businessType = BusinessType.INSERT)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">add</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!userService.checkUserNameUnique(user))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;新增用户&#x27;&quot;</span> + user.getUserName() + <span class="string">&quot;&#x27;失败，登录账号已存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isNotEmpty(user.getPhonenumber()) &amp;&amp; !userService.checkPhoneUnique(user))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;新增用户&#x27;&quot;</span> + user.getUserName() + <span class="string">&quot;&#x27;失败，手机号码已存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isNotEmpty(user.getEmail()) &amp;&amp; !userService.checkEmailUnique(user))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;新增用户&#x27;&quot;</span> + user.getUserName() + <span class="string">&quot;&#x27;失败，邮箱账号已存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    user.setCreateBy(getUsername()); <span class="comment">//将用户是谁添加的，赋到用户的 create-by 字段</span></span><br><span class="line">    user.setPassword(SecurityUtils.encryptPassword(user.getPassword())); <span class="comment">//将用户的密码进行加密</span></span><br><span class="line">    <span class="keyword">return</span> toAjax(userService.insertUser(user)); <span class="comment">//调用insertUser</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysUserServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增保存用户信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 新增用户信息</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insertUser(user);</span><br><span class="line">    <span class="comment">// 新增用户岗位关联</span></span><br><span class="line">    insertUserPost(user); <span class="comment">//数据库表sys-user-post</span></span><br><span class="line">    <span class="comment">// 新增用户与角色管理</span></span><br><span class="line">    insertUserRole(user); <span class="comment">//数据库表sys-user-role</span></span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="11-3-数据库"><a href="#11-3-数据库" class="headerlink" title="11-3 数据库"></a>11-3 数据库</h2><ul>
<li>sys-user-post</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240531222541280.png"
                      alt="image-20240531222541280"
                ></p>
<ul>
<li>sys-user-role</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240531222558574.png"
                      alt="image-20240531222558574"
                ></p>
<h1 id="12-修改用户"><a href="#12-修改用户" class="headerlink" title="12- 修改用户"></a>12- 修改用户</h1><h2 id="12-1-修改前获取用户信息"><a href="#12-1-修改前获取用户信息" class="headerlink" title="12-1 修改前获取用户信息"></a>12-1 修改前获取用户信息</h2><h3 id="12-1-1-前端实现"><a href="#12-1-1-前端实现" class="headerlink" title="12-1-1 前端实现"></a>12-1-1 前端实现</h3><ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template slot-scope=&quot;scope&quot; v-if=&quot;scope.row.userId !== 1&quot;&gt;</span><br><span class="line">    &lt;el-button</span><br><span class="line">        size=&quot;mini&quot;</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        icon=&quot;el-icon-edit&quot;</span><br><span class="line">        @click=&quot;handleUpdate(scope.row)&quot; //点击修改</span><br><span class="line">        v-hasPermi=&quot;[&#x27;system:user:edit&#x27;]&quot;</span><br><span class="line">    &gt;修改&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;    </span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 修改按钮操作 */</span></span><br><span class="line"><span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">reset</span>(); <span class="comment">//调用reset，表单重置 </span></span><br><span class="line">  <span class="keyword">const</span> userId = row.<span class="property">userId</span> || <span class="variable language_">this</span>.<span class="property">ids</span>; <span class="comment">//获取用户Id</span></span><br><span class="line">  <span class="title function_">getUser</span>(userId).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//调用getUser，参数是userId；获取岗位和角色，同时获取用户信息 </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span> = response.<span class="property">data</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">postOptions</span> = response.<span class="property">posts</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">roleOptions</span> = response.<span class="property">roles</span>;</span><br><span class="line">    <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">form</span>, <span class="string">&quot;postIds&quot;</span>, response.<span class="property">postIds</span>);</span><br><span class="line">    <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">form</span>, <span class="string">&quot;roleIds&quot;</span>, response.<span class="property">roleIds</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">true</span>; <span class="comment">//打开用户表单</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;修改用户&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">password</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.system.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询用户详细</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/system/user/&#x27;</span> + <span class="title function_">parseStrEmpty</span>(userId),</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="12-1-2-后端实现"><a href="#12-1-2-后端实现" class="headerlink" title="12-1-2 后端实现"></a>12-1-2 后端实现</h3><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysUserController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据用户编号获取详细信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:query&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(value = &#123; &quot;/&quot;, &quot;/&#123;userId&#125;&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = &quot;userId&quot;, required = false)</span> Long userId)</span></span><br><span class="line">&#123;</span><br><span class="line">    userService.checkUserDataScope(userId); <span class="comment">//调用checkUserDataScope，判断用户是否有权限，只有管理员可以</span></span><br><span class="line">    <span class="type">AjaxResult</span> <span class="variable">ajax</span> <span class="operator">=</span> AjaxResult.success();</span><br><span class="line">    List&lt;SysRole&gt; roles = roleService.selectRoleAll();</span><br><span class="line">    <span class="comment">//如果是管理员，获取所有角色；如果不是管理员，则排除管理员角色</span></span><br><span class="line">    ajax.put(<span class="string">&quot;roles&quot;</span>, SysUser.isAdmin(userId) ? roles : roles.stream().filter(r -&gt; !r.isAdmin()).collect(Collectors.toList()));</span><br><span class="line">    <span class="comment">//获取所有岗位</span></span><br><span class="line">    ajax.put(<span class="string">&quot;posts&quot;</span>, postService.selectPostAll());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否有userId，如果没有，直接返回；如果有，则获取他的用户信息、角色、岗位返回</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotNull(userId))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> userService.selectUserById(userId);</span><br><span class="line">        ajax.put(AjaxResult.DATA_TAG, sysUser);</span><br><span class="line">        <span class="comment">//将用户角色赋给 postIds</span></span><br><span class="line">        ajax.put(<span class="string">&quot;postIds&quot;</span>, postService.selectPostListByUserId(userId));</span><br><span class="line">        <span class="comment">//将用户岗位赋给roleIds</span></span><br><span class="line">       ajax.put(<span class="string">&quot;roleIds&quot;</span>,sysUser.getRoles().stream().map(SysRole::getRoleId).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="12-2-修改"><a href="#12-2-修改" class="headerlink" title="12-2 修改"></a>12-2 修改</h2><h3 id="12-2-1-前端实现"><a href="#12-2-1-前端实现" class="headerlink" title="12-2-1 前端实现"></a>12-2-1 前端实现</h3><ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 提交按钮 */</span></span><br><span class="line"><span class="attr">submitForm</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;form&quot;</span>].<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">userId</span> != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">updateUser</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//调用updateUser，参数是整个表单</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addUser</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.system.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateUser</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/system/user&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="12-2-2-后端实现"><a href="#12-2-2-后端实现" class="headerlink" title="12-2-2 后端实现"></a>12-2-2 后端实现</h3><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysUserController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:edit&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;用户管理&quot;, businessType = BusinessType.UPDATE)</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">edit</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">    userService.checkUserAllowed(user); <span class="comment">//调用checkUserAllowed，判断用户是否可以被操作</span></span><br><span class="line">    userService.checkUserDataScope(user.getUserId());</span><br><span class="line">    <span class="keyword">if</span> (!userService.checkUserNameUnique(user))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;修改用户&#x27;&quot;</span> + user.getUserName() + <span class="string">&quot;&#x27;失败，登录账号已存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isNotEmpty(user.getPhonenumber()) &amp;&amp; !userService.checkPhoneUnique(user))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;修改用户&#x27;&quot;</span> + user.getUserName() + <span class="string">&quot;&#x27;失败，手机号码已存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isNotEmpty(user.getEmail()) &amp;&amp; !userService.checkEmailUnique(user))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;修改用户&#x27;&quot;</span> + user.getUserName() + <span class="string">&quot;&#x27;失败，邮箱账号已存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    user.setUpdateBy(getUsername()); <span class="comment">//将用户是谁修改的，赋到用户的 update-by 字段</span></span><br><span class="line">    <span class="keyword">return</span> toAjax(userService.updateUser(user)); <span class="comment">//调用updateUser</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysUserServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验用户是否允许操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkUserAllowed</span><span class="params">(SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotNull(user.getUserId()) &amp;&amp; user.isAdmin())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;不允许操作超级管理员用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysUserServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改保存用户信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(SysUser user)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getUserId();</span><br><span class="line">    <span class="comment">// 删除用户与角色关联</span></span><br><span class="line">    userRoleMapper.deleteUserRoleByUserId(userId);</span><br><span class="line">    <span class="comment">// 新增用户与角色管理</span></span><br><span class="line">    insertUserRole(user);</span><br><span class="line">    <span class="comment">// 删除用户与岗位关联</span></span><br><span class="line">    userPostMapper.deleteUserPostByUserId(userId);</span><br><span class="line">    <span class="comment">// 新增用户与岗位管理</span></span><br><span class="line">    insertUserPost(user);</span><br><span class="line">    <span class="keyword">return</span> userMapper.updateUser(user); <span class="comment">//调用updateUser，修改用户信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="13-删除用户"><a href="#13-删除用户" class="headerlink" title="13- 删除用户"></a>13- 删除用户</h1><h2 id="13-1-前端实现"><a href="#13-1-前端实现" class="headerlink" title="13-1 前端实现"></a>13-1 前端实现</h2><ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">	size=&quot;mini&quot;</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    icon=&quot;el-icon-delete&quot;</span><br><span class="line">    @click=&quot;handleDelete(scope.row)&quot; //点击删除</span><br><span class="line">    v-hasPermi=&quot;[&#x27;system:user:remove&#x27;]&quot;</span><br><span class="line">&gt;删除&lt;/el-button&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.views.system.user.index.vue</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 删除按钮操作 */</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> userIds = row.<span class="property">userId</span> || <span class="variable language_">this</span>.<span class="property">ids</span>; <span class="comment">//获取用户Id</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;是否确认删除用户编号为&quot;&#x27;</span> + userIds + <span class="string">&#x27;&quot;的数据项？&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//弹窗</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">delUser</span>(userIds); <span class="comment">//调用delUser，参数是userIds</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getList</span>(); <span class="comment">//调用getList，获取用户</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;删除成功&quot;</span>); </span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-ui.src.api.system.user.js</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">delUser</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/system/user/&#x27;</span> + userId,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="13-2-后端实现"><a href="#13-2-后端实现" class="headerlink" title="13-2 后端实现"></a>13-2 后端实现</h2><ul>
<li>ruoyi-admin.com.ruoyi.web.controller.system.SysUserController</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:remove&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;用户管理&quot;, businessType = BusinessType.DELETE)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;userIds&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long[] userIds)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过比对 要删除的用户Id与当前登录用户的Id，不能删除当前用户</span></span><br><span class="line">    <span class="keyword">if</span> (ArrayUtils.contains(userIds, getUserId()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;当前用户不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> toAjax(userService.deleteUserByIds(userIds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-system.com.ruoyi.system.service.impl.SysUserServiceImpl</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除用户信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userIds 需要删除的用户ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUserByIds</span><span class="params">(Long[] userIds)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (Long userId : userIds)</span><br><span class="line">    &#123;</span><br><span class="line">        checkUserAllowed(<span class="keyword">new</span> <span class="title class_">SysUser</span>(userId)); <span class="comment">//调用checkUserAllowed，判断用户是否可以被操作</span></span><br><span class="line">        checkUserDataScope(userId); <span class="comment">//调用checkUserDataScope，判断用户是否有数据权限</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除用户与角色关联</span></span><br><span class="line">    userRoleMapper.deleteUserRole(userIds);</span><br><span class="line">    <span class="comment">// 删除用户与岗位关联</span></span><br><span class="line">    userPostMapper.deleteUserPost(userIds);</span><br><span class="line">    <span class="comment">//调用deleteUserByIds，删除用户信息（逻辑删除），他并不是把用户信息删除，而是更改 del-flag，使从0 --&gt; 2，逻辑上删除。</span></span><br><span class="line">    <span class="keyword">return</span> userMapper.deleteUserByIds(userIds); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="14-异步任务管理器"><a href="#14-异步任务管理器" class="headerlink" title="14- 异步任务管理器"></a>14- 异步任务管理器</h1><ul>
<li>ruoyi-framework.com.ruoyi.framework.web.service.SysLoginService</li>
</ul>
<p>通过异步任务管理器记录登录日志。</p>
<p>1、AsyncManager.me()：</p>
<p>​	获取一个 AsycnManager 对象，饿汉式。</p>
<p>2、execute()：</p>
<p>​	调用execute；</p>
<p>​	执行这个任务，传入的是一个 Task(任务) 对象。</p>
<p>3、AsyncFactory.recordLogininfor(username,Constants.LOGIN_FAIL,MessageUtils.message(“user.jcaptcha.expire”))：</p>
<p>​	调用 recordLogininfor；</p>
<p>​	实现了 Runnable 接口，是一个任务，由线程 Thread 去执行。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (captcha == <span class="literal">null</span>) <span class="comment">//如果Redis答案不存在</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//异步日志</span></span><br><span class="line">    AsyncManager.me().execute(AsyncFactory.recordLogininfor(username,Constants.LOGIN_FAIL,</span><br><span class="line">     	MessageUtils.message(<span class="string">&quot;user.jcaptcha.expire&quot;</span>))); </span><br><span class="line">  	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CaptchaExpireException</span>(); <span class="comment">//抛出过期异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!code.equalsIgnoreCase(captcha)) <span class="comment">//如果验证码答案和Redis答案不一致</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//异步日志</span></span><br><span class="line">    AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, 	   </span><br><span class="line">    	MessageUtils.message(<span class="string">&quot;user.jcaptcha.error&quot;</span>)));</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CaptchaException</span>(); <span class="comment">//抛出错误异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-framework.com.ruoyi.framework.manager.factory.AsyncFactory</li>
</ul>
<p>封装了登录用户的信息，执行添加操作，这里不会执行，而是将任务交给线程对象来执行。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记录登录信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 任务task</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TimerTask <span class="title function_">recordLogininfor</span><span class="params">(<span class="keyword">final</span> String username, <span class="keyword">final</span> String status, <span class="keyword">final</span> String message,</span></span><br><span class="line"><span class="params">            <span class="keyword">final</span> Object... args)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">UserAgent</span> <span class="variable">userAgent</span> <span class="operator">=</span> UserAgent.parseUserAgentString(ServletUtils.getRequest().getHeader(<span class="string">&quot;User-Agent&quot;</span>));</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> IpUtils.getIpAddr();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TimerTask</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> AddressUtils.getRealAddressByIP(ip);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            s.append(LogUtils.getBlock(ip));</span><br><span class="line">            s.append(address);</span><br><span class="line">            s.append(LogUtils.getBlock(username));</span><br><span class="line">            s.append(LogUtils.getBlock(status));</span><br><span class="line">            s.append(LogUtils.getBlock(message));</span><br><span class="line">            <span class="comment">// 打印信息到日志</span></span><br><span class="line">            sys_user_logger.info(s.toString(), args);</span><br><span class="line">            <span class="comment">// 获取客户端操作系统</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">os</span> <span class="operator">=</span> userAgent.getOperatingSystem().getName();</span><br><span class="line">            <span class="comment">// 获取客户端浏览器</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">browser</span> <span class="operator">=</span> userAgent.getBrowser().getName();</span><br><span class="line">            <span class="comment">// 封装对象</span></span><br><span class="line">            <span class="type">SysLogininfor</span> <span class="variable">logininfor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysLogininfor</span>();</span><br><span class="line">            logininfor.setUserName(username);</span><br><span class="line">            logininfor.setIpaddr(ip);</span><br><span class="line">            logininfor.setLoginLocation(address);</span><br><span class="line">            logininfor.setBrowser(browser);</span><br><span class="line">            logininfor.setOs(os);</span><br><span class="line">            logininfor.setMsg(message);</span><br><span class="line">            <span class="comment">// 日志状态</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equalsAny(status, Constants.LOGIN_SUCCESS, Constants.LOGOUT, Constants.REGISTER))</span><br><span class="line">            &#123;</span><br><span class="line">                logininfor.setStatus(Constants.SUCCESS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Constants.LOGIN_FAIL.equals(status))</span><br><span class="line">            &#123;</span><br><span class="line">                logininfor.setStatus(Constants.FAIL);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 插入数据</span></span><br><span class="line">            SpringUtils.getBean(ISysLogininforService.class).insertLogininfor(logininfor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>ruoyi-framework.com.ruoyi.framework.manager.AsyncManager</li>
</ul>
<p>异步任务管理器，内部定义了一个线程池，然后根据业务创建添加日志的任务，交给线程池来处理，这样做到日志和业务的抽象，解合，日志全部统一处理。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步任务管理器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作延迟10毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OPERATE_DELAY_TIME</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步操作任务调度线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> SpringUtils.getBean(<span class="string">&quot;scheduledExecutorService&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AsyncManager</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AsyncManager</span> <span class="variable">me</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AsyncManager</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AsyncManager <span class="title function_">me</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> me;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行任务</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(TimerTask task)</span></span><br><span class="line">    &#123;</span><br><span class="line">        executor.schedule(task, OPERATE_DELAY_TIME, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止任务线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Threads.shutdownAndAwaitTermination(executor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="15-代码自动生成"><a href="#15-代码自动生成" class="headerlink" title="15- 代码自动生成"></a>15- 代码自动生成</h1><h2 id="15-1-创建数据表"><a href="#15-1-创建数据表" class="headerlink" title="15-1 创建数据表"></a>15-1 创建数据表</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">use ruoyi_vue;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_user(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">11</span>),</span><br><span class="line">	password <span class="type">varchar</span>(<span class="number">11</span>)</span><br><span class="line">&#125;;		</span><br></pre></td></tr></table></figure></div>

<h2 id="15-2-使用工具"><a href="#15-2-使用工具" class="headerlink" title="15-2 使用工具"></a>15-2 使用工具</h2><ul>
<li>启动 若依管理系统 ，点击 系统工具，找到 代码生成。</li>
<li>点击 导入，点击 你要生成的数据库表，点击 确定。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240705153600650.png"
                      alt="image-20240705153600650"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240602160352961.png"
                      alt="image-20240602160352961"
                ></p>
<ul>
<li>点击 预览，可以看到生成的 java后端，sql数据库，vue前端的代码。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240602160655452.png"
                      alt="image-20240602160655452"
                ></p>
<h2 id="15-3-编辑"><a href="#15-3-编辑" class="headerlink" title="15-3 编辑"></a>15-3 编辑</h2><ul>
<li>点击 编辑</li>
<li>必须添加 字段描述</li>
<li>必须添加 表描述</li>
<li>生成模版：单表、树表、主子表</li>
<li>上级菜单：生成的接口会在哪个下面</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240602160928700.png"
                      alt="image-20240602160928700"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240602161001621.png"
                      alt="image-20240602161001621"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240602161220369.png"
                      alt="image-20240602161220369"
                ></p>
<h2 id="15-4-生成代码"><a href="#15-4-生成代码" class="headerlink" title="15-4 生成代码"></a>15-4 生成代码</h2><ul>
<li>点击 生成代码，点击 下载</li>
<li>会在桌面生成一个压缩包</li>
</ul>
<h2 id="15-5-解压"><a href="#15-5-解压" class="headerlink" title="15-5 解压"></a>15-5 解压</h2><ul>
<li>main (Java 后端代码)</li>
<li>vue (Vue 前端代码)</li>
<li>sql (菜单 SQL)</li>
</ul>
<h2 id="15-6-导入"><a href="#15-6-导入" class="headerlink" title="15-6 导入"></a>15-6 导入</h2><ul>
<li>复制代码，导入项目</li>
<li>菜单 由 菜单管理 编辑</li>
</ul>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><h1 id="1-使用代码生成器"><a href="#1-使用代码生成器" class="headerlink" title="1- 使用代码生成器"></a>1- 使用代码生成器</h1><h2 id="1-1-准备相应的数据库表"><a href="#1-1-准备相应的数据库表" class="headerlink" title="1-1 准备相应的数据库表"></a>1-1 准备相应的数据库表</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708195813114.png"
                      alt="image-20240708195813114"
                ></p>
<h2 id="1-2-准备SQL并导入数据库中"><a href="#1-2-准备SQL并导入数据库中" class="headerlink" title="1-2 准备SQL并导入数据库中"></a>1-2 准备SQL并导入数据库中</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708195923608.png"
                      alt="image-20240708195923608"
                ></p>
<h2 id="1-3-配置代码生成信息"><a href="#1-3-配置代码生成信息" class="headerlink" title="1-3 配置代码生成信息"></a>1-3 配置代码生成信息</h2><ul>
<li>点击 系统工具，点击 代码生成，点击 导入，点击 你想要的数据库表，点击 确定。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708202813444.png"
                      alt="image-20240708202813444"
                ></p>
<ul>
<li>点击 编辑。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708202923556.png"
                      alt="image-20240708202923556"
                ></p>
<ul>
<li>基本信息</li>
<li>实体类名称：默认是根据表名称生成的，可以修改。</li>
<li>作者：默认是ruoyi，可以修改。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708203032924.png"
                      alt="image-20240708203032924"
                ></p>
<ul>
<li>字段信息</li>
<li>字段描述：决定最终在页面上展示的效果。</li>
<li>java属性：默认与字段列名一样，只不过下划线的（create_time）变成其他样式（createTime）。</li>
<li>插入、编辑、列表、查询、查询方式、必填、显示类型：根据想要的自己配置。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708203733187.png"
                      alt="image-20240708203733187"
                ></p>
<ul>
<li><p>生成信息</p>
</li>
<li><p>生成包路径、生成模块名、生成业务名：根据想要的自己修改。</p>
</li>
<li><p>上级菜单：默认生成在 系统工具 下，也可以自己修改。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708204437129.png"
                      alt="image-20240708204437129"
                ></p>
<h2 id="1-4-下载代码并导入项目"><a href="#1-4-下载代码并导入项目" class="headerlink" title="1-4 下载代码并导入项目"></a>1-4 下载代码并导入项目</h2><ul>
<li>1、点击 生成代码。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708205033594.png"
                      alt="image-20240708205033594"
                ></p>
<ul>
<li>2、解压，里面有三部分：main、vue、sql。</li>
<li>3、导入sql。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708205601791.png"
                      alt="image-20240708205601791"
                ></p>
<ul>
<li><p>4、导入vue。</p>
</li>
<li><p>分为 api 和 views 两部分。</p>
</li>
<li><p>api 导入到 src \ api 中；views 导入到 src \ views 中。</p>
</li>
<li><p>5、导入main。</p>
</li>
<li><p>分为 java 和 resources 两部分。</p>
</li>
<li><p>java 导入到 ruoyi-admin \ src \ main \ java 中。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708211525297.png"
                      alt="image-20240708211525297"
                ></p>
<ul>
<li>resources .mapper 导入到 ruoyi-admin \ src \ main \ resources 中。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708211943558.png"
                      alt="image-20240708211943558"
                ></p>
<h1 id="2-功能详解"><a href="#2-功能详解" class="headerlink" title="2- 功能详解"></a>2- 功能详解</h1><h2 id="2-1-权限控制"><a href="#2-1-权限控制" class="headerlink" title="2-1 权限控制"></a>2-1 权限控制</h2><h3 id="2-1-1-RBAC"><a href="#2-1-1-RBAC" class="headerlink" title="2-1-1 RBAC"></a>2-1-1 RBAC</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708213749693.png"
                      alt="image-20240708213749693"
                ></p>
<h3 id="2-1-2-表关系"><a href="#2-1-2-表关系" class="headerlink" title="2-1-2 表关系"></a>2-1-2 表关系</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708214021407.png"
                      alt="image-20240708214021407"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240708214058966.png"
                      alt="image-20240708214058966"
                ></p>
<h3 id="2-1-3-菜单管理"><a href="#2-1-3-菜单管理" class="headerlink" title="2-1-3 菜单管理"></a>2-1-3 菜单管理</h3><ul>
<li>菜单分为：目录菜单、页面菜单、按钮菜单。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709070952141.png"
                      alt="image-20240709070952141"
                ></p>
<ul>
<li>目录菜单 匹配 主类目。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712094912300.png"
                      alt="image-20240712094912300"
                ></p>
<ul>
<li>页面菜单 匹配 目录菜单 或 主类目。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712095235714.png"
                      alt="image-20240712095235714"
                ></p>
<ul>
<li>按钮菜单 匹配  页面菜单。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-09%20071120.png"
                      alt="屏幕截图 2024-07-09 071120"
                ></p>
<h2 id="2-2-数据字典"><a href="#2-2-数据字典" class="headerlink" title="2-2 数据字典"></a>2-2 数据字典</h2><h3 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2-2-1 概念"></a>2-2-1 概念</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709073639071.png"
                      alt="image-20240709073639071"
                ></p>
<h3 id="2-2-2-表关系"><a href="#2-2-2-表关系" class="headerlink" title="2-2-2 表关系"></a>2-2-2 表关系</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709073534331.png"
                      alt="image-20240709073534331"
                ></p>
<h3 id="2-2-3-使用"><a href="#2-2-3-使用" class="headerlink" title="2-2-3 使用"></a>2-2-3 使用</h3><ul>
<li>添加 字典类型 和 字典数据</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709074207425.png"
                      alt="image-20240709074207425"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709074241216.png"
                      alt="image-20240709074241216"
                ></p>
<ul>
<li>修改代码生成信息</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709074513823.png"
                      alt="image-20240709074513823"
                ></p>
<ul>
<li><p>下载代码，导入</p>
</li>
<li><p>如果之前没有代码生成，则需要按上述 使用代码生成器 的第四步。</p>
</li>
<li><p>如果之前有代码生成，则只需要导入 vue \ views 中的 index.vue，先将对应的 vue 文件删掉，然后导入。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709082908972.png"
                      alt="image-20240709082908972"
                ></p>
<ul>
<li>修改数据库</li>
<li>如果修改后的字段有问题，则修改原数据库表中的该字段值。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709082848507.png"
                      alt="image-20240709082848507"
                ></p>
<h2 id="2-3-其他功能"><a href="#2-3-其他功能" class="headerlink" title="2-3 其他功能"></a>2-3 其他功能</h2><h3 id="2-3-1-参数设置"><a href="#2-3-1-参数设置" class="headerlink" title="2-3-1 参数设置"></a>2-3-1 参数设置</h3><ul>
<li>对系统中的参数进行动态维护。</li>
<li>通过修改参数键值，无需修改代码，直接刷新即可。动态使用。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709153631564.png"
                      alt="image-20240709153631564"
                ></p>
<h3 id="2-3-2-通知公告"><a href="#2-3-2-通知公告" class="headerlink" title="2-3-2 通知公告"></a>2-3-2 通知公告</h3><ul>
<li><p>促进组织内部信息传递。</p>
</li>
<li><p>若依提供了在本页面的通知公告的增删改查，而其他的形式需要开发者自己开发。</p>
</li>
</ul>
<h3 id="2-3-3-日志管理"><a href="#2-3-3-日志管理" class="headerlink" title="2-3-3 日志管理"></a>2-3-3 日志管理</h3><ul>
<li>轻松追踪用户行为和系统运行状况。</li>
</ul>
<h2 id="2-4-监控相关"><a href="#2-4-监控相关" class="headerlink" title="2-4 监控相关"></a>2-4 监控相关</h2><ul>
<li>若依提供了一些列强大的监控工具，能够帮助开发者和运维快速了解应用程序的性能状态。</li>
<li>包括：在线用户、数据监控（内置德鲁伊，账号：ruoyi、123456）、服务监控、缓存监控、缓存列表。</li>
</ul>
<h2 id="2-5-定时任务"><a href="#2-5-定时任务" class="headerlink" title="2-5 定时任务"></a>2-5 定时任务</h2><h3 id="2-5-1-作用"><a href="#2-5-1-作用" class="headerlink" title="2-5-1 作用"></a>2-5-1 作用</h3><ul>
<li>若依为定时任务功能提供方便友好的web界面，实现动态管理任务。</li>
</ul>
<h3 id="2-5-2-使用"><a href="#2-5-2-使用" class="headerlink" title="2-5-2 使用"></a>2-5-2 使用</h3><ul>
<li>在 ruoyi-quartz 包下的 task 包下创建任务。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710114025772.png"
                      alt="image-20240710114025772"
                ></p>
<ul>
<li>点击 系统监控，点击 定时任务，点击 新增。</li>
<li>调用方法： 模块名 .方法名。</li>
<li>执行策略：</li>
<li>有一个任务需求，每半个小时执行一次。当在8点服务器当机了，在9点15恢复了，此时的8点半、9点的任务没有执行。</li>
<li>立即执行 - 把之间的所有任务执行。</li>
<li>执行一次 - 只执行最近的一次。</li>
<li>放弃执行 - 把之间的所有任务不执行，使用最多。</li>
<li>是否并发：当是没有固定先后关系的，一般是允许并发的；如果有固定先后关系，则是禁止并发的。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710140056696.png"
                      alt="image-20240710140056696"
                ></p>
<ul>
<li>点击 cron表达式，设置时间表达式。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710140526678.png"
                      alt="image-20240710140526678"
                ></p>
<ul>
<li>点击状态，启用。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710143158539.png"
                      alt="image-20240710143158539"
                ></p>
<h2 id="2-6-表单结构"><a href="#2-6-表单结构" class="headerlink" title="2-6 表单结构"></a>2-6 表单结构</h2><h3 id="2-6-1-作用"><a href="#2-6-1-作用" class="headerlink" title="2-6-1 作用"></a>2-6-1 作用</h3><ul>
<li>表单构建工具，只需要开发者通过图形界面和拖拽等操作，可以快速构建复杂的表单。</li>
</ul>
<h3 id="2-6-2-使用"><a href="#2-6-2-使用" class="headerlink" title="2-6-2 使用"></a>2-6-2 使用</h3><ul>
<li>制作表单。</li>
<li>左侧是组件区域，先将布局型组件拖拽，再使用输入型组件或选择型组件。</li>
<li>右侧是对选中组件的设置，必须要改的是字段名、标题。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-10%20195050.png"
                      alt="屏幕截图 2024-07-10 195050"
                ></p>
<ul>
<li>导出并下载。</li>
<li>点击 导出vue文件，选择是 页面 或 弹窗，输入文件名。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710201035866.png"
                      alt="image-20240710201035866"
                ></p>
<ul>
<li>复制到前端工程。</li>
<li>找到自己想要的位置，复制过去。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710202842829.png"
                      alt="image-20240710202842829"
                ></p>
<ul>
<li><p>创建动态菜单。</p>
</li>
<li><p>点击 菜单管理，设置上级目录、菜单类型、路由地址、组件路径。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710203018232.png"
                      alt="image-20240710203018232"
                ></p>
<h2 id="2-7-代码生成"><a href="#2-7-代码生成" class="headerlink" title="2-7 代码生成"></a>2-7 代码生成</h2><h3 id="2-7-1-树表"><a href="#2-7-1-树表" class="headerlink" title="2-7-1 树表"></a>2-7-1 树表</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710204309895.png"
                      alt="image-20240710204309895"
                ></p>
<h3 id="2-7-2-主子表"><a href="#2-7-2-主子表" class="headerlink" title="2-7-2 主子表"></a>2-7-2 主子表</h3><ul>
<li>一对多。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710204501738.png"
                      alt="image-20240710204501738"
                ></p>
<h2 id="2-8-系统接口"><a href="#2-8-系统接口" class="headerlink" title="2-8 系统接口"></a>2-8 系统接口</h2><ul>
<li>Swagger，能够自动生成 API 的同步在线文档，并提供Web界面进行接口调用和测试。</li>
<li>若依的 token 值在 Admin-Token 中。</li>
<li>点击 Authorize ，输入 token 值，完成授权。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-10%20205220.png"
                      alt="屏幕截图 2024-07-10 205220"
                ></p>
<ul>
<li>找到想要的 api 接口，点击 完成接口的调用与测试。</li>
<li>注意接口中的 &#x2F;dev-api ，去掉它才能正确请求后端接口。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710205501666.png"
                      alt="image-20240710205501666"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710205745198.png"
                      alt="image-20240710205745198"
                ></p>
<h1 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3- 项目结构"></a>3- 项目结构</h1><h2 id="3-1-后端结构"><a href="#3-1-后端结构" class="headerlink" title="3-1 后端结构"></a>3-1 后端结构</h2><h3 id="3-1-1-admin"><a href="#3-1-1-admin" class="headerlink" title="3-1-1 admin"></a>3-1-1 admin</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710211404517.png"
                      alt="image-20240710211404517"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710215422345.png"
                      alt="image-20240710215422345"
                ></p>
<h3 id="3-1-2-common"><a href="#3-1-2-common" class="headerlink" title="3-1-2 common"></a>3-1-2 common</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710211601428.png"
                      alt="image-20240710211601428"
                ></p>
<h3 id="3-1-3-framework"><a href="#3-1-3-framework" class="headerlink" title="3-1-3 framework"></a>3-1-3 framework</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710213631662.png"
                      alt="image-20240710213631662"
                ></p>
<h3 id="3-1-4-system与其他"><a href="#3-1-4-system与其他" class="headerlink" title="3-1-4 system与其他"></a>3-1-4 system与其他</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710214750713.png"
                      alt="image-20240710214750713"
                ></p>
<h3 id="3-1-5-模块依赖关系"><a href="#3-1-5-模块依赖关系" class="headerlink" title="3-1-5 模块依赖关系"></a>3-1-5 模块依赖关系</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710215944691.png"
                      alt="image-20240710215944691"
                ></p>
<h2 id="3-2-前端结构"><a href="#3-2-前端结构" class="headerlink" title="3-2 前端结构"></a>3-2 前端结构</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710220432554.png"
                      alt="image-20240710220432554"
                ></p>
<h2 id="3-3-表结构"><a href="#3-3-表结构" class="headerlink" title="3-3 表结构"></a>3-3 表结构</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240710220839461.png"
                      alt="image-20240710220839461"
                ></p>
<h1 id="4-源码阅读"><a href="#4-源码阅读" class="headerlink" title="4- 源码阅读"></a>4- 源码阅读</h1><h2 id="4-1-前端代码分析"><a href="#4-1-前端代码分析" class="headerlink" title="4-1 前端代码分析"></a>4-1 前端代码分析</h2><ul>
<li>前端内容太多，只写了几个。</li>
<li>v-hasPermi &#x3D; “ [ ‘course:course:add’ ] “ ：若依自定义属性，用于权限控制。</li>
<li>@ keyup.enter &#x3D; “ handleQuery “ ：键盘回车事件，点击键盘回车，调用 handleQuery 方法。</li>
<li>@ selection-change &#x3D; “ handleSelectionChange “：监听复选框，调用 handleSelectionChange 方法。</li>
<li>&lt; el-table-column type &#x3D; “ selection “ width &#x3D; “ 55 “ align &#x3D; “ center “ &#x2F; &gt;：复选框。</li>
</ul>
<h2 id="4-2-后端代码分析"><a href="#4-2-后端代码分析" class="headerlink" title="4-2 后端代码分析"></a>4-2 后端代码分析</h2><ul>
<li><p>后端内容太多，只写了几个。</p>
</li>
<li><p>@PreAuthorize ( “@ss.hasPermi ( ‘course:course:add’ )” )：若依自定义属性，用于权限控制。</p>
</li>
<li><p>BaseController ：web层通用数据处理。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709145830321.png"
                      alt="image-20240709145830321"
                ></p>
<ul>
<li>TableDataInfo：表格分页数据对象。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709150959410.png"
                      alt="image-20240709150959410"
                ></p>
<ul>
<li>AjaxResult：操作消息提醒。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709151051003.png"
                      alt="image-20240709151051003"
                ></p>
<ul>
<li>BaseEntity ：Entity基类。</li>
<li>searchValue：全局检索。</li>
<li>params：前端多加了个参数，后端没有修改，可以用它接收。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709151232639.png"
                      alt="image-20240709151232639"
                ></p>
<h2 id="4-3-权限注解"><a href="#4-3-权限注解" class="headerlink" title="4-3 权限注解"></a>4-3 权限注解</h2><ul>
<li>注解</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709084430177.png"
                      alt="image-20240709084430177"
                ></p>
<ul>
<li>控制流程图</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240709085818488.png"
                      alt="image-20240709085818488"
                ></p>
<h1 id="5-二次开发"><a href="#5-二次开发" class="headerlink" title="5- 二次开发"></a>5- 二次开发</h1><h2 id="5-1-新建业务模块"><a href="#5-1-新建业务模块" class="headerlink" title="5-1 新建业务模块"></a>5-1 新建业务模块</h2><h3 id="5-1-1-若依框架修改器"><a href="#5-1-1-若依框架修改器" class="headerlink" title="5-1-1 若依框架修改器"></a>5-1-1 若依框架修改器</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711171905312.png"
                      alt="image-20240711171905312"
                ></p>
<h3 id="5-1-2-新建业务模块"><a href="#5-1-2-新建业务模块" class="headerlink" title="5-1-2 新建业务模块"></a>5-1-2 新建业务模块</h3><ul>
<li>新建子模块并引入核心依赖。</li>
<li>点击 项目，右击鼠标，点击 新建 -&gt; 新模块。</li>
<li>核心依赖在 sky-admin 的 pom.xml 中。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711172606344.png"
                      alt="image-20240711172606344"
                ></p>
<ul>
<li>父工程版本锁定。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711173123954.png"
                      alt="image-20240711173123954"
                ></p>
<ul>
<li>sky-admin 添加依赖。</li>
<li>在 sky-admin 的 pom.xml 中添加。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711173231869.png"
                      alt="image-20240711173231869"
                ></p>
<h2 id="5-2-菜品管理（主子表）"><a href="#5-2-菜品管理（主子表）" class="headerlink" title="5-2 菜品管理（主子表）"></a>5-2 菜品管理（主子表）</h2><h3 id="5-2-1-功能"><a href="#5-2-1-功能" class="headerlink" title="5-2-1 功能"></a>5-2-1 功能</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711174406926.png"
                      alt="image-20240711174406926"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711174429699.png"
                      alt="image-20240711174429699"
                ></p>
<h3 id="5-2-2-数据库表与主子表"><a href="#5-2-2-数据库表与主子表" class="headerlink" title="5-2-2 数据库表与主子表"></a>5-2-2 数据库表与主子表</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711174728640.png"
                      alt="image-20240711174728640"
                ></p>
<h3 id="5-2-3-配置并生成代码"><a href="#5-2-3-配置并生成代码" class="headerlink" title="5-2-3 配置并生成代码"></a>5-2-3 配置并生成代码</h3><ul>
<li>1、准备SQL并导入数据库。</li>
<li>2、点击 代码生成，点击 导入，导入两张表。</li>
<li>3、因为 售卖状态 是 下拉框，所以通过 字典管理 来配置。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711190634131.png"
                      alt="image-20240711190634131"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711190658071.png"
                      alt="image-20240711190658071"
                ></p>
<ul>
<li>4、根据页面配置代码生成信息。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711191926076.png"
                      alt="image-20240711191926076"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711192535578.png"
                      alt="image-20240711192535578"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711193259481.png"
                      alt="image-20240711193259481"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711193429389.png"
                      alt="image-20240711193429389"
                ></p>
<ul>
<li><p>5、下载代码。</p>
</li>
<li><p>6、导入sql。</p>
</li>
<li><p>7、导入vue。分为 api 和 views 两部分。api 导入到 src \ api 中；views 导入到 src \ views 中。</p>
</li>
<li><p>8、导入main。分为 java 和 resources 两部分。java 导入到 ruoyi-admin \ src \ main \ java 中；resources .mapper 导入到 ruoyi-admin \ src \ main \ resources 中。</p>
</li>
<li><p>9、重启后端。</p>
</li>
</ul>
<h3 id="5-2-4-修改菜单位置"><a href="#5-2-4-修改菜单位置" class="headerlink" title="5-2-4 修改菜单位置"></a>5-2-4 修改菜单位置</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711195312961.png"
                      alt="image-20240711195312961"
                ></p>
<h3 id="5-2-5-对前端代码微调"><a href="#5-2-5-对前端代码微调" class="headerlink" title="5-2-5 对前端代码微调"></a>5-2-5 对前端代码微调</h3><ul>
<li>主键id：注销前端代码。</li>
<li>售价</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711205916107.png"
                      alt="image-20240711205916107"
                ></p>
<ul>
<li>最后操作时间</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711210245638.png"
                      alt="image-20240711210245638"
                ></p>
<ul>
<li>图片回显</li>
<li>一般数据库中保存的是图片保存在云上的 url；而使用若依后，保存在数据库的是图片保存在本地的地址，默认D:&#x2F;ruoyi&#x2F;uploadPath。</li>
<li>因为回显的图片前面有 “ http: &#x2F;&#x2F;localhost &#x2F;dev-api “，所以显示不出来。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711211258908.png"
                      alt="image-20240711211258908"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711211909838.png"
                      alt="image-20240711211909838"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711211643638.png"
                      alt="image-20240711211643638"
                ></p>
<ul>
<li>口味</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711213906667.png"
                      alt="image-20240711213906667"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711213843946.png"
                      alt="image-20240711213843946"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711212835486.png"
                      alt="image-20240711212835486"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711214148886.png"
                      alt="image-20240711214148886"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\31518\AppData\Roaming\Typora\typora-user-images\image-20240711214353527.png"
                      alt="image-20240711214353527"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711214245838.png"
                      alt="image-20240711214245838"
                ></p>
<h2 id="5-3-页面调整"><a href="#5-3-页面调整" class="headerlink" title="5-3 页面调整"></a>5-3 页面调整</h2><h3 id="5-3-1-浏览器标签页icon、标题"><a href="#5-3-1-浏览器标签页icon、标题" class="headerlink" title="5-3-1 浏览器标签页icon、标题"></a>5-3-1 浏览器标签页icon、标题</h3><ul>
<li><p>将原本的 pubilc \ favicon.ico 修改，作废。</p>
</li>
<li><p>将标签页 icon 图片，保存在 pubilc \ favicon.ico 中。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711220815190.png"
                      alt="image-20240711220815190"
                ></p>
<ul>
<li>在 index.html 中，将 “若依管理系统” 修改为自己想要的。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240711221117211.png"
                      alt="image-20240711221117211"
                ></p>
<h3 id="5-3-2-系统页面中的logo、标题"><a href="#5-3-2-系统页面中的logo、标题" class="headerlink" title="5-3-2 系统页面中的logo、标题"></a>5-3-2 系统页面中的logo、标题</h3><ul>
<li>将原本的 src \ assets \ logo \ logo.png 修改，作废。</li>
<li>将系统页面 logo 图片，保存在 src \ assets \ logo \ logo.png 中。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712073118606.png"
                      alt="image-20240712073118606"
                ></p>
<ul>
<li>在 .env.development 中，将 “若依管理系统” 修改为自己想要的。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712072211214.png"
                      alt="image-20240712072211214"
                ></p>
<h3 id="5-3-3-去除头部导航"><a href="#5-3-3-去除头部导航" class="headerlink" title="5-3-3 去除头部导航"></a>5-3-3 去除头部导航</h3><ul>
<li>在 src \ layout \ components \ Navbar.vue 中，将头部的不需要组件注释掉。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712074948445.png"
                      alt="image-20240712074948445"
                ></p>
<h3 id="5-2-4-主题修改"><a href="#5-2-4-主题修改" class="headerlink" title="5-2-4 主题修改"></a>5-2-4 主题修改</h3><ul>
<li>点击 右上角图标，点击 布局设置，修改主题。</li>
<li>注意只在本地生效，其他设备登录访问看到是还是默认的。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712075551937.png"
                      alt="image-20240712075551937"
                ></p>
<h3 id="5-2-5-自定义图标"><a href="#5-2-5-自定义图标" class="headerlink" title="5-2-5 自定义图标"></a>5-2-5 自定义图标</h3><ul>
<li><p>一般的图标：点击 菜单管理，点击 修改，点击 菜单图标，进行配置。</p>
</li>
<li><p>自定义的图标：</p>
</li>
<li><p>登录 iconfont - 阿里巴巴矢量图标库。</p>
</li>
<li><p>搜索 图标，选择 颜色，使用 SVG下载。</p>
</li>
<li><p>然后保存在 src \ assets \ icons \ svg 中。</p>
</li>
<li><p>最后点击 菜单管理，点击 修改，点击 菜单图标，进行配置。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712085826645.png"
                      alt="image-20240712085826645"
                ></p>
<h3 id="5-2-6-登录页面中标题、背景图"><a href="#5-2-6-登录页面中标题、背景图" class="headerlink" title="5-2-6 登录页面中标题、背景图"></a>5-2-6 登录页面中标题、背景图</h3><ul>
<li>在 src \ views \ login.vue 中，将 “若依后台管理系统” 修改为自己想要的。</li>
<li>将原本的 src \ assets \ images \ login-background.jpg 修改，作废。</li>
<li>将想要的图片保存在 src \ assets \ images \ login-background.jpg 中。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712092132636.png"
                      alt="image-20240712092132636"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240712092253598.png"
                      alt="image-20240712092253598"
                ></p>
]]></content>
      <categories>
        <category>RuoYi</category>
        <category>RuoYi框架</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3速学</title>
    <url>/2024/03/14/Vue3%E9%80%9F%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="1-Vue3初体验"><a href="#1-Vue3初体验" class="headerlink" title="1- Vue3初体验"></a>1- Vue3初体验</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1-1 基本概念"></a>1-1 基本概念</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240314204538992.png"
                      alt="image-20240314204538992"
                ></li>
</ul>
<h2 id="1-2-初始化Vue3"><a href="#1-2-初始化Vue3" class="headerlink" title="1-2 初始化Vue3"></a>1-2 初始化Vue3</h2><p>create-vue 是 Vue 官方新的脚手架工具，底层切换到了 vite (下一代前端工具链)，为开发提供极速响应。</p>
<h3 id="1-2-1-前提环境条件"><a href="#1-2-1-前提环境条件" class="headerlink" title="1-2-1 前提环境条件"></a>1-2-1 前提环境条件</h3><p>已安装 16.0 或更高版本的 Node.js</p>
<p>安装命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-2-创建一个Vue应用"><a href="#1-2-2-创建一个Vue应用" class="headerlink" title="1-2-2 创建一个Vue应用"></a>1-2-2 创建一个Vue应用</h3><p>安装命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure></div>

<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240320102012167.png"
                      alt="image-20240320102012167"
                ></li>
</ul>
<p>安装项目</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 项目名字</span><br></pre></td></tr></table></figure></div>

<p>初始化项目</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></div>

<p>运行项目</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>

<h2 id="1-3-项目目录和关键文件"><a href="#1-3-项目目录和关键文件" class="headerlink" title="1-3 项目目录和关键文件"></a>1-3 项目目录和关键文件</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240320105436612.png"
                      alt="image-20240320105436612"
                ></li>
</ul>
<h2 id="1-4-Vue2与Vue3项目对比"><a href="#1-4-Vue2与Vue3项目对比" class="headerlink" title="1-4 Vue2与Vue3项目对比"></a>1-4 Vue2与Vue3项目对比</h2><p>vue2项目</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240314211045527.png"
                      alt="image-20240314211045527"
                ></li>
</ul>
<p>vue3项目</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240314211222562.png"
                      alt="image-20240314211222562"
                ></li>
</ul>
<h1 id="2-组合式API"><a href="#2-组合式API" class="headerlink" title="2- 组合式API"></a>2- 组合式API</h1><h2 id="2-1-setup"><a href="#2-1-setup" class="headerlink" title="2-1 setup"></a>2-1 setup</h2><p>生命周期：setup 在 beforeCreate 之前。</p>
<p>原生：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">    setup()&#123;</span><br><span class="line">        const name = &#x27;jack&#x27;</span><br><span class="line">        const showName = () =&gt; &#123;</span><br><span class="line">        	console.log(name)</span><br><span class="line">        &#125;</span><br><span class="line">        //必须return才可以</span><br><span class="line">        return&#123;</span><br><span class="line">            name,</span><br><span class="line">            showName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">    	console.log(&#x27;beforeCreate&#x27;)</span><br><span class="line">    &#125;   </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &#123;&#123; name &#125;&#125;</span><br><span class="line">		&lt;button @click = &quot;showName&quot;&gt;显示姓名&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<p>语法糖：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">	const name = &#x27;jack&#x27;</span><br><span class="line">    const showName = () =&gt; &#123;</span><br><span class="line">    	console.log(name)</span><br><span class="line">    &#125;     </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &#123;&#123; name &#125;&#125;</span><br><span class="line">		&lt;button @click = &quot;showName&quot;&gt;显示姓名&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-2-响应式对象函数"><a href="#2-2-响应式对象函数" class="headerlink" title="2-2 响应式对象函数"></a>2-2 响应式对象函数</h2><p>如果没有响应式对象函数，页面不会响应数据。</p>
<h3 id="2-2-1-reactive"><a href="#2-2-1-reactive" class="headerlink" title="2-2-1 reactive"></a>2-2-1 reactive</h3><p>参数只能是对象</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    //响应式对象</span><br><span class="line">	const state = reactive(&#123;</span><br><span class="line">		count : 0</span><br><span class="line">	&#125;)</span><br><span class="line">	const addCount = () =&gt; &#123;</span><br><span class="line">		state.count++</span><br><span class="line">		console.log(state.count) </span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;button @click = &quot;addCount&quot;&gt;&#123;&#123; state.count &#125;&#125;&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-2-ref"><a href="#2-2-2-ref" class="headerlink" title="2-2-2 ref"></a>2-2-2 ref</h3><p>参数允许是对象、简单类型、数组等</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">    //1-对象</span><br><span class="line">	const num1 = ref(&#123;</span><br><span class="line">		count : 0</span><br><span class="line">	&#125;)</span><br><span class="line">	const addNum1 = () =&gt; &#123;</span><br><span class="line">		num1.value.count++</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    //2-简单类型，数字、字符串、布尔</span><br><span class="line">    const num2 = ref(0)</span><br><span class="line">    const addNum2 = () =&gt; &#123;</span><br><span class="line">        num2.value++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //3-简单类型，数字、字符串、布尔</span><br><span class="line">    //页面 数组[1,2,3,4,5,6] 在两秒后 添加7 </span><br><span class="line">    const list = ref([1,2,3,4,5,6])</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">		list.value.push(7)</span><br><span class="line">    &#125;,2000)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;button @click = &quot;addNum1&quot;&gt;&#123;&#123; num1.count &#125;&#125;&lt;/button&gt;</span><br><span class="line">        &lt;button @click = &quot;addNum2&quot;&gt;&#123;&#123; num2 &#125;&#125;&lt;/button&gt;</span><br><span class="line">        &#123;&#123; list &#125;&#125;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-3-属性"><a href="#2-3-属性" class="headerlink" title="2-3 属性"></a>2-3 属性</h2><h3 id="2-3-1-computed"><a href="#2-3-1-computed" class="headerlink" title="2-3-1 computed"></a>2-3-1 computed</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed, ref &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">	const data = ref(&#123;</span><br><span class="line">		totalPrice : 2000,</span><br><span class="line">		amount : 10,</span><br><span class="line">		discount : 8</span><br><span class="line">	&#125;)</span><br><span class="line">    </span><br><span class="line">    //原</span><br><span class="line">	const avgPrice = computed(() =&gt; &#123;</span><br><span class="line">		return (data.valve.totalPrice / data.value.amount) * (data.value.discount / 10);</span><br><span class="line">	&#125;)</span><br><span class="line">    </span><br><span class="line">    //get、set</span><br><span class="line">	const avgPrice = computed(&#123;</span><br><span class="line">        get()&#123;</span><br><span class="line">            console.log(&quot;调用计算属性avgPrice中Get函数&quot;)</span><br><span class="line">            return (data.valve.totalPrice / data.value.amount) * (data.value.discount / 10);</span><br><span class="line">        &#125;,</span><br><span class="line">        set(value)&#123;</span><br><span class="line">            console.log(&quot;调用计算属性avgPrice中Set函数&quot;)</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)   </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		总价:&lt;input type=&quot;text&quot; v-model=&quot;data.totalPrice&quot;&gt; &lt;br/&gt;</span><br><span class="line">		数量:&lt;input type=&quot;text&quot; v-model=&quot;data.amount&quot;&gt; &lt;br/&gt;</span><br><span class="line">		折扣:&lt;input type=&quot;text&quot; v-model=&quot;data.discount&quot;&gt;折&lt;br/&gt;</span><br><span class="line">		折扣平均单价:&lt;input type=&quot;text&quot; v-model=&quot;avgPrice&quot;&gt;元&lt;br/&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-2-watch"><a href="#2-3-2-watch" class="headerlink" title="2-3-2 watch"></a>2-3-2 watch</h3><p>简单类型侦听与多值侦听</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed, ref &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">    let happy = ref(true)</span><br><span class="line">    let name = ref(&#x27;jack&#x27;)</span><br><span class="line"></span><br><span class="line">    const mood = computed(() =&gt; &#123;</span><br><span class="line">    	return happy.value ? &quot;高兴&quot; : &quot;难过&quot; ;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    const changeMood = () =&gt; &#123;</span><br><span class="line">    	happy.value = !happy.value;</span><br><span class="line">        name.value = happy.value ? &#x27;jack&#x27; : &#x27;tom&#x27; ;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    watch([happy,name], ([newHappy,newName], [oldHappy,oldName]) =&gt; &#123;</span><br><span class="line">        console.log(&#x27;happy发生了变化，老值为 $&#123;oldHappy&#125;,$&#123;oldName&#125;,新值为 $&#123;newHappy&#125;,$&#123;newName&#125;&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">	watch(happy, (newValue,oldValue) =&gt; &#123;</span><br><span class="line">		console.log(&#x27;happy发生了变化,老值为 $&#123;oldValue&#125;,新值为 $&#123;newValue&#125;&#x27;)</span><br><span class="line">	&#125;)</span><br><span class="line">    watch(happy,(value) =&gt; &#123;</span><br><span class="line">		console.log(&#x27;happy发生了变化，新值为 $&#123;value&#125;&#x27;)</span><br><span class="line">    &#125;)    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h2&gt;我是&#123;&#123; name &#125;&#125;,今天我很&#123;&#123; mood &#125;&#125;&lt;/h2&gt;</span><br><span class="line">		&lt;button @click = &quot;changeMood&quot;&gt;改变心情和姓名&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<p>对象类型侦听与精确侦听</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed, ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">	const data = ref(&#123;</span><br><span class="line">		happy : true,</span><br><span class="line">		name : &quot;Jack&quot;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">	const mood = computed(() =&gt; &#123;</span><br><span class="line">		return data.value.happy ? &quot;高兴&quot; : &quot;难过&quot; ;</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	const changeMood = () =&gt; &#123;</span><br><span class="line">    	data.value.happy = !data.value.happy ;  </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	const changeName = () =&gt; &#123;</span><br><span class="line">    	data.value.name = data.value.happy ? &quot;Jack&quot; : &quot;Tom&quot; ;  </span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    //对象类型侦听,&#123;deep:true,immediate:true&#125;</span><br><span class="line">    watch(data, (value) =&gt; &#123;</span><br><span class="line">		console.log(&#x27;happy发生了变化，值为 $&#123;value.happy&#125;&#x27;)</span><br><span class="line">        console.log(&#x27;name发生了变化，值为 $&#123;valve.name&#125;&#x27;)</span><br><span class="line">    &#125;,&#123;deep:true,immediate:true&#125;)</span><br><span class="line"></span><br><span class="line">    //精确侦听</span><br><span class="line">    watch(() =&gt; data.value.happy, (newValue,oldValue) =&gt; &#123;</span><br><span class="line">        console.log(&#x27;happy发生了变化，老值为 $&#123;oldValue&#125;,新值为 $&#123;newValue&#125;&#x27;) </span><br><span class="line">    &#125;) </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h2&gt;我是&#123;&#123; data.name &#125;&#125;,今天我很&#123;&#123; mood &#125;&#125;&lt;/h2&gt;</span><br><span class="line">		&lt;button @click = &quot;changeMood&quot;&gt;改变心情&lt;/button&gt;</span><br><span class="line">		&lt;button @click = &quot;changeName&quot;&gt;改变姓名&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-4-生命周期函数"><a href="#2-4-生命周期函数" class="headerlink" title="2-4 生命周期函数"></a>2-4 生命周期函数</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240315191430340.png"
                      alt="image-20240315191430340"
                ></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onBeforeMount, onMounted &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">    onBeforeMount(() =&gt; &#123;</span><br><span class="line">    	console.log(&quot;执行beforeMount生命周期函数&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">    	console.log(&quot;执行挂载逻辑onMounted()-1&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">    	console.log(&quot;执行挂载逻辑onMounted()-2&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-5-组件数据通信"><a href="#2-5-组件数据通信" class="headerlink" title="2-5 组件数据通信"></a>2-5 组件数据通信</h2><h3 id="2-5-1-父传子组件"><a href="#2-5-1-父传子组件" class="headerlink" title="2-5-1 父传子组件"></a>2-5-1 父传子组件</h3><p>基本思想：</p>
<ul>
<li><p>1.父组件中给子组件绑定属性</p>
</li>
<li><p>2.子组件内部通过props选项接收</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Shool.Vue 子组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	//2.通过 defineProps &quot;编译器宏&quot; 接收父组件传递的数据</span><br><span class="line">	const props = defineProps(&#123;</span><br><span class="line">		teacherName : String,</span><br><span class="line">		salary : Number,</span><br><span class="line">		age : Number</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;school-style&quot;&gt;</span><br><span class="line">        &lt;!-- 对于props传递过来的数据，模板中可以直接使用 --&gt;</span><br><span class="line">		&lt;h3&gt;子组件-School&lt;/h3&gt;</span><br><span class="line">		&lt;h3&gt;父组件App参数[teacherName]:&#123;&#123; teacherName &#125;&#125;&lt;/h3&gt;</span><br><span class="line">		&lt;h3&gt;父组件App参数[salary]:&#123;&#123; salary+1000 &#125;&#125;&lt;/h3&gt;</span><br><span class="line">		&lt;h3&gt;父组件App参数[age]:&#123;&#123; age &#125;&#125;&lt;/h3&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.school-style &#123;</span><br><span class="line">		background-color: #5bc0de;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;    </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//App.Vue 父组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">//引入子组件</span><br><span class="line">//局部组件(导入进来就能用)</span><br><span class="line">import School from &quot;./components/School.vue&quot;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">    //动态绑定</span><br><span class="line">	const age = ref(20)</span><br><span class="line">    //2秒后,age变为30</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">    	age.value = 30;</span><br><span class="line">    &#125;,2000)  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h2&gt;父组件-App&lt;/h2&gt;</span><br><span class="line">        &lt;!-- 1.绑定属性 --&gt;</span><br><span class="line">		&lt;School teacherName = &quot;李四&quot; :salary = &quot;5000&quot; :age = &quot;age&quot;&gt;&lt;/School&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-5-2-子传父组件"><a href="#2-5-2-子传父组件" class="headerlink" title="2-5-2 子传父组件"></a>2-5-2 子传父组件</h3><p>基本思想：</p>
<ul>
<li>1.父组件中给子组件标签通过@绑定事件</li>
<li>2.子组件内部通过 emit 方法触发事件</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Shool.Vue 子组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    //2.通过 defineEmits &quot;编译器宏&quot; 生成emit方法</span><br><span class="line">	const emit = defineEmits([&#x27;funGetAddress&#x27;])</span><br><span class="line">    </span><br><span class="line">    //3.触发自定义事件 并传递参数</span><br><span class="line">	const sendAddress = () =&gt; &#123;</span><br><span class="line">		emit(&#x27;funGetAddress&#x27;,&#x27;浙江大学软件学院&#x27;)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;school-style&quot;&gt;</span><br><span class="line">		&lt;h3&gt;子组件-School&lt;/h3&gt;</span><br><span class="line">		&lt;button @click = &quot;sendAddress&quot;&gt;使用$emit:向父组件发送学校地址&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.school-style &#123;</span><br><span class="line">		background-color: #5bc0de;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;  </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//App.Vue 父组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">//引入子组件</span><br><span class="line">//局部组件(导入进来就能用)    </span><br><span class="line">import School from &quot;./components/School.vue&quot;;   </span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">	</span><br><span class="line">	const myAddress = ref(&#x27;&#x27;)</span><br><span class="line">	const getAddress = (address) =&gt; &#123;</span><br><span class="line">		myAddress.value = address</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h2&gt;父组件-App&lt;/h2&gt;</span><br><span class="line">		&lt;h2&gt;学校地址:&#123;&#123; myAddress &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;!-- 1.绑定自定义事件 --&gt;</span><br><span class="line">		&lt;School @funGetAddress = &quot;getAddress&quot;&gt;&lt;/School&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;e</span><br></pre></td></tr></table></figure></div>

<h2 id="2-6-模板引用-ref"><a href="#2-6-模板引用-ref" class="headerlink" title="2-6 模板引用-ref"></a>2-6 模板引用-ref</h2><p>基本思想：</p>
<ul>
<li>1.调用ref函数，生成一个ref对象</li>
<li>2.通过ref标识，绑定ref对象到标签</li>
<li>3.通过ref对象.value，即可访问到绑定的元素</li>
<li>4.获取模板引用的时机 – 组件挂载完毕</li>
</ul>
<h3 id="2-6-defineExpose"><a href="#2-6-defineExpose" class="headerlink" title="2-6 defineExpose( )"></a>2-6 defineExpose( )</h3><p>默认情况下在&lt; script setup &gt;语法糖下组件内部的属性和方法是不开放给父组件访问的。</p>
<p>可以通过 defineExpose 编译器宏 指定哪些属性和方法允许访问。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Shool.Vue 子组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">	const address = ref(&#x27;浙江大学软件学院&#x27;)</span><br><span class="line">	const loadData = (data) =&gt; &#123;</span><br><span class="line">		console.log(data);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    //暴露属性和方法允许访问</span><br><span class="line">	defineExpose(&#123;</span><br><span class="line">		address,</span><br><span class="line">		loadData</span><br><span class="line">	&#125;)	</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;school-style&quot;&gt;</span><br><span class="line">		&lt;h3&gt;子组件-School&lt;/h3&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.school-style &#123;</span><br><span class="line">		background-color: #5bc0de;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt; </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//App.Vue 父组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &quot;vue&quot;</span><br><span class="line">	</span><br><span class="line">	const school = ref(null)</span><br><span class="line">	const sendLoadData = () =&gt; &#123;</span><br><span class="line">		school.value.loadData(&#123;id:1, name:&#x27;jack&#x27;&#125;)</span><br><span class="line">	&#125; </span><br><span class="line">    </span><br><span class="line">	onMounted(() =&gt; &#123;</span><br><span class="line">		console.log(school.value.address)</span><br><span class="line">	&#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h2&gt;父组件-App&lt;/h2&gt;</span><br><span class="line">		&lt;h2&gt;学校地址:&#123;&#123; school &#125;&#125;&lt;/h2&gt;</span><br><span class="line">		&lt;button @click = &quot;sendLoadData&quot;&gt;向子组件传递数据&lt;/button&gt;</span><br><span class="line">		&lt;School ref=&quot;school&quot;&gt;&lt;/School&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-7-provide与inject"><a href="#2-7-provide与inject" class="headerlink" title="2-7 provide与inject"></a>2-7 provide与inject</h2><p>作用和场景：</p>
<ul>
<li>顶层组件向任意的底层组件传递数据和方法，实现跨层组件通信</li>
<li>顶层组件通过 provide 函数提供数据</li>
<li>底层组件通过 inject 函数获取数据</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//App.Vue 父组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import School from &quot;./components/School.vue&quot;</span><br><span class="line"></span><br><span class="line">    //1.跨层传递普通数据</span><br><span class="line">	provide(&#x27;studentName&#x27;,&#x27;jack&#x27;)</span><br><span class="line">    </span><br><span class="line">    //2.跨层传递响应式数据</span><br><span class="line">    const age = ref(20)</span><br><span class="line">    provide(&#x27;studentAge&#x27;,age)</span><br><span class="line">	setTimeout(() =&gt; &#123; </span><br><span class="line">        count.value = 30</span><br><span class="line">    &#125;,2000)</span><br><span class="line">    </span><br><span class="line">    //3.跨层传递函数 =&gt; 给子孙后代传递可以修改数据的</span><br><span class="line">	provide(&#x27;changeAge&#x27;,(newAge) =&gt; &#123;</span><br><span class="line">    	age.value = newAge</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;h1&gt;父组件-App&lt;/h1&gt;</span><br><span class="line">	&lt;School&gt;&lt;/school&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Shool.Vue 子组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import student from &quot;./Student.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;school-style&quot;&gt;</span><br><span class="line">		&lt;h3&gt;子组件-School&lt;/h3&gt;</span><br><span class="line">		&lt;Student&gt;&lt;/student&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.school-style &#123;</span><br><span class="line">		background-color: #5bcode;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Student.Vue 孙组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">	const studentName = inject(&#x27;studentName&#x27;)</span><br><span class="line">	const studentAge = inject(&#x27;studentAge&#x27;)</span><br><span class="line">    const changeAge = inject(&#x27;changeAge&#x27;)</span><br><span class="line">    const clickFn = ()=&gt;&#123;</span><br><span class="line">        changeAge(50)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;student-style&quot;&gt;</span><br><span class="line">		&lt;h2&gt;学生姓名:&#123;&#123; studentName &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄:&#123;&#123; studentAge &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click = &quot;clickFn&quot;&gt;更新studentAge&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.student-style &#123;</span><br><span class="line">		background-color: pink;</span><br><span class="line">		margin:20px;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="3-快速对比案例"><a href="#3-快速对比案例" class="headerlink" title="3- 快速对比案例"></a>3- 快速对比案例</h1><h2 id="3-1-用户列表改造"><a href="#3-1-用户列表改造" class="headerlink" title="3-1 用户列表改造"></a>3-1 用户列表改造</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Vue2</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            users:[]</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">		async getList()&#123;</span><br><span class="line">			const res = await axios.get(&quot;/users&quot;);</span><br><span class="line">			this.users = res.data.data;</span><br><span class="line">			console.log(this.users);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	mounted()&#123;</span><br><span class="line">		this.getList();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;template v-slot=&quot;scope&quot;&gt;</span><br><span class="line">    	&lt;el-button type=&quot;primary&quot; size=&quot;small&quot; href=&quot;#&quot; @click = &quot;updateById(scope.row.id)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; @click = &quot;deleteById(scope.row.id)&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">	&lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Vue3</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line">	</span><br><span class="line">	const users = ref([])</span><br><span class="line">    </span><br><span class="line">	const getList = async () =&gt; &#123;</span><br><span class="line">		const res = await axios.get(&quot;/users&quot;);</span><br><span class="line">		users.value = res.data.data;</span><br><span class="line">		console.log(users.value);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	onmounted(() =&gt;</span><br><span class="line">    	getList()</span><br><span class="line">    )  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;template #default=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">    	&lt;el-button type=&quot;primary&quot; size=&quot;small&quot; href=&quot;#&quot; @click = &quot;updateById(row.id)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; @click = &quot;deleteById(row.id)&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">	&lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-2-用户删除改造"><a href="#3-2-用户删除改造" class="headerlink" title="3-2 用户删除改造"></a>3-2 用户删除改造</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Vue2</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;	</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            users:[]</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">        async delUser(id)&#123;</span><br><span class="line">			this.$confirm(&quot;此操作将删除该同学信息与成绩, 是否继续?&quot;,&quot;提示&quot;, &#123;</span><br><span class="line">            	confirmButtonText:&#x27;确定&#x27;,</span><br><span class="line">				cancelButtonText:&#x27;取消&#x27;,</span><br><span class="line">            	type: &#x27;warning&#x27;</span><br><span class="line">            &#125;).then( async() =&gt; &#123;</span><br><span class="line">                await axios.delete(&#x27;/users/$&#123;id&#125;&#x27;);</span><br><span class="line">                this.getList();</span><br><span class="line">                this.$message(&#123;</span><br><span class="line">					type:&#x27;success&#x27;,</span><br><span class="line">					message:&#x27;删除成功!&#x27;</span><br><span class="line">                &#125;);</span><br><span class="line">			&#125;).catch(() =&gt; &#123;</span><br><span class="line">                this.$message(&#123;</span><br><span class="line">					type: &#x27;info&#x27;,</span><br><span class="line">					message:&#x27;已取消删除&#x27;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">		this.getList();</span><br><span class="line">	&#125;    </span><br><span class="line">&#125;   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Vue3</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line">	</span><br><span class="line">	const users = ref([])</span><br><span class="line"></span><br><span class="line">	const delUser = (id) =&gt; &#123;</span><br><span class="line">		ElMessageBox.confirm(</span><br><span class="line">			&#x27;此操作将永久删除用户数据，是否继续?&#x27;,</span><br><span class="line">			&#x27;提示&#x27;,</span><br><span class="line">            &#123;</span><br><span class="line">                confirmButtonText:&#x27;确定&#x27;,</span><br><span class="line">                cancelButtonText:&#x27;取消&#x27;,</span><br><span class="line">                type: &#x27;warning&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        ).then( async() =&gt; &#123;</span><br><span class="line">            await axios.delete(&#x27;/users/$&#123;id&#125;&#x27;);</span><br><span class="line">            await getList();</span><br><span class="line">            ElMessage(&#123;</span><br><span class="line">                type:&#x27;success&#x27;,</span><br><span class="line">                message: &#x27;删除成功!&#x27;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).catch(() =&gt; &#123;</span><br><span class="line">			ElMessage(&#123;</span><br><span class="line">                type:&#x27;info&#x27;,</span><br><span class="line">                message:&#x27;已取消删除&#x27;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)          </span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	onmounted(() =&gt;</span><br><span class="line">    	getList()</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-3-用户修改改造"><a href="#3-3-用户修改改造" class="headerlink" title="3-3 用户修改改造"></a>3-3 用户修改改造</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Vue2</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;	</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">           dialogVisible:false,</span><br><span class="line">           sexList:[&#123;value:0,label:&#x27;男&#x27;&#125;,&#123;value:1,label:&#x27;女&#x27;&#125;],</span><br><span class="line">           form:&#123;</span><br><span class="line">				id:&#x27;&#x27;,</span><br><span class="line">                img:&#x27;&#x27;,</span><br><span class="line">				name:&#x27;&#x27;,</span><br><span class="line">				sex:&#x27;&#x27;,</span><br><span class="line">				birthday:&#x27;&#x27;,</span><br><span class="line">				role:&#x27;&#x27;,</span><br><span class="line">				address:&#x27;&#x27;</span><br><span class="line">           &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">		open(row)&#123;</span><br><span class="line">			this.dialogvisible = true;</span><br><span class="line">            this.form.id = row.id;</span><br><span class="line">            this.form.img = row.img;</span><br><span class="line">            this.form.name = row.name;</span><br><span class="line">            this.form.sex = row.sex;</span><br><span class="line">            this.form.birthday = row.birthday;</span><br><span class="line">            this.form.role = row.role;</span><br><span class="line">            this.form.address =row.address;</span><br><span class="line">        &#125;,</span><br><span class="line">        async onupdate()&#123;</span><br><span class="line">            await axios.put(&quot;/users&quot;,this.form);</span><br><span class="line">            this.dialogVisible = false;</span><br><span class="line">            this.$emit(&quot;refresh&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">		this.getList();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;el-dialog :visible.sync = &quot;dialogVisible&quot; title = &quot;编辑&quot; width = &quot;500px&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Vue3</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line">    </span><br><span class="line">    const dialogVisible = ref(flase)</span><br><span class="line">    const sexList = ref([&#123;value:0,label:&#x27;男&#x27;&#125;,&#123;value:1,label:&#x27;女&#x27;&#125;])</span><br><span class="line">    const form = ref(&#123;</span><br><span class="line">        id:&#x27;&#x27;,</span><br><span class="line">        img:&#x27;&#x27;,</span><br><span class="line">		name:&#x27;&#x27;,</span><br><span class="line">		sex:&#x27;&#x27;,</span><br><span class="line">		birthday:&#x27;&#x27;,</span><br><span class="line">		role:&#x27;&#x27;,</span><br><span class="line">		address:&#x27;&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    const open = (row) =&gt; &#123;</span><br><span class="line">        dialogvisible.value = true;</span><br><span class="line">        form.value.id = row.id;</span><br><span class="line">        form.value.img = row.img;</span><br><span class="line">        form.value.name = row.name;</span><br><span class="line">        form.value.sex = row.sex;</span><br><span class="line">        form.value.birthday = row.birthday;</span><br><span class="line">        form.value.role = row.role;</span><br><span class="line">        form.value.address = row.address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const emit = defineEmits([&#x27;refresh&#x27;])</span><br><span class="line">    const onUpdate = async() =&gt; &#123;</span><br><span class="line">        await axios.put(&quot;/users&quot;,form.value)</span><br><span class="line">        dialogVisible.value = false;</span><br><span class="line">        emit(&quot;refresh&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    defineExpose(&#123;</span><br><span class="line">        open</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt; </span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;el-dialog v-model = &quot;dialogVisible&quot; title = &quot;编辑&quot; width = &quot;500px&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="4-Vue3新特性"><a href="#4-Vue3新特性" class="headerlink" title="4- Vue3新特性"></a>4- Vue3新特性</h1><h2 id="4-1-defineOptions"><a href="#4-1-defineOptions" class="headerlink" title="4-1 defineOptions"></a>4-1 defineOptions</h2><p>介绍：</p>
<ul>
<li>在 Vue 3.3 中新引入了 defineOptions 宏。顾名思义，主要是用来定义 Options API的选项。可以用defineOptions 定义任意的选项，props，emits，expose，slots 除外（因为这些可以使用 defineXXX 来做到）。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    //之前，还必须再定义一遍&lt;script&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">    	name: &quot;LoginIndex&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    //之后</span><br><span class="line">	defineOptions(&#123;</span><br><span class="line">		name: &quot;LoginIndex&quot;,</span><br><span class="line">		inheritAttrs: false,</span><br><span class="line">		//...更多自定义属性</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-2-defineModel"><a href="#4-2-defineModel" class="headerlink" title="4-2 defineModel"></a>4-2 defineModel</h2><p>介绍：</p>
<ul>
<li><p>是试验性质的方法，是父子间的方法</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240321180926093.png"
                      alt="image-20240321180926093"
                ></p>
</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启,在vite.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line">	<span class="title function_">vue</span>(&#123;</span><br><span class="line">		<span class="attr">script</span>:&#123;</span><br><span class="line">			<span class="attr">defineModel</span>:<span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;),</span><br><span class="line">], </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//子组件</span><br><span class="line"></span><br><span class="line">//之前</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	defineProps(&#123;</span><br><span class="line">		modelValue: String</span><br><span class="line">	&#125;)</span><br><span class="line">	const emit = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;temple&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;input</span><br><span class="line">			type=&quot;text&quot;</span><br><span class="line">			:value=&quot;modelValue&quot;</span><br><span class="line">			@input=&quot;e =&gt; emit(&#x27;update:modelValue&#x27;, e.target.value)&quot;</span><br><span class="line">		&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/temple&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//之后</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineModel &#125; from &#x27;vue&#x27;</span><br><span class="line">    </span><br><span class="line">	const modelValue = defineModel()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;temple&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;input</span><br><span class="line">			type=&quot;text&quot;</span><br><span class="line">			:value=&quot;modelValue&quot;</span><br><span class="line">			@input=&quot;e =&gt; modelValue = e.target.value&quot;</span><br><span class="line">		&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/temple&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import MyInput from &#x27;@/components/my-input.vue</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">	</span><br><span class="line">	const txt = ref(&#x27;123456&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;MyInput v-model=&quot;txt&quot;&gt;&lt;/MyInput&gt;</span><br><span class="line">		&#123;&#123; txt &#125;&#125;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="5-Pinia"><a href="#5-Pinia" class="headerlink" title="5- Pinia"></a>5- Pinia</h1><h2 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5-1 介绍"></a>5-1 介绍</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240321184212035.png"
                      alt="image-20240321184212035"
                ></li>
</ul>
<h2 id="5-2-添加Pinia"><a href="#5-2-添加Pinia" class="headerlink" title="5-2 添加Pinia"></a>5-2 添加Pinia</h2><p>1.使用 Vite 创建一个空的 Vue3 项目</p>
<ul>
<li>npm create vue@latest</li>
</ul>
<p>2.在创建时直接添加Pinia</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240322094512864.png"
                      alt="image-20240322094512864"
                ></li>
</ul>
<p>2.按照官方文档 安装 Pinia 到项目中</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240321202703333.png"
                      alt="image-20240321202703333"
                ></li>
</ul>
<h2 id="5-3-Pinia的基本语法"><a href="#5-3-Pinia的基本语法" class="headerlink" title="5-3 Pinia的基本语法"></a>5-3 Pinia的基本语法</h2><h3 id="5-3-1-基础语法介绍"><a href="#5-3-1-基础语法介绍" class="headerlink" title="5-3-1 基础语法介绍"></a>5-3-1 基础语法介绍</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ref() 就是 state 属性</span></span><br><span class="line"><span class="comment">//computed() 就是 getters</span></span><br><span class="line"><span class="comment">//function() 就是 actions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>,<span class="function">()	=&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">		count.<span class="property">value</span>++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>&#123; </span><br><span class="line">        count,</span><br><span class="line">        increment </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="5-3-2-基础使用–计数器案例"><a href="#5-3-2-基础使用–计数器案例" class="headerlink" title="5-3-2 基础使用–计数器案例"></a>5-3-2 基础使用–计数器案例</h3><p>1.在 src 创建一个 store 文件夹，在里面创建仓库 counter.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义store</span></span><br><span class="line"><span class="comment">//defineStore (仓库的唯一标识,() =&gt; &#123; ... &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//声明数据 state - count </span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//声明操作数据的方法 action (普通函数)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>++</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">subCount</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>--</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//声明基于数据派生的计算属性 getters (computed)</span></span><br><span class="line">    <span class="keyword">const</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span> )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//声明数据 state - msg</span></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;hello pinia&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count,</span><br><span class="line">        msg,</span><br><span class="line">        addCount,</span><br><span class="line">        subCount,</span><br><span class="line">        double</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>2.实体Vue</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Son1Com from &#x27;@/components/SonCom.vue&#x27;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/store/counte&#x27;</span><br><span class="line">    </span><br><span class="line">    const counterStore = useCounterStore()    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h3&gt;App.vue根组件 - &#123;&#123; counterStore.count &#125;&#125; - &#123;&#123; counterStore.msg &#125;&#125;&lt;/h3&gt;</span><br><span class="line">		&lt;SonCom&gt;&lt;/SonCom&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//子组件</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/store/counte&#x27;</span><br><span class="line">    </span><br><span class="line">    const counterStore = useCounterStore()  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		我是Son1.vue - &#123;&#123; counterStore.count &#125;&#125; - &#123;&#123; counterStore.double &#125;&#125;</span><br><span class="line">        &lt;button @click = &quot;counterStore.addCount&quot;&gt;+&lt;/button&gt;</span><br><span class="line">        我是Son2.vue - &#123;&#123; counterStore.count &#125;&#125;</span><br><span class="line">        &lt;button @click = &quot;counterStore.subCount&quot;&gt;-&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-4-action异步实现"><a href="#5-4-action异步实现" class="headerlink" title="5-4 action异步实现"></a>5-4 action异步实现</h2><p>介绍：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240322103147175.png"
                      alt="image-20240322103147175"
                ></li>
</ul>
<p>实现：</p>
<p>1.在 src 创建一个 store 文件夹，在里面创建仓库 channel.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useChannelStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;channel&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//声明数据</span></span><br><span class="line">    <span class="keyword">const</span> channelList = <span class="title function_">ref</span>([])</span><br><span class="line"></span><br><span class="line">	<span class="comment">//声明操作数据的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">		<span class="comment">//支持异步</span></span><br><span class="line">		<span class="keyword">const</span> &#123; <span class="attr">data</span>:&#123; data &#125;&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span>)</span><br><span class="line">        channelList.<span class="property">value</span> = data.<span class="property">channels</span></span><br><span class="line">		<span class="variable language_">console</span>.1og(data.<span class="property">channels</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//声明getters相关</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">       	channelList,</span><br><span class="line">       	getList </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>2.实体Vue</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useChannelStore &#125; from &#x27;@/store/channel&#x27;</span><br><span class="line">    </span><br><span class="line">    const channelStore = useChannelStore()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;button @click = &quot;channelStore.getList&quot;&gt;获取频道数据&lt;/button&gt;</span><br><span class="line">       	&lt;ul&gt;</span><br><span class="line">            &lt;li v-for = &quot;item in channelStore.channelList&quot; :key = &quot;item.id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">    	&lt;/ul&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-5-storeToRefs方法"><a href="#5-5-storeToRefs方法" class="headerlink" title="5-5 storeToRefs方法"></a>5-5 storeToRefs方法</h2><p>不使用方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/store/counte&#x27;</span><br><span class="line">    </span><br><span class="line">    const counterStore = useCounterStore()  </span><br><span class="line">    </span><br><span class="line">    //1.此时，直接解构，不处理，数据会丢失响应式</span><br><span class="line">    const &#123; count, msg &#125; = counterStore</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &lt;!-- 2.数据直接调用 --&gt;</span><br><span class="line">		&lt;h3&gt;App.vue根组件 - &#123;&#123; count &#125;&#125; - &#123;&#123; msg &#125;&#125;&lt;/h3&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<p>使用方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/store/counte&#x27;</span><br><span class="line">import &#123; useChannelStore &#125; from &#x27;@/store/channel&#x27;</span><br><span class="line">    </span><br><span class="line">    const counterStore = useCounterStore() </span><br><span class="line">    const channelStore = useChannelStore()</span><br><span class="line">    </span><br><span class="line">    //是响应式的ref</span><br><span class="line">    //同时通过插件添加的属性也会被提取为ref</span><br><span class="line">    //并且会跳过所有的 action 或 非响应式(不是 ref 或 reactive ) 的属性</span><br><span class="line">    const &#123; count, msg &#125; = storeToRefs (counterStore)</span><br><span class="line">    const &#123; channelList &#125; = storeToRefs (channelStore)</span><br><span class="line">    //作为 action 可以直接解构</span><br><span class="line">    const &#123; getList &#125; = channelStore</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &lt;!-- 数据直接调用 --&gt;</span><br><span class="line">		&lt;h3&gt;App.vue根组件 - &#123;&#123; count &#125;&#125; - &#123;&#123; msg &#125;&#125;&lt;/h3&gt;</span><br><span class="line">		&lt;button @click = &quot;getList&quot;&gt;获取频道数据&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for = &quot;item in channelList&quot; :key = &quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    	&lt;/ul&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-6-Pinia持久化"><a href="#5-6-Pinia持久化" class="headerlink" title="5-6 Pinia持久化"></a>5-6 Pinia持久化</h2><h3 id="5-6-1-基础使用"><a href="#5-6-1-基础使用" class="headerlink" title="5-6-1 基础使用"></a>5-6-1 基础使用</h3><p>1.安装依赖</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm i pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure></div>

<p>2.添加插件到 mian.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span> <span class="comment">//导入持久化的插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>() <span class="comment">//创建Pinia实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>) <span class="comment">//创建根实例</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia.<span class="title function_">use</span>(piniaPluginPersistedstate)) <span class="comment">//pinia插件的安装配置</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">//视图的挂载</span></span><br></pre></td></tr></table></figure></div>

<p>3.使用</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; definestore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">definestore</span>(<span class="string">&#x27;main&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> someState = <span class="title function_">ref</span>(<span class="string">&#x27;你好 pinia&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> &#123; </span><br><span class="line">            someState </span><br><span class="line">        &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">persist</span>: <span class="literal">true</span>, <span class="comment">//开启当前模块的持久化</span></span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h3 id="5-6-2-其他配置"><a href="#5-6-2-其他配置" class="headerlink" title="5-6-2 其他配置"></a>5-6-2 其他配置</h3><p>使用 localstorage 进行存储</p>
<p>store.$id 作为 storage 默认的 key</p>
<p>整个 state 默认将被持久化</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">//persist: true,</span></span><br><span class="line">    persist &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;hm-counter&#x27;</span>, <span class="comment">//修改本地存储的唯一标识</span></span><br><span class="line">        <span class="attr">storage</span>: <span class="variable language_">sessionStorage</span>, <span class="comment">//这个 store 将被持久化存储在 sessionStorage</span></span><br><span class="line">        <span class="attr">paths</span>: [<span class="string">&#x27;count&#x27;</span>] <span class="comment">//存储的是哪些数据,默认是所有数据都持久化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="6-基础准备"><a href="#6-基础准备" class="headerlink" title="6- 基础准备"></a>6- 基础准备</h1><h2 id="6-1-pnpm创建项目"><a href="#6-1-pnpm创建项目" class="headerlink" title="6-1 pnpm创建项目"></a>6-1 pnpm创建项目</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240322202543777.png"
                      alt="image-20240322202543777"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240322203835583.png"
                      alt="image-20240322203835583"
                ></li>
</ul>
<h2 id="6-2-ESLint配合Prettier配置代码风格"><a href="#6-2-ESLint配合Prettier配置代码风格" class="headerlink" title="6-2 ESLint配合Prettier配置代码风格"></a>6-2 ESLint配合Prettier配置代码风格</h2><p>配置文件 .eslintrc.cjs</p>
<ul>
<li>提示：安装Eslint且配置保存修复，不要开启默认的自动保存格式化</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;extends&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/eslint-config-prettier/skip-formatting&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//  添加定制部分</span></span><br><span class="line">  <span class="attr">rule</span>: &#123;</span><br><span class="line">    <span class="comment">// prettier专注于代码的美观度(格式化工具)</span></span><br><span class="line">    <span class="comment">// 前置:</span></span><br><span class="line">    <span class="comment">// 1.禁用格式化插件 prettier format on save 关闭</span></span><br><span class="line">    <span class="comment">// 2.安装Eslint插件，并配置保存时自动修复</span></span><br><span class="line">    <span class="string">&#x27;prettier/prettier&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">singleQuote</span>: <span class="literal">true</span>,<span class="comment">// 单引号</span></span><br><span class="line">        <span class="attr">semi</span>: <span class="literal">false</span>,<span class="comment">// 无分号</span></span><br><span class="line">        <span class="attr">printwidth</span>: <span class="number">80</span>,<span class="comment">// 每行宽度至多88字符</span></span><br><span class="line">        <span class="attr">trailingComma</span>: <span class="string">&#x27;none&#x27;</span>,<span class="comment">// 不加对象|数组最后逗号</span></span><br><span class="line">        <span class="attr">endOfLine</span>: <span class="string">&#x27;auto&#x27;</span> <span class="comment">//换行符号不限制(win mac 不一致)</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//ESLint关注于规范，如果不符合规范，报错</span></span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">ignores</span>: [<span class="string">&#x27;index&#x27;</span>]<span class="comment">// vue组件名称多单词组成(忽略index.vue)</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;vue/no-setup-props-destructure&#x27;</span>: [<span class="string">&#x27;off&#x27;</span>],<span class="comment">// 关闭 props 解构的校验(props解构丢失响应式)</span></span><br><span class="line">    <span class="comment">// 添加未定义变量错误提示，create-vue@3.6.3 关闭，这里加上是为了支持下一个章节演示。</span></span><br><span class="line">    <span class="string">&#x27;no-undef&#x27;</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="6-3-基于husky的代码检查工作流"><a href="#6-3-基于husky的代码检查工作流" class="headerlink" title="6-3 基于husky的代码检查工作流"></a>6-3 基于husky的代码检查工作流</h2><p>介绍：</p>
<ul>
<li>husky 是一个 git hooks 工具 (git的钩子工具，可以在特定时机执行特定的命令)。</li>
<li>pnpm lint 是全量检查，有耗时问题、历史问题，使用pnpm lint-staged。</li>
</ul>
<h3 id="6-3-1-husky配置"><a href="#6-3-1-husky配置" class="headerlink" title="6-3-1 husky配置"></a>6-3-1 husky配置</h3><p>1.打开Git Bash 终端</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></div>

<p>2.初始化 husky 工具配置 <a class="link"   href="https://typicode.github.io/husky/" >https://typicode.github.io/husky/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm dlx husky-init &amp;&amp; pnpm install</span><br></pre></td></tr></table></figure></div>

<p>3.修改 .husky&#x2F;pre-cbmmit 文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改 npm test 为 pnpm lint</span><br></pre></td></tr></table></figure></div>

<h3 id="6-3-2-暂存区eslint校验"><a href="#6-3-2-暂存区eslint校验" class="headerlink" title="6-3-2 暂存区eslint校验"></a>6-3-2 暂存区eslint校验</h3><p>1.安装</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm i lint-staged -D</span><br></pre></td></tr></table></figure></div>

<p>2.配置 package.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		......</span><br><span class="line">		<span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;*.&#123;js,ts,vue&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>3.修改 .husky&#x2F;pre-cbmmit 文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改 pnpm lint 为 pnpm lint-staged</span><br></pre></td></tr></table></figure></div>

<h2 id="6-4-调整目录"><a href="#6-4-调整目录" class="headerlink" title="6-4 调整目录"></a>6-4 调整目录</h2><p>主要是以下工作:</p>
<ul>
<li><p>1.删除一些初始化的默认文件</p>
<ul>
<li>删除 assets 包下的所有文件</li>
<li>删除 components 包下的所有文件</li>
<li>删除 stores 包下的所有文件</li>
<li>删除 views 包下的所有文件</li>
</ul>
</li>
<li><p>2.修改剩余代码内容</p>
<ul>
<li>删除 router 包下的 index.js 的 routers: [ ] 下的代码与相关引入</li>
<li>删除 App.vue 的内容，只留框架</li>
</ul>
</li>
<li><p>3.新增调整我们需要的目录结构</p>
<ul>
<li>新增文件夹 utils</li>
<li>新增文件夹 api</li>
</ul>
</li>
<li><p>4.拷贝全局样式和图片，安装预处理器支持</p>
<ul>
<li>安装命令：pnpm add sass -D</li>
</ul>
</li>
</ul>
<h1 id="7-项目"><a href="#7-项目" class="headerlink" title="7- 项目"></a>7- 项目</h1><h2 id="7-1-vue-router4-路由"><a href="#7-1-vue-router4-路由" class="headerlink" title="7-1 vue-router4 路由"></a>7-1 vue-router4 路由</h2><h3 id="7-1-1-router配置"><a href="#7-1-1-router配置" class="headerlink" title="7-1-1 router配置"></a>7-1-1 router配置</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createRouter 创建路由实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 history 模式</span></span><br><span class="line"><span class="comment">// 1.history模式: createWebHistory 地址栏不带#</span></span><br><span class="line"><span class="comment">// 2.hash模式: createWebHashHistory 地址栏带#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vite 中的环境变量: import.meta.env.BASE_URL，就是 vite.config.js 中的 base 配置项，可以在 vite.config.js 添加   ( base:&#x27;/&#x27;,)，也可以直接修改，默认是/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">//history: createWebHistory(&#x27;/lrq&#x27;), </span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: [ ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div>

<h3 id="7-1-2-跳转网址"><a href="#7-1-2-跳转网址" class="headerlink" title="7-1-2 跳转网址"></a>7-1-2 跳转网址</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 在 Vue3 CompositionAPI 中</span><br><span class="line">// 1.获取路由对象 router useRouter</span><br><span class="line">// const router = useRouter()</span><br><span class="line">// 2.获取路由参数 route useRoute</span><br><span class="line">// const route = useRoute()</span><br><span class="line">    </span><br><span class="line">import &#123; useRoute, useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">	const router = useRouter()</span><br><span class="line">	const route = useRoute()</span><br><span class="line">	</span><br><span class="line">	const goList = () =&gt;&#123;</span><br><span class="line">		router.push(&#x27;/list&#x27;)</span><br><span class="line">		console.log(router, route)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;temple&gt;</span><br><span class="line">	&lt;button @click = &quot;$router.push(&#x27;/home&#x27;)&quot;&gt;跳首页&lt;/button&gt;</span><br><span class="line">	&lt;button @click = &quot;goList&quot;&gt;跳列表页&lt;/button&gt;</span><br><span class="line">&lt;/temple&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="7-2-引入-Element-Plus-组件库"><a href="#7-2-引入-Element-Plus-组件库" class="headerlink" title="7-2 引入 Element Plus 组件库"></a>7-2 引入 Element Plus 组件库</h2><p>1.安装</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm install element-plus</span><br></pre></td></tr></table></figure></div>

<p>2.首先需要安装 unplugin-vue-components 和 unplugin-auto-import 这两款插件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br><span class="line">或</span><br><span class="line">pnpm add -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure></div>

<p>3.然后把下列代码插入到你的 vite.config.js 的配置文件中</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>4.官网（<a class="link"   href="https://element-plus.org/zh-CN/" >一个 Vue 3 UI 框架 | Element Plus (element-plus.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)查看组件，直接使用</p>
<p>5.彩蛋：默认 components 下的文件也会被 自动注册</p>
<h2 id="7-3-Pinia-构建仓库-和-持久化"><a href="#7-3-Pinia-构建仓库-和-持久化" class="headerlink" title="7-3 Pinia 构建仓库 和 持久化"></a>7-3 Pinia 构建仓库 和 持久化</h2><h3 id="7-3-1-pinia-独立维护"><a href="#7-3-1-pinia-独立维护" class="headerlink" title="7-3-1 pinia 独立维护"></a>7-3-1 pinia 独立维护</h3><p>1.在 stores 文件夹下创建 文件 index.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia</span><br></pre></td></tr></table></figure></div>

<p>2.修改文件 main.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;@/stores/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="7-3-2-仓库-统一导出"><a href="#7-3-2-仓库-统一导出" class="headerlink" title="7-3-2 仓库 统一导出"></a>7-3-2 仓库 统一导出</h3><p>1.在 stores 文件夹下创建 文件夹 modules，把 仓库 .js 文件放入</p>
<p>2.修改文件 index.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia</span><br><span class="line"></span><br><span class="line"><span class="comment">//import &#123; useUserStore &#125; from &#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="comment">//export &#123; useUserStore &#125;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span> <span class="comment">//等价上面两条语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//import &#123; useCountStore &#125; from &#x27;./modules/counter&#x27;</span></span><br><span class="line"><span class="comment">//export &#123; useCountStore &#125;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./modules/counter&#x27;</span> <span class="comment">//等价上面两条语句</span></span><br></pre></td></tr></table></figure></div>

<p>3.在 vue 文件引入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useUserStore, useCountStore &#125; from &#x27;@/stores&#x27;</span><br></pre></td></tr></table></figure></div>

<h2 id="7-4-数据交互-请求工具设计"><a href="#7-4-数据交互-请求工具设计" class="headerlink" title="7-4 数据交互-请求工具设计"></a>7-4 数据交互-请求工具设计</h2><h3 id="7-4-1-介绍"><a href="#7-4-1-介绍" class="headerlink" title="7-4-1 介绍"></a>7-4-1 介绍</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240325191507445.png"
                      alt="image-20240325191507445"
                ></li>
</ul>
<h3 id="7-4-2-配置-实例与拦截器"><a href="#7-4-2-配置-实例与拦截器" class="headerlink" title="7-4-2 配置-实例与拦截器"></a>7-4-2 配置-实例与拦截器</h3><p>1.安装 axios</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm add axios</span><br></pre></td></tr></table></figure></div>

<p>2.新建 utils&#x2F;request.js 封装 axios 模块，利用 axios.create 创建一个自定义的 axios 来使用</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/modules/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;http://big-event-vue-api-t.itheima.net&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line"><span class="comment">//TODO 1.基础地址，超时时间</span></span><br><span class="line">    baseURL,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">10000</span> <span class="comment">//10秒</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//TODO 2.携带token</span></span><br><span class="line">        <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">        <span class="keyword">if</span>(userStore.<span class="property">token</span>)&#123;</span><br><span class="line">            config.<span class="property">headers</span>.<span class="property">Authorization</span> = userStore.<span class="property">token</span></span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 3.摘取核心响应数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 4.处理业务失败</span></span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">message</span> || <span class="string">&#x27;服务异常&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 5.处理401错误</span></span><br><span class="line">        <span class="comment">//错误的特殊情况 =&gt; 401权限不足或token过期 =&gt; 拦截到登录</span></span><br><span class="line">        <span class="keyword">if</span>(err.<span class="property">response</span>?.<span class="property">status</span> == <span class="number">401</span>)&#123;</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一般错误 =&gt; 直接给提示</span></span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(err.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span> || <span class="string">&#x27;服务异常&#x27;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br><span class="line"><span class="keyword">export</span> &#123; baseURL &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="7-5-整体路由设计"><a href="#7-5-整体路由设计" class="headerlink" title="7-5 整体路由设计"></a>7-5 整体路由设计</h2><p>约定路由规则</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240325203217500.png"
                      alt="image-20240325203217500"
                ></li>
</ul>
<p>实现</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/LoginPage.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/layout/LayoutContainer.vue&#x27;</span>),</span><br><span class="line"></span><br><span class="line">      <span class="comment">//访问&#x27;/&#x27;时，自动跳转&#x27;/article/manage&#x27;</span></span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/article/manage&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">//二级路由</span></span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/article/manage&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/article/ArticleManage.vue&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/article/channel&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/article/ArticleChannel.vue&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/user/profile&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/user/UserProfile.vue&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/user/avatar&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/user/UserAvatar.vue&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/user/password&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/user/UserPassword.vue&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></div>

<h2 id="7-6-登录注册页面-element-plus-表单-表单校验"><a href="#7-6-登录注册页面-element-plus-表单-表单校验" class="headerlink" title="7-6 登录注册页面 [ element-plus 表单 &amp; 表单校验 ]"></a>7-6 登录注册页面 [ element-plus 表单 &amp; 表单校验 ]</h2><h3 id="7-6-1-功能要求"><a href="#7-6-1-功能要求" class="headerlink" title="7-6-1 功能要求"></a>7-6-1 功能要求</h3><p>1.注册登录 静态结构 &amp; 基本切换</p>
<p>2.注册功能 ( 校验+注册 ) </p>
<p>3.登录功能 ( 校验 + 登录 + 存token )</p>
<h3 id="7-6-2-实现"><a href="#7-6-2-实现" class="headerlink" title="7-6-2 实现"></a>7-6-2 实现</h3><h4 id="7-6-2-1安装-element-plus-图标库"><a href="#7-6-2-1安装-element-plus-图标库" class="headerlink" title="7-6-2-1安装 element-plus 图标库"></a>7-6-2-1安装 element-plus 图标库</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm i @element-plus/icons-vue</span><br></pre></td></tr></table></figure></div>

<h4 id="7-6-2-2-views-login-LoginPage-vue"><a href="#7-6-2-2-views-login-LoginPage-vue" class="headerlink" title="7-6-2-2 views &#x2F; login &#x2F; LoginPage.vue"></a>7-6-2-2 views &#x2F; login &#x2F; LoginPage.vue</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; userRegisterService, userLoginService &#125; from &#x27;@/api/user.js&#x27;</span><br><span class="line">import &#123; User, Lock &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;@/stores&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">const isRegister = ref(false) //控制是登录页面还是注册页面，false为登录，true为注册</span><br><span class="line">const form = ref()</span><br><span class="line"></span><br><span class="line">// 整个的用于提交的form数据对象</span><br><span class="line">const formModel = ref(&#123;</span><br><span class="line">  username: &#x27;&#x27;,</span><br><span class="line">  password: &#x27;&#x27;,</span><br><span class="line">  repassword: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">// 整个表单的校验规则</span><br><span class="line">// 1. 非空校验 required: true      message消息提示，  trigger触发校验的时机 blur change</span><br><span class="line">// 2. 长度校验 min:xx, max: xx</span><br><span class="line">// 3. 正则校验 pattern: 正则规则    \S 非空字符</span><br><span class="line">// 4. 自定义校验 =&gt; 自己写逻辑校验 (校验函数)</span><br><span class="line">//    validator: (rule, value, callback)</span><br><span class="line">//    (1) rule  当前校验规则相关的信息</span><br><span class="line">//    (2) value 所校验的表单元素目前的表单值</span><br><span class="line">//    (3) callback 无论成功还是失败，都需要 callback 回调</span><br><span class="line">//        - callback() 校验成功</span><br><span class="line">//        - callback(new Error(错误信息)) 校验失败</span><br><span class="line">const rules = &#123;</span><br><span class="line">  username: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; min: 5, max: 10, message: &#x27;用户名必须是 5-10位 的字符&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  password: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      pattern: /^\S&#123;6,15&#125;$/,</span><br><span class="line">      message: &#x27;密码必须是 6-15位 的非空字符&#x27;,</span><br><span class="line">      trigger: &#x27;blur&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  repassword: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      pattern: /^\S&#123;6,15&#125;$/,</span><br><span class="line">      message: &#x27;密码必须是 6-15位 的非空字符&#x27;,</span><br><span class="line">      trigger: &#x27;blur&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      validator: (rule, value, callback) =&gt; &#123;</span><br><span class="line">        // 判断 value 和 当前 form 中收集的 password 是否一致</span><br><span class="line">        if (value !== formModel.value.password) &#123;</span><br><span class="line">          callback(new Error(&#x27;两次输入密码不一致&#x27;))</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          callback() // 就算校验成功，也需要callback</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      trigger: &#x27;blur&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const register = async () =&gt; &#123;</span><br><span class="line">  // 注册成功之前，先进行校验，校验成功 → 请求，校验失败 → 自动提示</span><br><span class="line">  await form.value.validate() //validate:对整个表单的内容进行验证。接收一个回调函数，或返回 Promise。</span><br><span class="line">  await userRegisterService(formModel.value)</span><br><span class="line">  ElMessage.success(&#x27;注册成功&#x27;)</span><br><span class="line">  isRegister.value = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const router = useRouter()</span><br><span class="line"></span><br><span class="line">const login = async () =&gt; &#123;</span><br><span class="line">  await form.value.validate()</span><br><span class="line">  const res = await userLoginService(formModel.value)</span><br><span class="line">  userStore.setToken(res.data.token)</span><br><span class="line">  ElMessage.success(&#x27;登录成功&#x27;)</span><br><span class="line">  router.push(&#x27;/&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 切换的时候，重置表单内容</span><br><span class="line">watch(isRegister, () =&gt; &#123;</span><br><span class="line">  formModel.value = &#123;</span><br><span class="line">    username: &#x27;&#x27;,</span><br><span class="line">    password: &#x27;&#x27;,</span><br><span class="line">    repassword: &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- </span><br><span class="line">    1. 结构相关</span><br><span class="line">      el-row表示一行，一行分成24份 </span><br><span class="line">       el-col表示列  </span><br><span class="line">       (1) :span=&quot;12&quot;  代表在一行中，占12份 (50%)</span><br><span class="line">       (2) :span=&quot;6&quot;   表示在一行中，占6份  (25%)</span><br><span class="line">       (3) :offset=&quot;3&quot; 代表在一行中，左侧margin份数</span><br><span class="line"></span><br><span class="line">       el-form 整个表单组件</span><br><span class="line">       el-form-item 表单的一行 （一个表单域）</span><br><span class="line">       el-input 表单元素（输入框）</span><br><span class="line">    2. 校验相关</span><br><span class="line">       (1) el-form =&gt; :model=&quot;ruleForm&quot;      绑定的整个form的数据对象 &#123; xxx, xxx, xxx &#125;</span><br><span class="line">       (2) el-form =&gt; :rules=&quot;rules&quot;         绑定的整个rules规则对象  &#123; xxx, xxx, xxx &#125;</span><br><span class="line">       (3) 表单元素 =&gt; v-model=&quot;ruleForm.xxx&quot; 给表单元素，绑定form的子属性</span><br><span class="line">       (4) el-form-item =&gt; prop配置生效的是哪个校验规则 (和rules中的字段要对应)</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;el-row class=&quot;login-page&quot;&gt;</span><br><span class="line">    &lt;el-col :span=&quot;12&quot; class=&quot;bg&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">    &lt;el-col :span=&quot;6&quot; :offset=&quot;3&quot; class=&quot;form&quot;&gt;</span><br><span class="line">      &lt;!-- 注册相关表单 --&gt;</span><br><span class="line">      &lt;el-form</span><br><span class="line">        :model=&quot;formModel&quot;</span><br><span class="line">        :rules=&quot;rules&quot;</span><br><span class="line">        ref=&quot;form&quot;</span><br><span class="line">        size=&quot;large&quot;</span><br><span class="line">        autocomplete=&quot;off&quot;</span><br><span class="line">        v-if=&quot;isRegister&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;h1&gt;注册&lt;/h1&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;formModel.username&quot;</span><br><span class="line">            :prefix-icon=&quot;User&quot; </span><br><span class="line">            placeholder=&quot;请输入用户名&quot; </span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;formModel.password&quot;</span><br><span class="line">            :prefix-icon=&quot;Lock&quot; </span><br><span class="line">            type=&quot;password&quot;</span><br><span class="line">            placeholder=&quot;请输入密码&quot;</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;repassword&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;formModel.repassword&quot;</span><br><span class="line">            :prefix-icon=&quot;Lock&quot;</span><br><span class="line">            type=&quot;password&quot;</span><br><span class="line">            placeholder=&quot;请输入再次密码&quot;</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;el-button @click=&quot;register&quot; class=&quot;button&quot; type=&quot;primary&quot; auto-insert-space&gt;</span><br><span class="line">            注册</span><br><span class="line">          &lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item class=&quot;flex&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;info&quot; :underline=&quot;false&quot; @click=&quot;isRegister = false&quot;&gt; ← 返回 &lt;/el-link&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 登录相关表单 --&gt;</span><br><span class="line">      &lt;el-form :model=&quot;formModel&quot; :rules=&quot;rules&quot; ref=&quot;form&quot; size=&quot;large&quot; autocomplete=&quot;off&quot; v-else&gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;formModel.username&quot;</span><br><span class="line">            :prefix-icon=&quot;User&quot;</span><br><span class="line">            placeholder=&quot;请输入用户名&quot;</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;formModel.password&quot;</span><br><span class="line">            name=&quot;password&quot;</span><br><span class="line">            :prefix-icon=&quot;Lock&quot;</span><br><span class="line">            type=&quot;password&quot;</span><br><span class="line">            placeholder=&quot;请输入密码&quot;</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item class=&quot;flex&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;flex&quot;&gt;</span><br><span class="line">            &lt;el-checkbox&gt;记住我&lt;/el-checkbox&gt;</span><br><span class="line">            &lt;el-link type=&quot;primary&quot; :underline=&quot;false&quot;&gt;忘记密码？&lt;/el-link&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;el-button @click=&quot;login&quot; class=&quot;button&quot; type=&quot;primary&quot; auto-insert-space&gt;登录&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item class=&quot;flex&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;info&quot; :underline=&quot;false&quot; @click=&quot;isRegister = true&quot;&gt; 注册 → &lt;/el-link&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="7-6-2-3-创建-api-user-js"><a href="#7-6-2-3-创建-api-user-js" class="headerlink" title="7-6-2-3 创建 api &#x2F; user.js"></a>7-6-2-3 创建 api &#x2F; user.js</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userRegisterService</span> = (<span class="params">&#123; username, password, repassword &#125;</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">post</span>(<span class="string">&#x27;/api/reg&#x27;</span>, &#123; username, password, repassword &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userLoginService</span> = (<span class="params">&#123; username, password &#125;</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, &#123; username, password &#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="7-6-2-4-stores-modules-user-js"><a href="#7-6-2-4-stores-modules-user-js" class="headerlink" title="7-6-2-4 stores &#x2F; modules &#x2F; user.js"></a>7-6-2-4 stores &#x2F; modules &#x2F; user.js</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户模块 token setToken removeToken</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;big-user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newtoken</span>) =&gt; &#123;</span><br><span class="line">    token.<span class="property">value</span> = newtoken</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    token.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &#123;</span><br><span class="line">      token,</span><br><span class="line">      setToken,</span><br><span class="line">      removeToken</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">persist</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="7-6-2-5-eslintrc-cjs-中声明全局变量名，解决-ElMessage-报错问题"><a href="#7-6-2-5-eslintrc-cjs-中声明全局变量名，解决-ElMessage-报错问题" class="headerlink" title="7-6-2-5 eslintrc.cjs 中声明全局变量名，解决 ElMessage 报错问题"></a>7-6-2-5 eslintrc.cjs 中声明全局变量名，解决 ElMessage 报错问题</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">globals</span>: &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="title class_">ElMessageBox</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="title class_">ElLoading</span>: <span class="string">&#x27;readonly&#x27;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="7-7-首页-layout-架子-element-plus-菜单组件"><a href="#7-7-首页-layout-架子-element-plus-菜单组件" class="headerlink" title="7-7 首页 layout 架子 [ element-plus 菜单组件 ]"></a>7-7 首页 layout 架子 [ element-plus 菜单组件 ]</h2><h3 id="7-7-1-功能要求"><a href="#7-7-1-功能要求" class="headerlink" title="7-7-1 功能要求"></a>7-7-1 功能要求</h3><p>1.基本架子拆解(菜单组件的使用)</p>
<p>2.登录访问拦截</p>
<p>3.用户基本信息 获取&amp;渲染</p>
<p>4.退出功能 [ element-plus 确认框 ]</p>
<h3 id="7-7-2-实现"><a href="#7-7-2-实现" class="headerlink" title="7-7-2 实现"></a>7-7-2 实现</h3><h4 id="7-7-2-1-views-layout-LayoutContainer-vue"><a href="#7-7-2-1-views-layout-LayoutContainer-vue" class="headerlink" title="7-7-2-1 views &#x2F; layout &#x2F; LayoutContainer.vue"></a>7-7-2-1 views &#x2F; layout &#x2F; LayoutContainer.vue</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  Management,</span><br><span class="line">  Promotion,</span><br><span class="line">  UserFilled,</span><br><span class="line">  User,</span><br><span class="line">  Crop,</span><br><span class="line">  EditPen,</span><br><span class="line">  SwitchButton,</span><br><span class="line">  CaretBottom</span><br><span class="line">&#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import avatar from &#x27;@/assets/default.png&#x27;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;@/stores&#x27;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const router = useRouter()</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  userStore.getUser()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const handleCommand = async (key) =&gt; &#123;</span><br><span class="line">  if (key === &#x27;logout&#x27;) &#123;</span><br><span class="line">    // 退出操作</span><br><span class="line">    await ElMessageBox.confirm(&#x27;你确认要进行退出么&#x27;, &#x27;温馨提示&#x27;, &#123;</span><br><span class="line">      type: &#x27;warning&#x27;,</span><br><span class="line">      confirmButtonText: &#x27;确认&#x27;,</span><br><span class="line">      cancelButtonText: &#x27;取消&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 清除本地的数据 (token + user信息)</span><br><span class="line">    userStore.removeToken()</span><br><span class="line">    userStore.setUser(&#123;&#125;)</span><br><span class="line">    router.push(&#x27;/login&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 跳转操作</span><br><span class="line">    router.push(&#x27;/user/$&#123;key&#125;&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- </span><br><span class="line">    el-menu 整个菜单组件</span><br><span class="line">      :default-active=&quot;$route.path&quot;  配置默认高亮的菜单项</span><br><span class="line">      router  router选项开启，el-menu-item 的 index 就是点击跳转的路径</span><br><span class="line"></span><br><span class="line">    el-menu-item 菜单项</span><br><span class="line">      index=&quot;/article/channel&quot; 配置的是访问的跳转路径，配合default-active的值，实现高亮</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;el-container class=&quot;layout-container&quot;&gt;</span><br><span class="line">    &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;el-aside__logo&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;el-menu</span><br><span class="line">        active-text-color=&quot;#ffd04b&quot;</span><br><span class="line">        background-color=&quot;#232323&quot;</span><br><span class="line">        :default-active=&quot;$route.path&quot;</span><br><span class="line">        text-color=&quot;#fff&quot;</span><br><span class="line">        router</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/article/channel&quot;&gt;</span><br><span class="line">          &lt;el-icon&gt;&lt;Management /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;span&gt;文章分类&lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/article/manage&quot;&gt;</span><br><span class="line">          &lt;el-icon&gt;&lt;Promotion /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;span&gt;文章管理&lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-sub-menu index=&quot;/user&quot;&gt;</span><br><span class="line">          &lt;!-- 多级菜单的标题 - 具名插槽 title --&gt;</span><br><span class="line">          &lt;template #title&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;UserFilled /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span&gt;个人中心&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 展开的内容 - 默认插槽 --&gt;</span><br><span class="line">          &lt;el-menu-item index=&quot;/user/profile&quot;&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;User /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span&gt;基本资料&lt;/span&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">          &lt;el-menu-item index=&quot;/user/avatar&quot;&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;Crop /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span&gt;更换头像&lt;/span&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">          &lt;el-menu-item index=&quot;/user/password&quot;&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;EditPen /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span&gt;重置密码&lt;/span&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/el-sub-menu&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-header&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          昵称：&lt;strong&gt;&#123;&#123; userStore.user.nickname || userStore.user.username &#125;&#125;&lt;/strong&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">          </span><br><span class="line">        &lt;!-- @command=&quot;handleCommand&quot; 对应下面的 command=&quot; &quot;，触发对应事件 --&gt; </span><br><span class="line">        &lt;el-dropdown placement=&quot;bottom-end&quot; @command=&quot;handleCommand&quot;&gt;</span><br><span class="line">          &lt;!-- 展示给用户，默认看到的 --&gt;</span><br><span class="line">          &lt;span class=&quot;el-dropdown__box&quot;&gt;</span><br><span class="line">            &lt;el-avatar :src=&quot;userStore.user.user_pic || avatar&quot; /&gt; </span><br><span class="line">            &lt;el-icon&gt;&lt;CaretBottom /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 折叠的下拉部分 --&gt;</span><br><span class="line">          &lt;template #dropdown&gt;</span><br><span class="line">            &lt;el-dropdown-menu&gt;</span><br><span class="line">              &lt;el-dropdown-item command=&quot;profile&quot; :icon=&quot;User&quot;&gt;基本资料&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item command=&quot;avatar&quot; :icon=&quot;Crop&quot;&gt;更换头像&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item command=&quot;password&quot; :icon=&quot;EditPen&quot;&gt;重置密码&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item command=&quot;logout&quot; :icon=&quot;SwitchButton&quot;&gt;退出登录&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/el-dropdown-menu&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-dropdown&gt;</span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/el-main&gt;</span><br><span class="line">      &lt;el-footer&gt;大事件 ©2024 Created by 李瑞强&lt;/el-footer&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="7-7-2-2-登录访问拦截"><a href="#7-7-2-2-登录访问拦截" class="headerlink" title="7-7-2-2 登录访问拦截"></a>7-7-2-2 登录访问拦截</h4><p>​	需求：只有登录页，可以未授权的时候访问，其他所有页面都需要先登录再访问</p>
<p>​	位置：router &#x2F; index.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录访问拦截 =&gt; 默认是直接放行的</span></span><br><span class="line"><span class="comment">// 根据返回值决定，是放行还是拦截</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// 1. undefined / true  直接放行</span></span><br><span class="line"><span class="comment">// 2. false 拦回from的地址页面</span></span><br><span class="line"><span class="comment">// 3. 具体路径 或 路径对象  拦截到对应的地址</span></span><br><span class="line"><span class="comment">//    &#x27;/login&#x27;   &#123; name: &#x27;login&#x27; &#125;</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果没有token, 且访问的是非登录页，拦截到登录，其他情况正常放行</span></span><br><span class="line">  <span class="keyword">const</span> useStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">  <span class="keyword">if</span> (!useStore.<span class="property">token</span> &amp;&amp; to.<span class="property">path</span> !== <span class="string">&#x27;/login&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;/login&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="7-7-2-3-api-user-js"><a href="#7-7-2-3-api-user-js" class="headerlink" title="7-7-2-3 api &#x2F; user.js"></a>7-7-2-3 api &#x2F; user.js</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取用户基本信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userGetInfoService</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">&#x27;/my/userinfo&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="7-7-2-4-stores-modules-user-js"><a href="#7-7-2-4-stores-modules-user-js" class="headerlink" title="7-7-2-4 stores &#x2F; modules &#x2F; user.js"></a>7-7-2-4 stores &#x2F; modules &#x2F; user.js</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; userGetInfoService &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">ref</span>(&#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getUser</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">userGetInfoService</span>() <span class="comment">// 请求获取数据</span></span><br><span class="line">    user.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setUser</span> = (<span class="params">obj</span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">value</span> = obj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &#123;</span><br><span class="line">      ......</span><br><span class="line">      user,</span><br><span class="line">      getUser,</span><br><span class="line">      setUser</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">persist</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="7-8-文章分类页面-element-plus-表格"><a href="#7-8-文章分类页面-element-plus-表格" class="headerlink" title="7-8 文章分类页面 [ element-plus 表格 ]"></a>7-8 文章分类页面 [ element-plus 表格 ]</h2><h3 id="7-8-1-功能要求"><a href="#7-8-1-功能要求" class="headerlink" title="7-8-1 功能要求"></a>7-8-1 功能要求</h3><p>1.基本架子-Pagecontainer封装</p>
<p>2.文章分类渲染 &amp; loading 处理</p>
<p>3.文章分类添加编辑 [element-plus 弹层]</p>
<p>4.文章分类删除</p>
<h3 id="7-8-2-实现"><a href="#7-8-2-实现" class="headerlink" title="7-8-2 实现"></a>7-8-2 实现</h3><h4 id="7-8-2-1-创建-components-PageContainer-vue"><a href="#7-8-2-1-创建-components-PageContainer-vue" class="headerlink" title="7-8-2-1 创建 components &#x2F; PageContainer.vue"></a>7-8-2-1 创建 components &#x2F; PageContainer.vue</h4><p>1.基本结构样式，用到了 el-card 组件</p>
<p>2.考虑到多个页面复用，封装成组件</p>
<ul>
<li>props 定制标题</li>
<li>默认插槽 defaut 定制内容主体</li>
<li>具名插槽 extra 定制头部右侧额外的按钮</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    required: true,</span><br><span class="line">    type: String</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-card class=&quot;page-container&quot;&gt;</span><br><span class="line">    &lt;template #header&gt;</span><br><span class="line">      &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">        &lt;!-- 标题 父传子内容 --&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;div class=&quot;extra&quot;&gt;</span><br><span class="line">          &lt;!-- 具名插槽 定制按钮 --&gt;</span><br><span class="line">          &lt;slot name=&quot;extra&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- 默认插槽 定制内容 --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/el-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.page-container &#123;</span><br><span class="line">  min-height: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  .header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="7-8-2-2-创建-views-article-components-ChannelEdit-vue"><a href="#7-8-2-2-创建-views-article-components-ChannelEdit-vue" class="headerlink" title="7-8-2-2 创建 views &#x2F; article &#x2F; components &#x2F; ChannelEdit.vue"></a>7-8-2-2 创建 views &#x2F; article &#x2F; components &#x2F; ChannelEdit.vue</h4><p>1.弹窗封装 </p>
<p>2.是子组件</p>
<ul>
<li>父组件中给子组件标签通过@绑定事件</li>
<li>子组件内部通过 emit 方法触发事件</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; artEditChannelService, artAddChannelService &#125; from &#x27;@/api/article.js&#x27;</span><br><span class="line">const dialogVisible = ref(false)</span><br><span class="line">const formRef = ref()</span><br><span class="line">const formModel = ref(&#123;</span><br><span class="line">  cate_name: &#x27;&#x27;,</span><br><span class="line">  cate_alias: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">const rules = &#123;</span><br><span class="line">  cate_name: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入分类名称&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      pattern: /^\S&#123;1,10&#125;$/,</span><br><span class="line">      message: &#x27;分类名必须是 1-10 位的非空字符&#x27;,</span><br><span class="line">      trigger: &#x27;blur&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  cate_alias: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入分类别名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      pattern: /^[a-zA-Z0-9]&#123;1,15&#125;$/,</span><br><span class="line">      message: &#x27;分类名必须是 1-15 位的字母或数字&#x27;,</span><br><span class="line">      trigger: &#x27;blur&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const emit = defineEmits([&#x27;success&#x27;])</span><br><span class="line">const onSubmit = async () =&gt; &#123;</span><br><span class="line">  await formRef.value.validate()</span><br><span class="line">  const isEdit = formModel.value.id</span><br><span class="line">  if (isEdit) &#123;</span><br><span class="line">    await artEditChannelService(formModel.value)</span><br><span class="line">    ElMessage.success(&#x27;编辑成功&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    await artAddChannelService(formModel.value)</span><br><span class="line">    ElMessage.success(&#x27;添加成功&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  dialogVisible.value = false</span><br><span class="line">  // 子传父事件</span><br><span class="line">  emit(&#x27;success&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 组件对外暴露一个方法 open，基于open传来的参数，区分添加还是编辑</span><br><span class="line">// open(&#123;&#125;)  =&gt; 表单无需渲染，说明是添加</span><br><span class="line">// open(&#123; id, cate_name, ... &#125;)  =&gt; 表单需要渲染，说明是编辑</span><br><span class="line">// open调用后，可以打开弹窗</span><br><span class="line">const open = (row) =&gt; &#123;</span><br><span class="line">  dialogVisible.value = true</span><br><span class="line">  formModel.value = &#123; ...row &#125; // 添加 → 重置了表单内容，编辑 → 存储了需要回显的数据</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 向外暴露方法</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  open</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-dialog v-model=&quot;dialogVisible&quot; :title=&quot;formModel.id ? &#x27;编辑分类&#x27; : &#x27;添加分类&#x27;&quot; width=&quot;30%&quot;&gt;</span><br><span class="line">    &lt;el-form</span><br><span class="line">      ref=&quot;formRef&quot;</span><br><span class="line">      :model=&quot;formModel&quot;</span><br><span class="line">      :rules=&quot;rules&quot;</span><br><span class="line">      label-width=&quot;100px&quot;</span><br><span class="line">      style=&quot;padding-right: 30px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-form-item label=&quot;分类名称&quot; prop=&quot;cate_name&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;formModel.cate_name&quot; placeholder=&quot;请输入分类名称&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;分类别名&quot; prop=&quot;cate_alias&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;formModel.cate_alias&quot; placeholder=&quot;请输入分类别名&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">    &lt;template #footer&gt;</span><br><span class="line">      &lt;span class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt; 确认 &lt;/el-button&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="7-8-2-3-创建-views-article-ArticleChannel-vue"><a href="#7-8-2-3-创建-views-article-ArticleChannel-vue" class="headerlink" title="7-8-2-3 创建 views &#x2F; article &#x2F; ArticleChannel.vue"></a>7-8-2-3 创建 views &#x2F; article &#x2F; ArticleChannel.vue</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; Edit, Delete &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import &#123; artGetChannelsService, artDelChannelService &#125; from &#x27;@/api/article&#x27;</span><br><span class="line">import ChannelEdit from &#x27;./components/ChannelEdit.vue&#x27;</span><br><span class="line">const channelList = ref([])</span><br><span class="line">const loading = ref(false)</span><br><span class="line">const dialog = ref()</span><br><span class="line"></span><br><span class="line">const getChannelList = async () =&gt; &#123;</span><br><span class="line">  loading.value = true</span><br><span class="line">  const res = await artGetChannelsService()</span><br><span class="line">  channelList.value = res.data.data</span><br><span class="line">  loading.value = false</span><br><span class="line">&#125;</span><br><span class="line">getChannelList()</span><br><span class="line"></span><br><span class="line">const onDelChannel = async (row) =&gt; &#123;</span><br><span class="line">  await ElMessageBox.confirm(&#x27;你确认要删除该分类么&#x27;, &#x27;温馨提示&#x27;, &#123;</span><br><span class="line">    type: &#x27;warning&#x27;,</span><br><span class="line">    confirmButtonText: &#x27;确认&#x27;,</span><br><span class="line">    cancelButtonText: &#x27;取消&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  await artDelChannelService(row.id)</span><br><span class="line">  ElMessage.success(&#x27;删除成功&#x27;)</span><br><span class="line">  getChannelList()</span><br><span class="line">&#125;</span><br><span class="line">const onEditChannel = (row) =&gt; &#123;</span><br><span class="line">  dialog.value.open(row)</span><br><span class="line">&#125;</span><br><span class="line">const onAddChannel = () =&gt; &#123;</span><br><span class="line">  dialog.value.open(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">const onSuccess = () =&gt; &#123;</span><br><span class="line">  getChannelList()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;page-container title=&quot;文章分类&quot;&gt;</span><br><span class="line">    &lt;template #extra&gt;</span><br><span class="line">      &lt;el-button @click=&quot;onAddChannel&quot;&gt;添加分类&lt;/el-button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- v-loading=&quot;loading&quot; 对表格进行 加载动效 --&gt;</span><br><span class="line">    &lt;el-table v-loading=&quot;loading&quot; :data=&quot;channelList&quot; style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;!-- 设置 type 属性为 index 即可显示从 1 开始的索引号。 --&gt;</span><br><span class="line">      &lt;el-table-column type=&quot;index&quot; label=&quot;序号&quot; width=&quot;100&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;cate_name&quot; label=&quot;分类名称&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;cate_alias&quot; label=&quot;分类别名&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;150&quot;&gt;</span><br><span class="line">        &lt;!-- row 就是 channelList 的一项， $index 下标 --&gt;</span><br><span class="line">        &lt;template #default=&quot;&#123; row, $index &#125;&quot;&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            :icon=&quot;Edit&quot;</span><br><span class="line">            circle</span><br><span class="line">            plain</span><br><span class="line">            type=&quot;primary&quot;</span><br><span class="line">            @click=&quot;onEditChannel(row, $index)&quot;</span><br><span class="line">          &gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            :icon=&quot;Delete&quot;</span><br><span class="line">            circle</span><br><span class="line">            plain</span><br><span class="line">            type=&quot;danger&quot;</span><br><span class="line">            @click=&quot;onDelChannel(row, $index)&quot;</span><br><span class="line">          &gt;&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 没有数据时 用Empty空状态 --&gt;</span><br><span class="line">      &lt;template #empty&gt;</span><br><span class="line">        &lt;el-empty description=&quot;没有数据&quot;&gt;&lt;/el-empty&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 调用弹窗夹层 --&gt;</span><br><span class="line">    &lt;!-- @success事件是子传父事件 --&gt;</span><br><span class="line">    &lt;channel-edit ref=&quot;dialog&quot; @success=&quot;onSuccess&quot;&gt;&lt;/channel-edit&gt;</span><br><span class="line">  &lt;/page-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="7-8-2-4-创建-api-article-js"><a href="#7-8-2-4-创建-api-article-js" class="headerlink" title="7-8-2-4 创建 api &#x2F; article.js"></a>7-8-2-4 创建 api &#x2F; article.js</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="comment">// 分类：获取文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artGetChannelsService</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">&#x27;/my/cate/list&#x27;</span>)</span><br><span class="line"><span class="comment">// 分类：添加文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artAddChannelService</span> = (<span class="params">data</span>) =&gt; request.<span class="title function_">post</span>(<span class="string">&#x27;/my/cate/add&#x27;</span>, data)</span><br><span class="line"><span class="comment">// 分类：编辑文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artEditChannelService</span> = (<span class="params">data</span>) =&gt; request.<span class="title function_">put</span>(<span class="string">&#x27;/my/cate/info&#x27;</span>, data)</span><br><span class="line"><span class="comment">// 分类：删除文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artDelChannelService</span> = (<span class="params">id</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">delete</span>(<span class="string">&#x27;/my/cate/del&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123; id &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="7-9-文章管理页面-element-plus-进阶"><a href="#7-9-文章管理页面-element-plus-进阶" class="headerlink" title="7-9 文章管理页面 [ element-plus 进阶 ]"></a>7-9 文章管理页面 [ element-plus 进阶 ]</h2><h3 id="7-9-1-功能要求"><a href="#7-9-1-功能要求" class="headerlink" title="7-9-1 功能要求"></a>7-9-1 功能要求</h3><p>1.文章列表渲染 (带搜索 &amp;带分页)</p>
<p>2.添加文章 (抽屉 &amp;文件上传 &amp;富文本)</p>
<p>3.编辑文章 (共用抽屉)</p>
<p>4.删除文章</p>
<h3 id="7-9-2-实现"><a href="#7-9-2-实现" class="headerlink" title="7-9-2 实现"></a>7-9-2 实现</h3><h4 id="7-9-2-1-创建-views-article-components-ChannelSelect-vue，封装文章分类动态下拉菜单"><a href="#7-9-2-1-创建-views-article-components-ChannelSelect-vue，封装文章分类动态下拉菜单" class="headerlink" title="7-9-2-1 创建 views &#x2F; article &#x2F; components &#x2F; ChannelSelect.vue，封装文章分类动态下拉菜单"></a>7-9-2-1 创建 views &#x2F; article &#x2F; components &#x2F; ChannelSelect.vue，封装文章分类动态下拉菜单</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; artGetChannelsService &#125; from &#x27;@/api/article.js&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  modelValue: &#123;</span><br><span class="line">    type: [Number, String]</span><br><span class="line">  &#125;,</span><br><span class="line">  width: &#123;</span><br><span class="line">    type: String</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const emit = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line"></span><br><span class="line">const channelList = ref([])</span><br><span class="line">const getChannelList = async () =&gt; &#123;</span><br><span class="line">  const res = await artGetChannelsService()</span><br><span class="line">  channelList.value = res.data.data</span><br><span class="line">&#125;</span><br><span class="line">getChannelList()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- label 展示给用户看的，value 收集起来提交给后台的 --&gt;</span><br><span class="line">  &lt;el-select</span><br><span class="line">    :modelValue=&quot;modelValue&quot;</span><br><span class="line">    @update:modelValue=&quot;emit(&#x27;update:modelValue&#x27;, $event)&quot;</span><br><span class="line">    :style=&quot;&#123; width &#125;&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;el-option</span><br><span class="line">      v-for=&quot;channel in channelList&quot;</span><br><span class="line">      :key=&quot;channel.id&quot;</span><br><span class="line">      :label=&quot;channel.cate_name&quot;</span><br><span class="line">      :value=&quot;channel.id&quot;</span><br><span class="line">    &gt;&lt;/el-option&gt;</span><br><span class="line">  &lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="7-9-2-2-创建-utils-format-js，封装时间函数"><a href="#7-9-2-2-创建-utils-format-js，封装时间函数" class="headerlink" title="7-9-2-2 创建 utils &#x2F; format.js，封装时间函数"></a>7-9-2-2 创建 utils &#x2F; format.js，封装时间函数</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dayjs &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">formatTime</span> = (<span class="params">time</span>) =&gt; <span class="title function_">dayjs</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="7-9-2-3-富文本编辑器-vue-quill"><a href="#7-9-2-3-富文本编辑器-vue-quill" class="headerlink" title="7-9-2-3 富文本编辑器[ vue-quill ]"></a>7-9-2-3 富文本编辑器[ vue-quill ]</h4><p>官网：<a class="link"   href="https://vueup.github.io/vue-quill/" >https://vueup.github.io/vue-quill/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>1.安装包</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm add @vueup/vue-quill@latest</span><br></pre></td></tr></table></figure></div>

<p>2.注册成局部组件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QuillEditor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueup/vue-quill&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>3.页面中使用绑定</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;文章内容&quot; prop=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;editor&quot;&gt;</span><br><span class="line">        &lt;!-- v-model 双向绑定数据 --&gt;</span><br><span class="line">        &lt;!-- content-type 设置文本格式 --&gt;</span><br><span class="line">        &lt;quill-editor</span><br><span class="line">        ref=&quot;editorRef&quot;</span><br><span class="line">        v-model:content=&quot;formModel.content&quot;</span><br><span class="line">        content-type=&quot;html&quot;</span><br><span class="line">        theme=&quot;snow&quot;</span><br><span class="line">        &gt;&lt;/quill-editor&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure></div>

<p>4.样式美化</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">// 富文本编辑器功能美化</span><br><span class="line"><span class="selector-class">.editor</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  :<span class="built_in">deep</span>(.ql-editor) &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="7-9-2-4-创建-views-article-components-ArticleEdit-vue，封装抽屉"><a href="#7-9-2-4-创建-views-article-components-ArticleEdit-vue，封装抽屉" class="headerlink" title="7-9-2-4 创建 views &#x2F; article &#x2F; components &#x2F; ArticleEdit.vue，封装抽屉"></a>7-9-2-4 创建 views &#x2F; article &#x2F; components &#x2F; ArticleEdit.vue，封装抽屉</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChannelSelect from &#x27;./ChannelSelect.vue&#x27;</span><br><span class="line">import &#123; Plus &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import &#123; QuillEditor &#125; from &#x27;@vueup/vue-quill&#x27;</span><br><span class="line">import &#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span><br><span class="line">import &#123; artPublishService, artGetDetailService, artEditService &#125; from &#x27;@/api/article&#x27;</span><br><span class="line">import &#123; baseURL &#125; from &#x27;@/utils/request&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">// 控制抽屉显示隐藏</span><br><span class="line">const visibleDrawer = ref(false)</span><br><span class="line"></span><br><span class="line">// 默认数据</span><br><span class="line">const defaultForm = &#123;</span><br><span class="line">  title: &#x27;&#x27;, // 标题</span><br><span class="line">  cate_id: &#x27;&#x27;, // 分类id</span><br><span class="line">  cover_img: &#x27;&#x27;, // 封面图片 file 对象</span><br><span class="line">  content: &#x27;&#x27;, // string 内容</span><br><span class="line">  state: &#x27;&#x27; // 状态</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 准备数据</span><br><span class="line">const formModel = ref(&#123; ...defaultForm &#125;)</span><br><span class="line"></span><br><span class="line">// 图片上传相关逻辑</span><br><span class="line">const imgUrl = ref(&#x27;&#x27;)</span><br><span class="line">const onSelectFile = (uploadFile) =&gt; &#123;</span><br><span class="line">  imgUrl.value = URL.createObjectURL(uploadFile.raw) // 预览图片</span><br><span class="line">  // 立刻将图片对象，存入 formModel.value.cover_img 将来用于提交</span><br><span class="line">  formModel.value.cover_img = uploadFile.raw</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 提交</span><br><span class="line">const emit = defineEmits([&#x27;success&#x27;])</span><br><span class="line">const onPublish = async (state) =&gt; &#123;</span><br><span class="line">  // 将已发布还是草稿状态，存入 formModel</span><br><span class="line">  formModel.value.state = state</span><br><span class="line"></span><br><span class="line">  // 注意：当前接口，需要的是 formData 对象</span><br><span class="line">  // 将普通对象 =&gt; 转换成 =&gt; formData对象</span><br><span class="line">  const fd = new FormData()</span><br><span class="line">  for (let key in formModel.value) &#123;</span><br><span class="line">    fd.append(key, formModel.value[key])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 发请求</span><br><span class="line">  if (formModel.value.id) &#123;</span><br><span class="line">    // 编辑操作</span><br><span class="line">    await artEditService(fd)</span><br><span class="line">    ElMessage.success(&#x27;修改成功&#x27;)</span><br><span class="line">    visibleDrawer.value = false</span><br><span class="line">    emit(&#x27;success&#x27;, &#x27;edit&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 添加操作</span><br><span class="line">    await artPublishService(fd)</span><br><span class="line">    ElMessage.success(&#x27;添加成功&#x27;)</span><br><span class="line">    visibleDrawer.value = false</span><br><span class="line">    // 通知到父组件，添加成功了</span><br><span class="line">    emit(&#x27;success&#x27;, &#x27;add&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 组件对外暴露一个方法 open，基于open传来的参数，区分添加还是编辑</span><br><span class="line">// open(&#123;&#125;)  =&gt; 表单无需渲染，说明是添加</span><br><span class="line">// open(&#123; id, ..., ... &#125;)  =&gt; 表单需要渲染，说明是编辑</span><br><span class="line">// open调用后，可以打开抽屉</span><br><span class="line">const editorRef = ref()</span><br><span class="line">const open = async (row) =&gt; &#123;</span><br><span class="line">  visibleDrawer.value = true // 显示抽屉</span><br><span class="line"></span><br><span class="line">  if (row.id) &#123;</span><br><span class="line">    // 需要基于 row.id 发送请求，获取编辑对应的详情数据，进行回显</span><br><span class="line">    const res = await artGetDetailService(row.id)</span><br><span class="line">    formModel.value = res.data.data</span><br><span class="line">    // 图片需要单独处理回显</span><br><span class="line">    imgUrl.value = baseURL + formModel.value.cover_img</span><br><span class="line">    // 注意：提交给后台，需要的数据格式，是file对象格式</span><br><span class="line">    // 需要将网络图片地址 =&gt; 转换成 file对象，存储起来, 将来便于提交</span><br><span class="line">    const file = await imageUrlToFileObject(imgUrl.value, formModel.value.cover_img)</span><br><span class="line">    formModel.value.cover_img = file</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    formModel.value = &#123; ...defaultForm &#125; // 基于默认的数据，重置form数据</span><br><span class="line">    // 这里重置了表单的数据，但是图片上传img地址，富文本编辑器内容 =&gt; 需要手动重置</span><br><span class="line">    imgUrl.value = &#x27;&#x27;</span><br><span class="line">    editorRef.value.setHTML(&#x27;&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将网络图片地址转换为 File 对象的函数</span><br><span class="line">async function imageUrlToFileObject(imageUrl, filename) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // 使用 Axios 下载图片数据</span><br><span class="line">    const response = await axios.get(imageUrl, &#123; responseType: &#x27;arraybuffer&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">    // 将下载的数据转换成 Blob 对象</span><br><span class="line">    const blob = new Blob([response.data], &#123;</span><br><span class="line">      type: response.headers[&#x27;content-type&#x27;]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 创建 File 对象</span><br><span class="line">    const file = new File([blob], filename, &#123;</span><br><span class="line">      type: response.headers[&#x27;content-type&#x27;]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return file</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&#x27;Error converting image URL to File object:&#x27;, error)</span><br><span class="line">    return null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  open</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-drawer</span><br><span class="line">    v-model=&quot;visibleDrawer&quot;</span><br><span class="line">    :title=&quot;formModel.id ? &#x27;编辑文章&#x27; : &#x27;添加文章&#x27;&quot;</span><br><span class="line">    direction=&quot;rtl&quot;</span><br><span class="line">    size=&quot;50%&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 发表文章表单 --&gt;</span><br><span class="line">    &lt;el-form :model=&quot;formModel&quot; ref=&quot;formRef&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;文章标题&quot; prop=&quot;title&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;formModel.title&quot; placeholder=&quot;请输入标题&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;文章分类&quot; prop=&quot;cate_id&quot;&gt;</span><br><span class="line">        &lt;channel-select v-model=&quot;formModel.cate_id&quot; width=&quot;100%&quot;&gt;&lt;/channel-select&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;文章封面&quot; prop=&quot;cover_img&quot;&gt;</span><br><span class="line">        &lt;!-- 此处需要关闭 element-plus 的自动上传，不需要配置 action 等参数</span><br><span class="line">             只需要做前端的本地预览图片即可，无需在提交前上传图标</span><br><span class="line">             语法：URL.createObjectURL(...) 创建本地预览的地址，来预览</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;el-upload</span><br><span class="line">          class=&quot;avatar-uploader&quot;</span><br><span class="line">          :show-file-list=&quot;false&quot;</span><br><span class="line">          :auto-upload=&quot;false&quot;</span><br><span class="line">          :on-change=&quot;onSelectFile&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;img v-if=&quot;imgUrl&quot; :src=&quot;imgUrl&quot; class=&quot;avatar&quot; /&gt;</span><br><span class="line">          &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt;&lt;Plus /&gt;&lt;/el-icon&gt;</span><br><span class="line">        &lt;/el-upload&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;文章内容&quot; prop=&quot;content&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;editor&quot;&gt;</span><br><span class="line">          &lt;!-- v-model 双向绑定数据 --&gt;</span><br><span class="line">          &lt;!-- content-type 设置文本格式 --&gt;</span><br><span class="line">          &lt;quill-editor</span><br><span class="line">            ref=&quot;editorRef&quot;</span><br><span class="line">            v-model:content=&quot;formModel.content&quot;</span><br><span class="line">            content-type=&quot;html&quot;</span><br><span class="line">            theme=&quot;snow&quot;</span><br><span class="line">          &gt;&lt;/quill-editor&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button @click=&quot;onPublish(&#x27;已发布&#x27;)&quot; type=&quot;primary&quot;&gt;发布&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button @click=&quot;onPublish(&#x27;草稿&#x27;)&quot; type=&quot;info&quot;&gt;草稿&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/el-drawer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">// 图片上传功能美化</span><br><span class="line">.avatar-uploader &#123;</span><br><span class="line">  :deep() &#123;</span><br><span class="line">    .avatar &#123;</span><br><span class="line">      width: 178px;</span><br><span class="line">      height: 178px;</span><br><span class="line">      display: block;</span><br><span class="line">    &#125;</span><br><span class="line">    .el-upload &#123;</span><br><span class="line">      border: 1px dashed var(--el-border-color);</span><br><span class="line">      border-radius: 6px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      position: relative;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      transition: var(--el-transition-duration-fast);</span><br><span class="line">    &#125;</span><br><span class="line">    .el-upload:hover &#123;</span><br><span class="line">      border-color: var(--el-color-primary);</span><br><span class="line">    &#125;</span><br><span class="line">    .el-icon.avatar-uploader-icon &#123;</span><br><span class="line">      font-size: 28px;</span><br><span class="line">      color: #8c939d;</span><br><span class="line">      width: 178px;</span><br><span class="line">      height: 178px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 富文本编辑器功能美化</span><br><span class="line">.editor &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  :deep(.ql-editor) &#123;</span><br><span class="line">    min-height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="7-9-2-5-创建-views-article-ArticleManage-vue"><a href="#7-9-2-5-创建-views-article-ArticleManage-vue" class="headerlink" title="7-9-2-5 创建 views &#x2F; article &#x2F; ArticleManage.vue"></a>7-9-2-5 创建 views &#x2F; article &#x2F; ArticleManage.vue</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; Delete, Edit &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import ChannelSelect from &#x27;./components/ChannelSelect.vue&#x27;</span><br><span class="line">import ArticleEdit from &#x27;./components/ArticleEdit.vue&#x27;</span><br><span class="line">import &#123; artGetListService, artDelService &#125; from &#x27;@/api/article.js&#x27;</span><br><span class="line">import &#123; formatTime &#125; from &#x27;@/utils/format.js&#x27;</span><br><span class="line">const articleList = ref([]) // 文章列表</span><br><span class="line">const total = ref(0) // 总条数</span><br><span class="line">const loading = ref(false) // loading状态</span><br><span class="line"></span><br><span class="line">// 定义请求参数对象</span><br><span class="line">const params = ref(&#123;</span><br><span class="line">  pagenum: 1, // 当前页</span><br><span class="line">  pagesize: 5, // 当前生效的每页条数</span><br><span class="line">  cate_id: &#x27;&#x27;,</span><br><span class="line">  state: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 基于params参数，获取文章列表</span><br><span class="line">const getArticleList = async () =&gt; &#123;</span><br><span class="line">  loading.value = true</span><br><span class="line"></span><br><span class="line">  const res = await artGetListService(params.value)</span><br><span class="line">  articleList.value = res.data.data</span><br><span class="line">  total.value = res.data.total</span><br><span class="line"></span><br><span class="line">  loading.value = false</span><br><span class="line">&#125;</span><br><span class="line">getArticleList()</span><br><span class="line"></span><br><span class="line">// 处理分页逻辑</span><br><span class="line">const onSizeChange = (size) =&gt; &#123;</span><br><span class="line">  // console.log(&#x27;当前每页条数&#x27;, size)</span><br><span class="line">  // 只要是每页条数变化了，那么原本正在访问的当前页意义不大了，数据大概率已经不在原来那一页了</span><br><span class="line">  // 重新从第一页渲染即可</span><br><span class="line">  params.value.pagenum = 1</span><br><span class="line">  params.value.pagesize = size</span><br><span class="line">  // 基于最新的当前页 和 每页条数，渲染数据</span><br><span class="line">  getArticleList()</span><br><span class="line">&#125;</span><br><span class="line">const onCurrentChange = (page) =&gt; &#123;</span><br><span class="line">  // 更新当前页</span><br><span class="line">  params.value.pagenum = page</span><br><span class="line">  // 基于最新的当前页，渲染数据</span><br><span class="line">  getArticleList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 搜索逻辑 =&gt; 按照最新的条件，重新检索，从第一页开始展示</span><br><span class="line">const onSearch = () =&gt; &#123;</span><br><span class="line">  params.value.pagenum = 1 // 重置页面</span><br><span class="line">  getArticleList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 重置逻辑 =&gt; 将筛选条件清空，重新检索，从第一页开始展示</span><br><span class="line">const onReset = () =&gt; &#123;</span><br><span class="line">  params.value.pagenum = 1 // 重置页面</span><br><span class="line">  params.value.cate_id = &#x27;&#x27;</span><br><span class="line">  params.value.state = &#x27;&#x27;</span><br><span class="line">  getArticleList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const articleEditRef = ref()</span><br><span class="line">// 添加逻辑</span><br><span class="line">const onAddArticle = () =&gt; &#123;</span><br><span class="line">  articleEditRef.value.open(&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 编辑逻辑</span><br><span class="line">const onEditArticle = (row) =&gt; &#123;</span><br><span class="line">  articleEditRef.value.open(row)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除逻辑</span><br><span class="line">const onDeleteArticle = async (row) =&gt; &#123;</span><br><span class="line">  // 提示用户是否要删除</span><br><span class="line">  await ElMessageBox.confirm(&#x27;此操作将永久删除该文件, 是否继续?&#x27;, &#x27;提示&#x27;, &#123;</span><br><span class="line">    confirmButtonText: &#x27;确定&#x27;,</span><br><span class="line">    cancelButtonText: &#x27;取消&#x27;,</span><br><span class="line">    type: &#x27;warning&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  await artDelService(row.id)</span><br><span class="line">  ElMessage.success(&#x27;删除成功&#x27;)</span><br><span class="line">  // 重新渲染列表</span><br><span class="line">  getArticleList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 添加或者编辑 成功的回调</span><br><span class="line">const onSuccess = (type) =&gt; &#123;</span><br><span class="line">  if (type === &#x27;add&#x27;) &#123;</span><br><span class="line">    // 如果是添加，最好渲染最后一页</span><br><span class="line">    // 向上取整</span><br><span class="line">    const lastPage = Math.ceil((total.value + 1) / params.value.pagesize)</span><br><span class="line">    // 更新成最大页码数，再渲染</span><br><span class="line">    params.value.pagenum = lastPage</span><br><span class="line">  &#125;</span><br><span class="line">  getArticleList()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;page-container title=&quot;文章管理&quot;&gt;</span><br><span class="line">    &lt;template #extra&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;onAddArticle&quot;&gt;添加文章&lt;/el-button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 表单区域 --&gt;</span><br><span class="line">    &lt;el-form inline&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;文章分类:&quot;&gt;</span><br><span class="line">        &lt;!-- Vue2 =&gt; v-model :value 和 @input 的简写 --&gt;</span><br><span class="line">        &lt;!-- Vue3 =&gt; v-model :modelValue 和 @update:modelValue 的简写 --&gt;</span><br><span class="line">        &lt;channel-select v-model=&quot;params.cate_id&quot;&gt;&lt;/channel-select&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Vue3 =&gt; v-model:cid  :cid 和 @update:cid 的简写 --&gt;</span><br><span class="line">        &lt;!-- &lt;channel-select v-model:cid=&quot;params.cate_id&quot;&gt;&lt;/channel-select&gt; --&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;发布状态:&quot;&gt;</span><br><span class="line">        &lt;!-- 这里后台标记发布状态，就是通过中文标记的，已发布 / 草稿 --&gt;</span><br><span class="line">        &lt;el-select v-model=&quot;params.state&quot;&gt;</span><br><span class="line">          &lt;el-option label=&quot;已发布&quot; value=&quot;已发布&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">          &lt;el-option label=&quot;草稿&quot; value=&quot;草稿&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button @click=&quot;onSearch&quot; type=&quot;primary&quot;&gt;搜索&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button @click=&quot;onReset&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 表格区域 --&gt;</span><br><span class="line">    &lt;el-table :data=&quot;articleList&quot; v-loading=&quot;loading&quot;&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;文章标题&quot; prop=&quot;title&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;primary&quot; :underline=&quot;false&quot;&gt;&#123;&#123; row.title &#125;&#125;&lt;/el-link&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;分类&quot; prop=&quot;cate_name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;发表时间&quot; prop=&quot;pub_date&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">          &#123;&#123; formatTime(row.pub_date) &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;状态&quot; prop=&quot;state&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 利用作用域插槽 row 可以获取当前行的数据 =&gt; v-for 遍历 item --&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            circle</span><br><span class="line">            plain</span><br><span class="line">            type=&quot;primary&quot;</span><br><span class="line">            :icon=&quot;Edit&quot;</span><br><span class="line">            @click=&quot;onEditArticle(row)&quot;</span><br><span class="line">          &gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            circle</span><br><span class="line">            plain</span><br><span class="line">            type=&quot;danger&quot;</span><br><span class="line">            :icon=&quot;Delete&quot;</span><br><span class="line">            @click=&quot;onDeleteArticle(row)&quot;</span><br><span class="line">          &gt;&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 分页区域 --&gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">      v-model:current-page=&quot;params.pagenum&quot;</span><br><span class="line">      v-model:page-size=&quot;params.pagesize&quot;</span><br><span class="line">      :page-sizes=&quot;[2, 3, 5, 10]&quot;</span><br><span class="line">      :background=&quot;true&quot;</span><br><span class="line">      layout=&quot;jumper, total, sizes, prev, pager, next&quot;</span><br><span class="line">      :total=&quot;total&quot;</span><br><span class="line">      @size-change=&quot;onSizeChange&quot;</span><br><span class="line">      @current-change=&quot;onCurrentChange&quot;</span><br><span class="line">      style=&quot;margin-top: 20px; justify-content: flex-end&quot;</span><br><span class="line">    /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 添加编辑的抽屉 --&gt;</span><br><span class="line">    &lt;article-edit ref=&quot;articleEditRef&quot; @success=&quot;onSuccess&quot;&gt;&lt;/article-edit&gt;</span><br><span class="line">  &lt;/page-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="7-9-2-6-创建-api-article-js"><a href="#7-9-2-6-创建-api-article-js" class="headerlink" title="7-9-2-6 创建 api &#x2F; article.js"></a>7-9-2-6 创建 api &#x2F; article.js</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章：获取文章列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artGetListService</span> = (<span class="params">params</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">get</span>(<span class="string">&#x27;/my/article/list&#x27;</span>, &#123;</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章：添加文章</span></span><br><span class="line"><span class="comment">// 注意：data需要是一个formData格式的对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artPublishService</span> = (<span class="params">data</span>) =&gt; request.<span class="title function_">post</span>(<span class="string">&#x27;/my/article/add&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章：获取文章详情</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artGetDetailService</span> = (<span class="params">id</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">get</span>(<span class="string">&#x27;/my/article/info&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123; id &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章：编辑文章接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artEditService</span> = (<span class="params">data</span>) =&gt; request.<span class="title function_">put</span>(<span class="string">&#x27;/my/article/info&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章：删除文章接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artDelService</span> = (<span class="params">id</span>) =&gt; request.<span class="title function_">delete</span>(<span class="string">&#x27;/my/article/info&#x27;</span>, &#123; <span class="attr">params</span>: &#123; id &#125; &#125;)</span><br></pre></td></tr></table></figure></div>

<h1 id="8-AI"><a href="#8-AI" class="headerlink" title="8- AI"></a>8- AI</h1><h2 id="8-1-ChatGPT-Copilot"><a href="#8-1-ChatGPT-Copilot" class="headerlink" title="8-1 ChatGPT &amp; Copilot"></a>8-1 ChatGPT &amp; Copilot</h2><h3 id="8-1-1-优化Prompt"><a href="#8-1-1-优化Prompt" class="headerlink" title="8-1-1 优化Prompt"></a>8-1-1 优化Prompt</h3><p>明确提问：</p>
<ul>
<li>确保问题表述清晰明确，关键字的准确度，决定了AI对于需求的理解。</li>
</ul>
<p>细化需求：</p>
<ul>
<li>将问题拆分成多个小问题，可以帮助AI更具针对性地回答，也利于即时纠错。</li>
</ul>
<p>添加背景信息：</p>
<ul>
<li>提供有关问题背景的详细信息，也可以给AI预设一个角色，将有助于AI生成更具深度和价值的回答。</li>
</ul>
<p>适当引导：</p>
<ul>
<li>比如：“例如”、“请注意”、“请使用“等，来告诉模型你期望它 做什么 或者 不做什么。</li>
</ul>
<p>限制范围：</p>
<ul>
<li>通过限定回答的范围和长度，可以引导AI生成更精炼的回答。</li>
</ul>
<h3 id="8-1-2-工具-Github-Copilot-智能生成代码的使用"><a href="#8-1-2-工具-Github-Copilot-智能生成代码的使用" class="headerlink" title="8-1-2 工具 Github Copilot 智能生成代码的使用"></a>8-1-2 工具 Github Copilot 智能生成代码的使用</h3><p>安装步骤：</p>
<ul>
<li>登录 github，试用 Copilot。</li>
<li>打开 vscode，搜索并安装插件Copilot。</li>
</ul>
<p>使用说明：</p>
<ul>
<li>删除键：不接受</li>
<li>Tab键：接收</li>
<li>Ctrl+ enter：查看更多方案</li>
</ul>
<h2 id="8-2-实战"><a href="#8-2-实战" class="headerlink" title="8-2 实战"></a>8-2 实战</h2><h3 id="8-2-1-个人中心-基本资料"><a href="#8-2-1-个人中心-基本资料" class="headerlink" title="8-2-1 个人中心 - 基本资料"></a>8-2-1 个人中心 - 基本资料</h3><p>chatgpt prompt 提示词参考</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">请基于elementPlus 和 Vue3 的语法，生成组件代码</span><br><span class="line">要求:</span><br><span class="line"></span><br><span class="line">一、表单结构要求</span><br><span class="line">1.组件中包含一个e1-form表单，有四行内容，前三行是输入框，第四行是按钮</span><br><span class="line">2.第一行 1abel 登录名称，输入框禁用不可输入状态</span><br><span class="line">3.第二行 1abel 用户呢称，输入框可输入</span><br><span class="line">4.第三行 1abel 用户邮箱，输入框可输入</span><br><span class="line">5.第四行按钮，提交修改</span><br><span class="line"></span><br><span class="line">二、校验需求</span><br><span class="line">给 昵称和邮箱 校验</span><br><span class="line">1. 昵称 nickname 必须是2-10位的非空字符串</span><br><span class="line">2.邮箱 email 符合邮箱格式即可，且不能为空</span><br></pre></td></tr></table></figure></div>

<p>项目代码</p>
<p>api &#x2F; user.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新用户基本信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userUpdateInfoService</span> = (<span class="params">&#123; id, nickname, email &#125;</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">put</span>(<span class="string">&#x27;/my/userinfo&#x27;</span>, &#123; id, nickname, email &#125;)</span><br></pre></td></tr></table></figure></div>

<p>views &#x2F; user &#x2F; UserProfile.vue</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import PageContainer from &#x27;@/components/PageContainer.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;@/stores&#x27;</span><br><span class="line">import &#123; userUpdateInfoService &#125; from &#x27;@/api/user&#x27;</span><br><span class="line"></span><br><span class="line">const formRef = ref()</span><br><span class="line"></span><br><span class="line">// 是在使用仓库中数据的初始值 (无需响应式) 解构无问题</span><br><span class="line">const &#123;</span><br><span class="line">  user: &#123; email, id, nickname, username &#125;,</span><br><span class="line">  getUser</span><br><span class="line">&#125; = useUserStore()</span><br><span class="line"></span><br><span class="line">const form = ref(&#123;</span><br><span class="line">  id,</span><br><span class="line">  username,</span><br><span class="line">  nickname,</span><br><span class="line">  email</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const rules = ref(&#123;</span><br><span class="line">  nickname: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入用户昵称&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      pattern: /^\S&#123;2,10&#125;/,</span><br><span class="line">      message: &#x27;昵称长度在2-10个非空字符&#x27;,</span><br><span class="line">      trigger: &#x27;blur&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  email: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入用户邮箱&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: &#x27;email&#x27;,</span><br><span class="line">      message: &#x27;请输入正确的邮箱格式&#x27;,</span><br><span class="line">      trigger: [&#x27;blur&#x27;, &#x27;change&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const submitForm = async () =&gt; &#123;</span><br><span class="line">  // 等待校验结果</span><br><span class="line">  await formRef.value.validate()</span><br><span class="line">  // 提交修改</span><br><span class="line">  await userUpdateInfoService(form.value)</span><br><span class="line">  // 通知 user 模块，进行数据的更新</span><br><span class="line">  getUser()</span><br><span class="line">  // 提示用户</span><br><span class="line">  ElMessage.success(&#x27;修改成功&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;page-container title=&quot;基本资料&quot;&gt;</span><br><span class="line">    &lt;!-- 表单部分 --&gt;</span><br><span class="line">    &lt;el-form ref=&quot;formRef&quot; :model=&quot;form&quot; :rules=&quot;rules&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;登录名称&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.username&quot; disabled&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;用户昵称&quot; prop=&quot;nickname&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.nickname&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;用户邮箱&quot; prop=&quot;email&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.email&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm&quot;&gt;提交修改&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/page-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-2-2-个人中心-更换头像"><a href="#8-2-2-个人中心-更换头像" class="headerlink" title="8-2-2 个人中心 - 更换头像"></a>8-2-2 个人中心 - 更换头像</h3><p>项目代码</p>
<p>api &#x2F; user.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新用户头像</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userUpdateAvatarService</span> = (<span class="params">avatar</span>) =&gt; request.<span class="title function_">patch</span>(<span class="string">&#x27;/my/update/avatar&#x27;</span>, &#123; avatar &#125;)</span><br></pre></td></tr></table></figure></div>

<p>views &#x2F; user &#x2F; UserAvatar.vue</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; Plus, Upload &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;@/stores&#x27;</span><br><span class="line">import &#123; userUpdateAvatarService &#125; from &#x27;@/api/user&#x27;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const imgUrl = ref(userStore.user.user_pic)</span><br><span class="line">const uploadRef = ref()</span><br><span class="line">const onSelectFile = (uploadFile) =&gt; &#123;</span><br><span class="line">  // 基于 FileReader 读取图片做预览</span><br><span class="line">  const reader = new FileReader()</span><br><span class="line">  reader.readAsDataURL(uploadFile.raw)</span><br><span class="line">  reader.onload = () =&gt; &#123;</span><br><span class="line">    imgUrl.value = reader.result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const onUpdateAvatar = async () =&gt; &#123;</span><br><span class="line">  // 发送请求更新头像</span><br><span class="line">  await userUpdateAvatarService(imgUrl.value)</span><br><span class="line">  // userStore 重新渲染</span><br><span class="line">  await userStore.getUser()</span><br><span class="line">  // 提示用户</span><br><span class="line">  ElMessage.success(&#x27;头像更新成功&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;page-container title=&quot;更换头像&quot;&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=&quot;uploadRef&quot;</span><br><span class="line">      :auto-upload=&quot;false&quot;</span><br><span class="line">      class=&quot;avatar-uploader&quot;</span><br><span class="line">      :show-file-list=&quot;false&quot;</span><br><span class="line">      :on-change=&quot;onSelectFile&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;img v-if=&quot;imgUrl&quot; :src=&quot;imgUrl&quot; class=&quot;avatar&quot; /&gt;</span><br><span class="line">      &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt;&lt;Plus /&gt;&lt;/el-icon&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button</span><br><span class="line">      @click=&quot;uploadRef.$el.querySelector(&#x27;input&#x27;).click()&quot;</span><br><span class="line">      type=&quot;primary&quot;</span><br><span class="line">      :icon=&quot;Plus&quot;</span><br><span class="line">      size=&quot;large&quot;</span><br><span class="line">      &gt;选择图片&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;el-button</span><br><span class="line">      @click=&quot;onUpdateAvatar&quot;</span><br><span class="line">      type=&quot;success&quot;</span><br><span class="line">      :icon=&quot;Upload&quot;</span><br><span class="line">      size=&quot;large&quot;</span><br><span class="line">      &gt;上传头像&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/page-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.avatar-uploader &#123;</span><br><span class="line">  :deep() &#123;</span><br><span class="line">    .avatar &#123;</span><br><span class="line">      width: 278px;</span><br><span class="line">      height: 278px;</span><br><span class="line">      display: block;</span><br><span class="line">    &#125;</span><br><span class="line">    .el-upload &#123;</span><br><span class="line">      border: 1px dashed var(--el-border-color);</span><br><span class="line">      border-radius: 6px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      position: relative;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      transition: var(--el-transition-duration-fast);</span><br><span class="line">    &#125;</span><br><span class="line">    .el-upload:hover &#123;</span><br><span class="line">      border-color: var(--el-color-primary);</span><br><span class="line">    &#125;</span><br><span class="line">    .el-icon.avatar-uploader-icon &#123;</span><br><span class="line">      font-size: 28px;</span><br><span class="line">      color: #8c939d;</span><br><span class="line">      width: 278px;</span><br><span class="line">      height: 278px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-2-3-个人中心-重置密码"><a href="#8-2-3-个人中心-重置密码" class="headerlink" title="8-2-3 个人中心 - 重置密码"></a>8-2-3 个人中心 - 重置密码</h3><p>chatgpt prompt 提示词参考</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">请基于 elementPlus 和Vue3 的语法，生成组件代码要求:</span><br><span class="line">一、表单结构要求</span><br><span class="line">1.组件中包含一个e1-form表单，有四行内容，前三行是表单输入框，第四行是两个按钮</span><br><span class="line">2.第一行 1abel 原密码</span><br><span class="line">3.第二行 label 新密码</span><br><span class="line">4.第三行 1abel 确认密码</span><br><span class="line">5.第四行两个按钮，修改密码和重置</span><br><span class="line"></span><br><span class="line">二、form绑定字段如下:</span><br><span class="line">const pwdForm = ref(&#123;</span><br><span class="line">	old_pwd:&#x27;&#x27;,</span><br><span class="line">	new_pwd:&#x27;&#x27;,</span><br><span class="line">	re_pwd:&#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">三、校验需求</span><br><span class="line">所有字段，都是6-15位 非空</span><br><span class="line">自定义校验1:原密码和新密码不能一样</span><br><span class="line">自定义校验2:新密码和确认密码必须一样</span><br></pre></td></tr></table></figure></div>

<p>项目代码</p>
<p>api &#x2F; user.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新用户密码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userUpdatePasswordService</span> = (<span class="params">&#123; old_pwd, new_pwd, re_pwd &#125;</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">patch</span>(<span class="string">&#x27;/my/updatepwd&#x27;</span>, &#123; old_pwd, new_pwd, re_pwd &#125;)</span><br></pre></td></tr></table></figure></div>

<p>views &#x2F; user &#x2F; UserPassword.vue</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; userUpdatePasswordService &#125; from &#x27;@/api/user&#x27;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;@/stores&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">const formRef = ref()</span><br><span class="line">const pwdForm = ref(&#123;</span><br><span class="line">  old_pwd: &#x27;&#x27;,</span><br><span class="line">  new_pwd: &#x27;&#x27;,</span><br><span class="line">  re_pwd: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const checkDifferent = (rule, value, callback) =&gt; &#123;</span><br><span class="line">  // 校验新密码和原密码不能一样</span><br><span class="line">  if (value === pwdForm.value.old_pwd) &#123;</span><br><span class="line">    callback(new Error(&#x27;新密码不能与原密码一样&#x27;))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const checkSameAsNewPwd = (rule, value, callback) =&gt; &#123;</span><br><span class="line">  // 校验确认密码必须和新密码一样</span><br><span class="line">  if (value !== pwdForm.value.new_pwd) &#123;</span><br><span class="line">    callback(new Error(&#x27;确认密码必须和新密码一样&#x27;))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const rules = ref(&#123;</span><br><span class="line">  old_pwd: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入原密码&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; min: 6, max: 15, message: &#x27;原密码长度在6-15位之间&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  new_pwd: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入新密码&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; min: 6, max: 15, message: &#x27;新密码长度在6-15位之间&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; validator: checkDifferent, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  re_pwd: [</span><br><span class="line">    &#123; required: true, message: &#x27;请再次输入新密码&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; min: 6, max: 15, message: &#x27;确认密码长度在6-15位之间&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; validator: checkSameAsNewPwd, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const router = useRouter()</span><br><span class="line"></span><br><span class="line">const submitForm = async () =&gt; &#123;</span><br><span class="line">  await formRef.value.validate()</span><br><span class="line">  await userUpdatePasswordService(pwdForm.value)</span><br><span class="line">  ElMessage.success(&#x27;密码修改成功&#x27;)</span><br><span class="line"></span><br><span class="line">  // 密码修改成功后，退出重新登录</span><br><span class="line">  // 清空本地存储的 token 和 个人信息</span><br><span class="line">  userStore.setToken(&#x27;&#x27;)</span><br><span class="line">  userStore.setUser(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  // 拦截登录</span><br><span class="line">  router.push(&#x27;/login&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const resetForm = () =&gt; &#123;</span><br><span class="line">  formRef.value.resetFields()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;page-container title=&quot;修改密码&quot;&gt;</span><br><span class="line">    &lt;el-row&gt;</span><br><span class="line">      &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">        &lt;el-form</span><br><span class="line">          ref=&quot;formRef&quot;</span><br><span class="line">          :model=&quot;pwdForm&quot;</span><br><span class="line">          :rules=&quot;rules&quot;</span><br><span class="line">          label-width=&quot;100px&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;el-form-item label=&quot;原密码&quot; prop=&quot;old_pwd&quot;&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;pwdForm.old_pwd&quot; show-password&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;新密码&quot; prop=&quot;new_pwd&quot;&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;pwdForm.new_pwd&quot; show-password&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;re_pwd&quot;&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;pwdForm.re_pwd&quot; show-password&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item&gt;</span><br><span class="line">            &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm&quot;&gt;修改密码&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button @click=&quot;resetForm&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-form&gt;&lt;/el-col</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/page-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Web</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>自研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机原理及应用</title>
    <url>/2024/02/26/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-认识单片机"><a href="#1-认识单片机" class="headerlink" title="1- 认识单片机"></a>1- 认识单片机</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1-1 介绍"></a>1-1 介绍</h2><h3 id="1-1-1-系统"><a href="#1-1-1-系统" class="headerlink" title="1-1-1 系统"></a>1-1-1 系统</h3><p>最小系统：单片机</p>
<ul>
<li>处理器内核(CPU)</li>
<li>存储器</li>
<li>I&#x2F;O控制电路</li>
</ul>
<p>扩展系统：单片机</p>
<ul>
<li>处理器内核(CPU)</li>
<li>存储器</li>
<li>I&#x2F;O控制电路</li>
<li>中断单元</li>
<li>定时单元</li>
<li>AD单元</li>
</ul>
<h3 id="1-1-2-特点和用途"><a href="#1-1-2-特点和用途" class="headerlink" title="1-1-2 特点和用途"></a>1-1-2 特点和用途</h3><p>特点：</p>
<ul>
<li>集成度高、体积小、功耗低、控制性强、易扩展、环境适应能力强</li>
</ul>
<p>用途：</p>
<ul>
<li>智能仪表、工业控制、民用及医疗等方面</li>
</ul>
<h3 id="1-1-3-容易混淆的名字"><a href="#1-1-3-容易混淆的名字" class="headerlink" title="1-1-3 容易混淆的名字"></a>1-1-3 容易混淆的名字</h3><p>51单片机：</p>
<ul>
<li>所有兼容MCS-51指令系统的单片机的总称。</li>
</ul>
<p>MCS-51单片机：</p>
<ul>
<li>INTEL生产的一系列内核兼容的单片机的总称。</li>
</ul>
<p>8051单片机：</p>
<ul>
<li>MCS-51中的一种基本类型</li>
</ul>
<h3 id="1-1-4-系列机"><a href="#1-1-4-系列机" class="headerlink" title="1-1-4 系列机"></a>1-1-4 系列机</h3><p>把4KROM换为EEPROM就是8751的结构，如去掉ROM&#x2F;EEPROM部分即为8031，如果将ROM置换为FLASH存贮器或EEPROM，或再省去某些I&#x2F;O，即可得到51系列的派生品种，如89C51、AT89C2051等单片机。</p>
<h3 id="1-1-5-MCS-51单片机的内部总体结构"><a href="#1-1-5-MCS-51单片机的内部总体结构" class="headerlink" title="1-1-5 MCS-51单片机的内部总体结构"></a>1-1-5 MCS-51单片机的内部总体结构</h3><p>8位CPU、片内振荡器、4K字节ROM、128字节RAM、21个特殊功能寄存器32根I&#x2F;O线、可寻址的64K字节外部数据、程序存贮空间、2个16位定时器计数器中断结构：具有二个优先级、五个中断源、一个全双工串行口、位寻址（即可寻找某位的内容）功能，适于按位进行逻辑运算的位处理器。除128字节RAM、4K字节ROM和中断、串行口及定时器模块外，还有4组I&#x2F;O日P0~P3，余下的就是CPU的全部组成。</p>
<h3 id="1-1-6-单片机内部三大资源"><a href="#1-1-6-单片机内部三大资源" class="headerlink" title="1-1-6 单片机内部三大资源"></a>1-1-6 单片机内部三大资源</h3><p>SFR（特殊功能寄存器）</p>
<p>RAM（内存）（速度快，无限次擦写）</p>
<p>FLASH（程序存储空间&lt; ROM &gt;重复擦写10万次以上）</p>
<h3 id="1-1-7-LED发光二极管"><a href="#1-1-7-LED发光二极管" class="headerlink" title="1-1-7 LED发光二极管"></a>1-1-7 LED发光二极管</h3><p>通常红色贴片LED：靠电流驱动，电压1.8V~2.2V，电流1到20MA；在1到5MA亮度有所变化，5MA以上亮度基本无变化。</p>
<h2 id="1-2-MCS-51单片机的工作原理初识"><a href="#1-2-MCS-51单片机的工作原理初识" class="headerlink" title="1-2 MCS-51单片机的工作原理初识"></a>1-2 MCS-51单片机的工作原理初识</h2><h3 id="1-2-1-CC2530-实物及相应套件"><a href="#1-2-1-CC2530-实物及相应套件" class="headerlink" title="1-2-1 CC2530 实物及相应套件"></a>1-2-1 CC2530 实物及相应套件</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318110910571.png"
                      alt="image-20240318110910571"
                ></li>
</ul>
<h3 id="1-2-2-CC2530-单片机节点底板"><a href="#1-2-2-CC2530-单片机节点底板" class="headerlink" title="1-2-2 CC2530 单片机节点底板"></a>1-2-2 CC2530 单片机节点底板</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318110951541.png"
                      alt="image-20240318110951541"
                ></li>
</ul>
<h3 id="1-2-3-图式"><a href="#1-2-3-图式" class="headerlink" title="1-2-3 图式"></a>1-2-3 图式</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318111058565.png"
                      alt="image-20240318111058565"
                ></li>
</ul>
<h3 id="1-2-4-CPU"><a href="#1-2-4-CPU" class="headerlink" title="1-2-4 CPU"></a>1-2-4 CPU</h3><p>内部包含 “运算器” 和 “控制器” 两大部件。</p>
<p>运算器负责执行“指令。这里的指令是机器语言，是由“0”和“1”组成的二进制数据。</p>
<p>控制器负责从存储器读取指令，将指令译码成机器语言送到运算器去运行，还要负责暂存运算过程中的中间结果等。</p>
<p>通常所说的单片机的内核，就是指单片机内部的CPU。</p>
<h3 id="1-2-5-时钟源-时钟电路"><a href="#1-2-5-时钟源-时钟电路" class="headerlink" title="1-2-5 时钟源 &lt;–&gt; 时钟电路"></a>1-2-5 时钟源 &lt;–&gt; 时钟电路</h3><p>石英晶体振荡器可以作为时钟源提供振荡频率，也叫晶振。</p>
<p>晶振与时钟电路结合，可以为CPU提供工作“节奏”，也叫CPU的主频。</p>
<p>CPU的主频越高，处理指令的速度越快。</p>
<h3 id="1-2-6-SFR和RAM"><a href="#1-2-6-SFR和RAM" class="headerlink" title="1-2-6 SFR和RAM"></a>1-2-6 SFR和RAM</h3><p>SFR和RAM整体是一块存储器。</p>
<p>SFR是RAM中的特定区域。</p>
<p>容量较大，64KB及以上。</p>
<h3 id="1-2-7-ROM"><a href="#1-2-7-ROM" class="headerlink" title="1-2-7 ROM"></a>1-2-7 ROM</h3><p>这里存放了很重要的系统指令。</p>
<p>单片机通电后，CPU首先从这里获取第一条需要执行的指令。</p>
<p>一般容量都不大，4KB。</p>
<p>通过JTAG接口将指令写入。</p>
<p>也叫程序存储器。</p>
<h3 id="1-2-8-存储单元"><a href="#1-2-8-存储单元" class="headerlink" title="1-2-8 存储单元"></a>1-2-8 存储单元</h3><p>在存储器中，数据是以8个二进制位为一个存储单元的，一个存储单元也叫一个字节，用B表示。8bit &#x3D; 1B。</p>
<h3 id="1-2-9-存储单元的地址"><a href="#1-2-9-存储单元的地址" class="headerlink" title="1-2-9 存储单元的地址"></a>1-2-9 存储单元的地址</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318112136291.png"
                      alt="image-20240318112136291"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318112159614.png"
                      alt="image-20240318112159614"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318112243225.png"
                      alt="image-20240318112243225"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318112310710.png"
                      alt="image-20240318112310710"
                ></li>
</ul>
<h1 id="2-GPIO"><a href="#2-GPIO" class="headerlink" title="2- GPIO"></a>2- GPIO</h1><h2 id="2-1-单片机中的GPIO"><a href="#2-1-单片机中的GPIO" class="headerlink" title="2-1 单片机中的GPIO"></a>2-1 单片机中的GPIO</h2><h3 id="2-1-1-图式"><a href="#2-1-1-图式" class="headerlink" title="2-1-1 图式"></a>2-1-1 图式</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318082108375.png"
                      alt="image-20240318082108375"
                ></li>
</ul>
<h3 id="2-1-2-介绍"><a href="#2-1-2-介绍" class="headerlink" title="2-1-2 介绍"></a>2-1-2 介绍</h3><p>GPIO (General-purpose input&#x2F;output)，中文直译为 ”通用IO“，是CPU与外部设备之间进行数据交互的通道。</p>
<p>GPIO中包含若干个pin (中文翻译为 “管脚”)。</p>
<p>这些pin可以是只连接一个外部设备的专用管脚，也可以是同时连接多个设备的复用管脚 (通过相应的控制器和软件代码来设置该pin当前为哪一个设备服务)。</p>
<ul>
<li><p>CPU可以通过GPIO向外部设备 “输出” 控制信号，这种情况下控制信号的方向是 “CPU→外设”，因而需要把与之有关的pin通过软件代码设置成 “output“。</p>
</li>
<li><p>外部设备也可以通过GPIO向CPU “输入” 状态信息，这种情况下状态信号的方向是“外设→CPU”，因而需要把与之有关的pin通过软件代码设置成 “input“。</p>
</li>
<li><p>以上两项描述说明 “input” (输入) 以及 “output” (输出) 是从CPU的角度来看待数据流向的。</p>
</li>
</ul>
<h2 id="2-2-CC2530中的GPIO"><a href="#2-2-CC2530中的GPIO" class="headerlink" title="2-2 CC2530中的GPIO"></a>2-2 CC2530中的GPIO</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318083059155.png"
                      alt="image-20240318083059155"
                ></li>
</ul>
<h2 id="2-3-通过SFR设置GPIO"><a href="#2-3-通过SFR设置GPIO" class="headerlink" title="2-3 通过SFR设置GPIO"></a>2-3 通过SFR设置GPIO</h2><h3 id="2-3-1-介绍"><a href="#2-3-1-介绍" class="headerlink" title="2-3-1 介绍"></a>2-3-1 介绍</h3><p>SFR在RAM的特定区域中。</p>
<p>每个SFR都与RAM中的惟一的一个存储单元连接。</p>
<p>存储单元的物理地址难记，不如SFR“见名知意“。</p>
<p>掌握的SFR有：P0、P1、P2、PxSEL和PxDIR(x&#x3D;0,1,2)。</p>
<h3 id="2-3-2-PxSEL"><a href="#2-3-2-PxSEL" class="headerlink" title="2-3-2 PxSEL"></a>2-3-2 PxSEL</h3><p>在CC2530中通过PxSEL(x&#x3D;0，1，2)来对GPIO的pin进行工作模式选择：</p>
<ul>
<li>某个二进制位取值为“0”——对应的pin工作在 “通用IO” 模式下。</li>
<li>某个二进制位取值为“1“——对应的pin工作在 “外设IO” 模式下。</li>
<li>例如：P1SEL &amp;&#x3D; ~0x02;</li>
</ul>
<h3 id="2-3-3-PxDIR"><a href="#2-3-3-PxDIR" class="headerlink" title="2-3-3 PxDIR"></a>2-3-3 PxDIR</h3><p>在CC2530中通过PxDIR(x&#x3D;0，1，2)的数据解释为：</p>
<ul>
<li><p>某个二进制位取值为“0”——对应的pin用作input。</p>
</li>
<li><p>某个二进制位取值为“1”——对应的pin用作output。</p>
</li>
<li><p>例如：P1DIR |&#x3D; 0x02;</p>
</li>
</ul>
<h1 id="3-外部中断"><a href="#3-外部中断" class="headerlink" title="3- 外部中断"></a>3- 外部中断</h1><h2 id="3-1-CPU执行指令的流程"><a href="#3-1-CPU执行指令的流程" class="headerlink" title="3-1 CPU执行指令的流程"></a>3-1 CPU执行指令的流程</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318095419992.png"
                      alt="image-20240318095419992"
                ></li>
</ul>
<h2 id="3-2-外部中断"><a href="#3-2-外部中断" class="headerlink" title="3-2 外部中断"></a>3-2 外部中断</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318095447307.png"
                      alt="image-20240318095447307"
                ></li>
</ul>
<p>中断系统中包含：</p>
<ul>
<li>中断源</li>
<li>中断服务程序</li>
<li>中断向量表</li>
<li>中断嵌套和中断判优机制</li>
<li>中断允许与屏蔽</li>
</ul>
<h3 id="3-2-1-中断源"><a href="#3-2-1-中断源" class="headerlink" title="3-2-1 中断源"></a>3-2-1 中断源</h3><p>也叫中断发生源，是指向CPU提交中断请求的设备，例如刚才说的按键就叫做中断源。</p>
<p>一个中断控制器可以连接多个中断源，就CC2530的中断控制器来说，它可以连接18个不同的中断源。</p>
<h3 id="3-2-2-中断服务程序"><a href="#3-2-2-中断服务程序" class="headerlink" title="3-2-2 中断服务程序"></a>3-2-2 中断服务程序</h3><p>也叫中断服务函数。</p>
<p>当一个中断源向CPU提交了中断请求后，它必定是希望CPU放下手头的工作，去执行它所希望的功能。</p>
<p>我们做为程序开发人员，可以对任何外部中断源编写属于它们各自的程序功能，这些功能就叫做中断服务函数。</p>
<p>对于CPU来说，这些中断服务函数与普通的函数一样都是main函数以外的函数。只不过中断服务函数在定义时需要另外指定存放地址。</p>
<h3 id="3-2-3-中断向量表"><a href="#3-2-3-中断向量表" class="headerlink" title="3-2-3 中断向量表"></a>3-2-3 中断向量表</h3><p>是一段连续的存储器空间，这段空间里存放的是所有中断服务函数的地址，也叫中断向量。</p>
<p>中断服务函数在定义以前需要明确指定存放地址，这是与普通函数定义不同的地方。</p>
<p>在CPU执行指令过程中调用普通函数时，只需要把函数名写在程序代码中进行调用就行了，什么时候调用就什么时候去写函数名。</p>
<p>但是中断服务函数是针对外部设备的请求提出来才执行的，这些<strong>中断服务函数只需要定义，不需要在main函数中调用它</strong>，当外部设备有中断请求提出后CPU自己能判断出来是谁提出的中断，然后就<strong>按中断向量表中约定的地址，去存储器里访问中断服务函数</strong>。</p>
<p>这样一来，只要是外部设备提交了中断请求，不管提交多少次，什么时候提交，CPU都能正确的找到这个中断服务函数的地址去执行。</p>
<h3 id="3-2-4-中断嵌套和中断判优机制"><a href="#3-2-4-中断嵌套和中断判优机制" class="headerlink" title="3-2-4 中断嵌套和中断判优机制"></a>3-2-4 中断嵌套和中断判优机制</h3><p>当CPU在处理一个外部中断的中断服务函数时，也同样是每执行完一条指令就去扫描是否还有中断请求发生。</p>
<p>如果有的话，就要判断一下当前正在执行的中断服务函数与刚刚提交中断请求的所要执行的功能哪个优先级高。</p>
<p>如果请求的高，那么停止当前的中断服务，跳到新的中断请求中去执行服务函数的功能，这就实现了中断嵌套。</p>
<p>当然能够实现中断嵌套的前提是有中断判优机制。</p>
<p>不同的单片机系统中断判优机制不同。有的单片机系统还允许程序员对中断判优进行编程，自行决定外部设备的优先级。</p>
<h3 id="3-2-5-中断允许与屏蔽"><a href="#3-2-5-中断允许与屏蔽" class="headerlink" title="3-2-5 中断允许与屏蔽"></a>3-2-5 中断允许与屏蔽</h3><p>CPU有时候执行的某些操作非常重要，这些操作必须连续执行不允许被外界干扰，这时就可以使用中断屏蔽机制把所有外部提交的中断请求屏蔽掉。</p>
<p>当CPU闭关修炼完成，就可以打开中断，允许接收外部的中断请求了。</p>
<h2 id="3-3-CC2530的外部中断及其配置"><a href="#3-3-CC2530的外部中断及其配置" class="headerlink" title="3-3 CC2530的外部中断及其配置"></a>3-3 CC2530的外部中断及其配置</h2><h3 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3-3-1 介绍"></a>3-3-1 介绍</h3><p>CC2530 共有18个中断源。</p>
<p>每个中断源都有一个中断名，这个中断名就是中断向量。</p>
<p>每个中断源都有一个中断标志位。</p>
<p>每个中断源都有一个 “允许&#x2F;屏蔽“ 控制位。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318180418688.png"
                      alt="image-20240318180418688"
                ></li>
</ul>
<h3 id="3-3-2-IEN0、IEN1、IEN2"><a href="#3-3-2-IEN0、IEN1、IEN2" class="headerlink" title="3-3-2 IEN0、IEN1、IEN2"></a>3-3-2 IEN0、IEN1、IEN2</h3><p>I——Interrupt；EN——Enable。</p>
<p>IEN0、IEN1、IEN2 这三个 SFR每个都用了6个 bit 来分别管理 6个中断源的 “允许&#x2F;屏蔽” 功能。</p>
<p>这些 bit 都有自己专属的名字，“P0IE” 就是P0端口的中断请求 “允许&#x2F;屏蔽” 位名。</p>
<p>IEN0 中有一个bit叫 EA，用来控制系统所有的中断使能。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318192439100.png"
                      alt="image-20240318192439100"
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318192501077.png"
                      alt="image-20240318192501077"
                ></li>
</ul>
<h3 id="3-3-3-中断标志位的作用"><a href="#3-3-3-中断标志位的作用" class="headerlink" title="3-3-3 中断标志位的作用"></a>3-3-3 中断标志位的作用</h3><p>当某个外部中断请求被允许，则对应的中断标志位被<strong>置位</strong> (这个操作由硬件自动完成)，表示希望CPU能够对其进行响应。</p>
<p>在决定响应这个中断请求的功能时CPU得到中断请求后，需要把中断标志位<strong>复位</strong> (这个操作需要程序员在代码中编写完成)，表示已经收到请求，正在对其进行服务。</p>
<p>只 “置位” 不 “复位” 会造成逻辑出错。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318193043126.png"
                      alt="image-20240318193043126"
                ></li>
</ul>
<h3 id="3-3-4-CC2530中断配置步骤"><a href="#3-3-4-CC2530中断配置步骤" class="headerlink" title="3-3-4 CC2530中断配置步骤"></a>3-3-4 CC2530中断配置步骤</h3><p>1.清除中断标志位</p>
<p>2.开启中断允许</p>
<p>3.打开全局中断允许</p>
<h2 id="3-4-实战与挑战"><a href="#3-4-实战与挑战" class="headerlink" title="3-4 实战与挑战"></a>3-4 实战与挑战</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318193739261.png"
                      alt="image-20240318193739261"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240318193759233.png"
                      alt="image-20240318193759233"
                ></p>
</li>
</ul>
<h1 id="4-定时器-计数器"><a href="#4-定时器-计数器" class="headerlink" title="4- 定时器&#x2F;计数器"></a>4- 定时器&#x2F;计数器</h1><h2 id="4-1-振荡器"><a href="#4-1-振荡器" class="headerlink" title="4-1 振荡器"></a>4-1 振荡器</h2><h3 id="4-1-1-介绍"><a href="#4-1-1-介绍" class="headerlink" title="4-1-1 介绍"></a>4-1-1 介绍</h3><p>晶振 (CrystalOscillator，简写为OSC) ：</p>
<ul>
<li>利用 “石英晶体” 制作的振荡器。</li>
</ul>
<p>RC振荡器：</p>
<ul>
<li>利用 电阻电容 的特性制作的振荡器。</li>
</ul>
<h3 id="4-1-2-振荡频率"><a href="#4-1-2-振荡频率" class="headerlink" title="4-1-2 振荡频率"></a>4-1-2 振荡频率</h3><p>振荡器可以产生一定Hz的频率。</p>
<p>振荡的频率 f 和 振荡的周期 T 之间的关系是：</p>
<ul>
<li>T &#x3D; 1 &#x2F; f</li>
<li>1s &#x3D; 1 &#x2F; 1Hz</li>
</ul>
<h3 id="4-1-3-振荡器的作用"><a href="#4-1-3-振荡器的作用" class="headerlink" title="4-1-3 振荡器的作用"></a>4-1-3 振荡器的作用</h3><p>振荡器所输出的振荡频率主要用于为单片机提供系统时钟。</p>
<p>单片机的CPU在系统时钟脉冲信号的驱使下 “有节奏” 的执行机器指令，系统时钟频率越高，单位时间内CPU可以处理的机器指令的条数也就越多，机器的运算速度就越快。</p>
<h2 id="4-2-分频"><a href="#4-2-分频" class="headerlink" title="4-2 分频"></a>4-2 分频</h2><h3 id="4-2-1-分频的作用"><a href="#4-2-1-分频的作用" class="headerlink" title="4-2-1 分频的作用"></a>4-2-1 分频的作用</h3><p>晶振的自然频率远远大于1Hz，需要将晶振频率降低实现。</p>
<p>单片机中CPU是 “快节奏” 部件，除此以外还有很多 “慢节奏” 部件需要相对较低的频率来控制它们的工作。</p>
<h3 id="4-2-2-分频的概念"><a href="#4-2-2-分频的概念" class="headerlink" title="4-2-2 分频的概念"></a>4-2-2 分频的概念</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401103004711.png"
                      alt="image-20240401103004711"
                ></li>
</ul>
<h3 id="4-2-3-如何实现分频"><a href="#4-2-3-如何实现分频" class="headerlink" title="4-2-3 如何实现分频"></a>4-2-3 如何实现分频</h3><p>定时器 &#x2F; 计数器是一种硬件装置，往往被内置在单片机内部。</p>
<p>定时器 &#x2F; 计数器兼有 “定时” 和 “计数” 两个功能。</p>
<p>通过设置定时器 &#x2F; 计数器的 “计数值” ，可以实现对输入的频率进行分频的效果。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401105929349.png"
                      alt="image-20240401105929349"
                ></li>
</ul>
<h2 id="4-3-CC2530中的振荡器和时钟"><a href="#4-3-CC2530中的振荡器和时钟" class="headerlink" title="4-3 CC2530中的振荡器和时钟"></a>4-3 CC2530中的振荡器和时钟</h2><h3 id="4-3-1-介绍"><a href="#4-3-1-介绍" class="headerlink" title="4-3-1 介绍"></a>4-3-1 介绍</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401111030050.png"
                      alt="image-20240401111030050"
                ></li>
</ul>
<h3 id="4-3-2-高频振荡器"><a href="#4-3-2-高频振荡器" class="headerlink" title="4-3-2 高频振荡器"></a>4-3-2 高频振荡器</h3><p>32MHz 晶体振荡器 和 16MHz RC振荡器</p>
<ul>
<li>晶体产生振荡是利用 “压电效应“，32MHz的晶体振荡器，从产生振荡到输出频率达到平稳状态的启动时间，对于某些应用来说可能太长了。</li>
<li>因此设备可以先运行在16MHz的RC振荡器中，直到晶体振荡器稳定后再使用32MHz晶体振荡器。</li>
<li>16MHz的RC振荡器功耗低但是不是很准，所以不能为RF模块提供服务，只能用32MHz的晶体振荡器。</li>
</ul>
<h3 id="4-3-3-低频振荡器"><a href="#4-3-3-低频振荡器" class="headerlink" title="4-3-3 低频振荡器"></a>4-3-3 低频振荡器</h3><p>32kHz 晶体振荡器 和 32kHz RC振荡器</p>
<ul>
<li>32kHz的XOSC被设计的工作频率频率是32.768KHz，并且可以为一些要求时钟准确子系统提供一个稳定的时钟信号。</li>
<li>低频振荡用作系统休眠时提供休眠时钟以降低功耗。</li>
</ul>
<h3 id="4-3-4-主时钟"><a href="#4-3-4-主时钟" class="headerlink" title="4-3-4 主时钟"></a>4-3-4 主时钟</h3><p>CC2530有一个内部时钟，也叫主时钟。</p>
<ul>
<li>主时钟频率一般在32MHz。</li>
<li>系统上电后默认使用的是 16MHz 的RC振荡器提供主时钟，当 32MHz 的晶振稳定后，可以选择由 32MHz 的晶振来提供主时钟。</li>
<li>开发人员可以根据实际应用需要来选择不同的时钟源提供主时钟。</li>
</ul>
<h3 id="4-3-5-应用案例"><a href="#4-3-5-应用案例" class="headerlink" title="4-3-5 应用案例"></a>4-3-5 应用案例</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401114638933.png"
                      alt="image-20240401114638933"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401114717233.png"
                      alt="image-20240401114717233"
                ></p>
</li>
</ul>
<h2 id="4-4-CC2530中的Timers"><a href="#4-4-CC2530中的Timers" class="headerlink" title="4-4 CC2530中的Timers"></a>4-4 CC2530中的Timers</h2><h3 id="4-4-1-介绍"><a href="#4-4-1-介绍" class="headerlink" title="4-4-1 介绍"></a>4-4-1 介绍</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401180710702.png"
                      alt="image-20240401180710702"
                ></li>
</ul>
<h3 id="4-4-2-Timer1"><a href="#4-4-2-Timer1" class="headerlink" title="4-4-2 Timer1"></a>4-4-2 Timer1</h3><ul>
<li><p>Timer1 是一个16位定时器，具有定时、计数、PWM (Pulse WidthModulation，脉冲宽度调制，简称脉宽调制) 功能。</p>
</li>
<li><p>它内置可编程分频器，可以对输入的时钟信号进行分频。</p>
</li>
<li><p>16位计数器可以实现从 0x0000 到 0xFFFF 之间任意间的计数。</p>
</li>
<li><p>Timer1拥有5个独立的均可编程的计数&#x2F;捕获通道，每个通道都能实现16位的计数或者输出PWM等功能。</p>
</li>
<li><p>Timer1还可以被设置为中断请求模式，在计数结束时向CPU提出中断请求。</p>
</li>
</ul>
<h3 id="4-4-3-Timer2"><a href="#4-4-3-Timer2" class="headerlink" title="4-4-3 Timer2"></a>4-4-3 Timer2</h3><ul>
<li><p>Timer2 也叫 MAC Timer，是专门用来为支持IEEE 802.15.4协议 (低速无线个人网络) 的MAC层提供时钟信号。</p>
</li>
<li><p>如果利用CC2530内置的RF (RadioFrequency，射频) 功能进行数据传输，也就是Zigbee通信，那就需要 Timer2 产生的时钟信号进行数据的收发控制。</p>
</li>
</ul>
<h3 id="4-4-4-Timer3-和-Timer4"><a href="#4-4-4-Timer3-和-Timer4" class="headerlink" title="4-4-4 Timer3 和 Timer4"></a>4-4-4 Timer3 和 Timer4</h3><ul>
<li><p>Timer3 和 Timer4 都是8位的定时器，它们同样具有定时、计数以及PWM功能。</p>
</li>
<li><p>它们跟 Timer1 一样也内置了可编程分频器，但他们内部的计数器是8位的，计数范围是 0x00 到 0xFF 。</p>
</li>
<li><p>Timer3 和 Timer4 都只有一个计数通道，这个通道同样可以产生PWM。</p>
</li>
</ul>
<h3 id="4-4-5-Sleep-Timer"><a href="#4-4-5-Sleep-Timer" class="headerlink" title="4-4-5 Sleep Timer"></a>4-4-5 Sleep Timer</h3><ul>
<li><p>Sleep Timer 是一个超低功耗定时器，可以对32kHz 晶振或者32kHz RC振荡器周期进行计数。</p>
</li>
<li><p>CC2530处于休眠状态时它可以用来作为实时时钟。</p>
</li>
<li><p>还可以作为CC2530从休眠到唤醒时的唤醒时钟。</p>
</li>
</ul>
<h2 id="4-5-CC2530中的Timer1-T1"><a href="#4-5-CC2530中的Timer1-T1" class="headerlink" title="4-5 CC2530中的Timer1 (T1)"></a>4-5 CC2530中的Timer1 (T1)</h2><h3 id="4-5-1-介绍"><a href="#4-5-1-介绍" class="headerlink" title="4-5-1 介绍"></a>4-5-1 介绍</h3><p>包含一个16位计数器，在每个活动时钟边沿递增或递减。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401183817394.png"
                      alt="image-20240401183817394"
                ></li>
</ul>
<p>系统时钟可以预先被1，8，32或128分频后再作为计数时钟。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401183905224.png"
                      alt="image-20240401183905224"
                ></li>
</ul>
<p>有自由运行、模计数、正计数&#x2F;倒计数 三种工作模式。</p>
<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401183958530.png"
                      alt="image-20240401183958530"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401184023881.png"
                      alt="image-20240401184023881"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401184043996.png"
                      alt="image-20240401184043996"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401184105848.png"
                      alt="image-20240401184105848"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401184124022.png"
                      alt="image-20240401184124022"
                ></p>
</li>
</ul>
<p>有5个独立的捕获&#x2F;比较通道。</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401184205951.png"
                      alt="image-20240401184205951"
                ></li>
</ul>
<p>可提交中断请求。</p>
<p>DMA触发功能。</p>
<h3 id="4-5-2-初始化配置"><a href="#4-5-2-初始化配置" class="headerlink" title="4-5-2 初始化配置"></a>4-5-2 初始化配置</h3><ul>
<li><p>修改 T1CTL 的值来设置 Timer1 的计数频率、工作模式等。</p>
</li>
<li><p>如果工作在模计数模式或者正计数&#x2F;倒计数模式下时，需要配置对应通道的 T1CCn 的值，即先写 T1CCnL ，再写 T1CCnH 的值。</p>
</li>
<li><p>设置对应通道是比较还是捕获模式，即修改 T1CCTLn 的值。</p>
</li>
<li><p>如果需要使用中断还要配置相应的中断使能和中断标志位。</p>
</li>
</ul>
<h2 id="4-6-实战"><a href="#4-6-实战" class="headerlink" title="4-6 实战"></a>4-6 实战</h2><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401201222603.png"
                      alt="image-20240401201222603"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401201339096.png"
                      alt="image-20240401201339096"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401201354732.png"
                      alt="image-20240401201354732"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240401201413185.png"
                      alt="image-20240401201413185"
                ></p>
</li>
</ul>
<h1 id="5-串行通信"><a href="#5-串行通信" class="headerlink" title="5- 串行通信"></a>5- 串行通信</h1><h2 id="5-1-通信介绍"><a href="#5-1-通信介绍" class="headerlink" title="5-1 通信介绍"></a>5-1 通信介绍</h2><h3 id="5-1-1-通信系统三要素"><a href="#5-1-1-通信系统三要素" class="headerlink" title="5-1-1 通信系统三要素"></a>5-1-1 通信系统三要素</h3><ul>
<li><p>信源、信道、信宿（发送端、传输介质、接收端）。</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422082321987.png"
                      alt="image-20240422082321987"
                ></p>
</li>
</ul>
<h3 id="5-1-2-并行通信与串行通信"><a href="#5-1-2-并行通信与串行通信" class="headerlink" title="5-1-2 并行通信与串行通信"></a>5-1-2 并行通信与串行通信</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422082406929.png"
                      alt="image-20240422082406929"
                ></li>
</ul>
<h2 id="5-2-串行通信介绍"><a href="#5-2-串行通信介绍" class="headerlink" title="5-2 串行通信介绍"></a>5-2 串行通信介绍</h2><h3 id="5-2-1-串行通信中数据收发过程"><a href="#5-2-1-串行通信中数据收发过程" class="headerlink" title="5-2-1 串行通信中数据收发过程"></a>5-2-1 串行通信中数据收发过程</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422082843730.png"
                      alt="image-20240422082843730"
                ></li>
</ul>
<h3 id="5-2-2-同步串行通信介绍"><a href="#5-2-2-同步串行通信介绍" class="headerlink" title="5-2-2 同步串行通信介绍"></a>5-2-2 同步串行通信介绍</h3><ul>
<li><p>发送方在发送数据时，接收方必须也在时刻准备着接收数据。</p>
</li>
<li><p>发送方和接收方的时钟频率相同，否则会造成数据错误。</p>
</li>
<li><p>发送方所发送的数据帧中字符是一个挨着一个传递，字符之间没有间隙（空闲）。</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422083031077.png"
                      alt="image-20240422083031077"
                ></p>
</li>
</ul>
<h3 id="5-2-3-异步串行通信介绍"><a href="#5-2-3-异步串行通信介绍" class="headerlink" title="5-2-3 异步串行通信介绍"></a>5-2-3 异步串行通信介绍</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422083335071.png"
                      alt="image-20240422083335071"
                ></li>
</ul>
<h3 id="5-2-4-常用异步串行通信接口-—-UART"><a href="#5-2-4-常用异步串行通信接口-—-UART" class="headerlink" title="5-2-4 常用异步串行通信接口 — UART"></a>5-2-4 常用异步串行通信接口 — UART</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422084048295.png"
                      alt="image-20240422084048295"
                ></li>
</ul>
<h3 id="5-2-5-波特率"><a href="#5-2-5-波特率" class="headerlink" title="5-2-5 波特率"></a>5-2-5 波特率</h3><p>概念：</p>
<ul>
<li>指每秒钟发生的信号或符号的变化的数量，这里的符号可以是 “电压、频率或相位” 。</li>
</ul>
<p>作用：</p>
<ul>
<li>用来在通信双方约定好 “数据” 的传输速率，这样发送端与接收端才能保持 “步调一致” 地进行 “发和收” ，否则就会出现 “发得快收得慢” 或者 “发得慢收得快” 的情况。</li>
</ul>
<h2 id="5-3-CC2530中的串行通信接口"><a href="#5-3-CC2530中的串行通信接口" class="headerlink" title="5-3 CC2530中的串行通信接口"></a>5-3 CC2530中的串行通信接口</h2><ul>
<li><p>CC2530中有两个独立的 USART 接口，分别是 USART0 和 USART1 。</p>
</li>
<li><p>它们可以分别工作在 “异步串行通信” 的 UART 模式下或者 “同步串行通信” 的 SPI 模式下。</p>
</li>
<li><p>UART 操作由 USART 控制和状态寄存器 UxCSR 以及 UART 控制寄存器 UxUCR 来控制。这里的 x 是 USART 的编号，其数值为 0 或者 1。当 UxCSR.MODE 设置为 1 时，就选择了 UART 模式。</p>
</li>
<li><p>UxDBUF 是双向缓冲寄存器，当执行数据发送时，首先将要发送的字符存入到 UxDBUF 中；当执行数据接收时，从 UxDBUF 中读取数据。</p>
</li>
<li><p>通过 UxUCR 来设置当前异步串行通信的配置，包括：起始位用高电平还是低电平、数据位位数、停止位位数、是否有奇偶校验位等。</p>
</li>
<li><p>通过 UxBAUD 和 UxGCR 的组合来配置 USARTx 的波特率。</p>
</li>
<li><p>CC2530中的两个 USART 都可以向 MCU 提出 “数据接收完成中断请求” 和 “数据发送完成中断请求” 。</p>
</li>
</ul>
<h2 id="5-4-CC2530中的串口编程应用"><a href="#5-4-CC2530中的串口编程应用" class="headerlink" title="5-4 CC2530中的串口编程应用"></a>5-4 CC2530中的串口编程应用</h2><h3 id="5-4-1-串口初始化"><a href="#5-4-1-串口初始化" class="headerlink" title="5-4-1 串口初始化"></a>5-4-1 串口初始化</h3><ul>
<li><p>初始化中包含对CC2530中 USARTn 的选择、同步异步选择、异步串行通信中数据帧格式的设置、波特率的设置等。</p>
</li>
<li><p>这里会涉及到 UxCSR、UxUCR 、UxBAUD和UxGCR 设置。</p>
</li>
<li><p>另外CC2530的 USARTn 控制器是连接在 GPIO 中的，还需要对相应的 pin 进行配置。</p>
</li>
</ul>
<h3 id="5-4-2-CC2530中外设引脚映射关系表"><a href="#5-4-2-CC2530中外设引脚映射关系表" class="headerlink" title="5-4-2 CC2530中外设引脚映射关系表"></a>5-4-2 CC2530中外设引脚映射关系表</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422093516963.png"
                      alt="image-20240422093516963"
                ></li>
</ul>
<h3 id="5-4-3-实例"><a href="#5-4-3-实例" class="headerlink" title="5-4-3 实例"></a>5-4-3 实例</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422094223264.png"
                      alt="image-20240422094223264"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-22%20094411.png"
                      alt="屏幕截图 2024-04-22 094411"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-22%20094527.png"
                      alt="屏幕截图 2024-04-22 094527"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-22%20094538.png"
                      alt="屏幕截图 2024-04-22 094538"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-22%20094655.png"
                      alt="屏幕截图 2024-04-22 094655"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422094918066.png"
                      alt="image-20240422094918066"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-22%20094715.png"
                      alt="屏幕截图 2024-04-22 094715"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-22%20094724.png"
                      alt="屏幕截图 2024-04-22 094724"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-22%20094735.png"
                      alt="屏幕截图 2024-04-22 094735"
                ></p>
</li>
</ul>
<h3 id="5-4-4-串口发送数据功能"><a href="#5-4-4-串口发送数据功能" class="headerlink" title="5-4-4 串口发送数据功能"></a>5-4-4 串口发送数据功能</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422095632562.png"
                      alt="image-20240422095632562"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422095703389.png"
                      alt="image-20240422095703389"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422095720690.png"
                      alt="image-20240422095720690"
                ></p>
</li>
</ul>
<h3 id="5-4-5-串口接收数据功能"><a href="#5-4-5-串口接收数据功能" class="headerlink" title="5-4-5 串口接收数据功能"></a>5-4-5 串口接收数据功能</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422104240441.png"
                      alt="image-20240422104240441"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422104258747.png"
                      alt="image-20240422104258747"
                ></p>
</li>
</ul>
<h2 id="5-5-实战"><a href="#5-5-实战" class="headerlink" title="5-5 实战"></a>5-5 实战</h2><h3 id="5-5-1-要求"><a href="#5-5-1-要求" class="headerlink" title="5-5-1 要求"></a>5-5-1 要求</h3><ul>
<li>将PC机与xLabGreenHouse的Node3 CC2530连接，当通过PC机的键盘输入一串以‘@’结束的字符串，通过串口工具发送给CC2530，CC2530将刚才接收到的内容原样输出到串口工具界面中。</li>
</ul>
<h3 id="5-5-2-实现"><a href="#5-5-2-实现" class="headerlink" title="5-5-2 实现"></a>5-5-2 实现</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422104809842.png"
                      alt="image-20240422104809842"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422104825549.png"
                      alt="image-20240422104825549"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422104847083.png"
                      alt="image-20240422104847083"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422104901820.png"
                      alt="image-20240422104901820"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240422104920269.png"
                      alt="image-20240422104920269"
                ></p>
</li>
</ul>
<h1 id="6-ADC"><a href="#6-ADC" class="headerlink" title="6- ADC"></a>6- ADC</h1><h2 id="6-1-模拟信号和数字信号"><a href="#6-1-模拟信号和数字信号" class="headerlink" title="6-1 模拟信号和数字信号"></a>6-1 模拟信号和数字信号</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513081142160.png"
                      alt="image-20240513081142160"
                ></li>
</ul>
<p>模拟量：</p>
<ul>
<li>任何两个数字之间都有无限个中间值，所以称之为连续变化的量，也就是模拟量。</li>
</ul>
<p>数字量：</p>
<ul>
<li>数字间有一定的间隔，不是连续的，即离散的量称之为数字量。</li>
</ul>
<p>A&#x2F;D：</p>
<ul>
<li>Analog to Digital Converter，用模数转换器实现模拟量到数字量的转换，简称ADC。</li>
</ul>
<p>D&#x2F;A：</p>
<ul>
<li>Digitalto Analog Converter，用数模转换器实现数字量到模拟量的转换，简称DAC。</li>
</ul>
<h2 id="6-2-ADC"><a href="#6-2-ADC" class="headerlink" title="6-2 ADC"></a>6-2 ADC</h2><h3 id="6-2-1-介绍"><a href="#6-2-1-介绍" class="headerlink" title="6-2-1 介绍"></a>6-2-1 介绍</h3><p>ADC ( analog to digital converter )：</p>
<ul>
<li>模数转换器，它是将连续变化的模拟信号转换为离散的数字信号的器件。</li>
</ul>
<h3 id="6-2-2-转换"><a href="#6-2-2-转换" class="headerlink" title="6-2-2 转换"></a>6-2-2 转换</h3><p>转换过程：</p>
<ul>
<li><p>采样 → 量化 → 编码</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513081950660.png"
                      alt="image-20240513081950660"
                ></p>
</li>
</ul>
<p>实例：</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513082147734.png"
                      alt="image-20240513082147734"
                ></li>
</ul>
<h3 id="6-2-3-分辨率"><a href="#6-2-3-分辨率" class="headerlink" title="6-2-3 分辨率"></a>6-2-3 分辨率</h3><p>分辨率：</p>
<ul>
<li>能够分辨出模拟量之间变化的最小值。</li>
<li>1个二进制数据描述 0~5V 的电压变化，分辨率是 2.5V。</li>
<li>2个二进制数据描述 0~5V 的电压变化，分辨率是 1.25V。</li>
<li>3个二进制数据描述 0~5V 的电压变化，分辨率是 0.625V</li>
</ul>
<h3 id="6-2-4-重要参数"><a href="#6-2-4-重要参数" class="headerlink" title="6-2-4 重要参数"></a>6-2-4 重要参数</h3><p>ADC的位数：</p>
<ul>
<li><p>一个 n 位的 ADC 表示这个 ADC 共有 2的n次方 个刻度。</p>
</li>
<li><p>8 位的 ADC，输出的是从 0~255 一共256个数字量，也就是 2的8次方 个数据刻度。</p>
</li>
</ul>
<p>参考电压：</p>
<ul>
<li><p>也叫做基准电压，是 ADC 的参考基准，是指转换后满量程所对应的电压值，是 ADC 的一个重要指标。</p>
</li>
<li><p>要想把输入 ADC 的信号测量准确，那么基准源首先要准，基准源的偏差会直接导致转换结果的偏差。</p>
</li>
</ul>
<p>分辨率：</p>
<ul>
<li><p>数字量变化一个最小刻度，模拟信号的变化量，定义为满刻度量程与 2的n次方 的比值。</p>
</li>
<li><p>假定 5.10V 的电压系统，使用8位的 ADC 进行测量，那么相当于 0~255 一共 256 个刻度把 5.10V 平均分成了255 份，那么分辨率就是 5.10&#x2F;255 &#x3D; 0.02V。</p>
</li>
</ul>
<p>转换速率：</p>
<ul>
<li>是指 ADC 每秒能进行采样转换的最大次数单位是 sps ( samples per second )。</li>
</ul>
<h3 id="6-2-5-逐次逼近型ADC的原理"><a href="#6-2-5-逐次逼近型ADC的原理" class="headerlink" title="6-2-5 逐次逼近型ADC的原理"></a>6-2-5 逐次逼近型ADC的原理</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513084103073.png"
                      alt="image-20240513084103073"
                ></li>
</ul>
<h2 id="6-3-CC2530的ADC"><a href="#6-3-CC2530的ADC" class="headerlink" title="6-3 CC2530的ADC"></a>6-3 CC2530的ADC</h2><h3 id="6-3-1-介绍"><a href="#6-3-1-介绍" class="headerlink" title="6-3-1 介绍"></a>6-3-1 介绍</h3><ul>
<li>可选7~12位的分辨率</li>
<li>8个独立的输入通道，可接收单端或差分信号</li>
<li>转换结束时可选 中断触发 或 DMA触发</li>
<li>配有温度传感器输入</li>
<li>具有电池测量功能</li>
</ul>
<h3 id="6-3-2-CC2530的ADC方框图："><a href="#6-3-2-CC2530的ADC方框图：" class="headerlink" title="6-3-2 CC2530的ADC方框图："></a>6-3-2 CC2530的ADC方框图：</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513090712282.png"
                      alt="image-20240513090712282"
                ></li>
</ul>
<h3 id="6-3-3-与ADC有关的SFR"><a href="#6-3-3-与ADC有关的SFR" class="headerlink" title="6-3-3 与ADC有关的SFR"></a>6-3-3 与ADC有关的SFR</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513090939286.png"
                      alt="image-20240513090939286"
                ></li>
</ul>
<h2 id="6-4-CC2530的ADC编程应用"><a href="#6-4-CC2530的ADC编程应用" class="headerlink" title="6-4 CC2530的ADC编程应用"></a>6-4 CC2530的ADC编程应用</h2><h3 id="6-4-1-ADC初始化"><a href="#6-4-1-ADC初始化" class="headerlink" title="6-4-1 ADC初始化"></a>6-4-1 ADC初始化</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513094154578.png"
                      alt="image-20240513094154578"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513094230400.png"
                      alt="image-20240513094230400"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513094254375.png"
                      alt="image-20240513094254375"
                ></p>
</li>
</ul>
<h3 id="6-4-2-CC2530片内温度传感器数值计算"><a href="#6-4-2-CC2530片内温度传感器数值计算" class="headerlink" title="6-4-2 CC2530片内温度传感器数值计算"></a>6-4-2 CC2530片内温度传感器数值计算</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513094405881.png"
                      alt="image-20240513094405881"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513094428537.png"
                      alt="image-20240513094428537"
                ></p>
</li>
</ul>
<h2 id="6-5-实战"><a href="#6-5-实战" class="headerlink" title="6-5 实战"></a>6-5 实战</h2><h3 id="6-5-1-要求"><a href="#6-5-1-要求" class="headerlink" title="6-5-1 要求"></a>6-5-1 要求</h3><ul>
<li>实时获取 xLabGreenHouse 实验平台中任意一个 CC2530 节点的芯片温度，并将获取的温度数据实时输出到与之连接的 PC 机的串口调试助手的接收区中。</li>
<li>利用 CC2530 片上 ADC 获取片内温度传感器的数据</li>
<li>配置串口通信实现数据的实时传输</li>
</ul>
<h3 id="6-5-2-实现"><a href="#6-5-2-实现" class="headerlink" title="6-5-2 实现"></a>6-5-2 实现</h3><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513100653396.png"
                      alt="image-20240513100653396"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1324607906.cos.ap-beijing.myqcloud.com/bokeimage/image-20240513100714797.png"
                      alt="image-20240513100714797"
                ></p>
</li>
</ul>
]]></content>
      <categories>
        <category>硬件</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>课程笔记</tag>
      </tags>
  </entry>
</search>
